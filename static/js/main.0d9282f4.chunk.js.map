{"version":3,"sources":["components/GlobalMenu.tsx","context/EnglishData.ts","lib/EnglishVoice.ts","components/WordPage/Word.tsx","components/WordPage/Plural.tsx","components/WordPage/Sentence.tsx","components/Pagination.tsx","components/Part.tsx","components/Common/Favorite.tsx","components/SideMenu.tsx","pages/WordPage.tsx","components/WordTransPage/Word.tsx","pages/WordTransPage.tsx","components/WordGrammerPage/Grammer.tsx","pages/WordGrammerPage.tsx","components/GrammerPage/Grammer.tsx","context/GrammerData.ts","pages/GrammerPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalMenu","props","BottomNavigation","showLabels","style","position","bottom","width","onChange","event","newValue","changeCurrentPage","sessionStorage","setItem","BottomNavigationAction","showLabel","label","value","icon","EnglishData","words","axios","get","then","response","Array","isArray","data","values","responseWords","shift","forEach","w","push","id","part","word","plural","partOfSpeech","trans","sentence","sentenceTrans","JSON","stringify","catch","storageWords","getItem","length","parse","this","getWordData","reduce","val","cur","includes","some","v","EnglishVoice","text","lang","rate","voice","window","speechSynthesis","getVoices","filter","utter","SpeechSynthesisUtterance","speak","Word","display","height","className","Container","maxWidth","Grid","container","item","xs","Typography","variant","Avatar","component","substr","visibleWord","direction","TextField","error","isInputWordCompleted","fullWidth","inputWordString","o","changeInputWord","target","toLowerCase","changeInputWordCompleted","onClick","speech","spacing","justify","alignItems","Button","color","React","Plural","visiblePlural","isInputPluralCompleted","inputPluralString","changeInputPlural","changeInputPluralCompleted","Sentence","Box","visibleSentence","m","fontSize","speechSpeedRate","Pagination","size","onClickPrev","disabled","index","onClickNext","maxPage","Part","currentPart","Favorite","SideMenu","useState","menuToggle","setMenuToggle","parts","classes","makeStyles","list","useStyles","IconButton","aria-label","edge","Drawer","anchor","open","onClose","List","map","p","ListItem","button","changeCurrentPart","ListItemText","primary","ListItemIcon","Divider","Slider","min","max","step","aria-labelledby","valueLabelDisplay","e","changeSpeechSpeedRate","WordPage","firstPart","localStorage","getFirstPart","wIndex","Number","slides","setSlides","wordIndex","setWordIndex","setCurrentPart","setVisibleWord","setVisiblePlural","setVisibleSentence","setIsInputWordCompleted","setIsInputPluralCompleted","setInputWordString","setInputPluralString","setSpeechSpeedRate","slidePrev","newIndex","toString","slideNext","swipeHandles","useSwipeable","onSwipedLeft","absX","onSwipedRight","preventDefaultTouchmoveEvent","trackMouse","getParts","s","category","WordTransPage","Grammer","stockWords","ansWords","lastChar","buttonStyle","minWidth","textTransform","margin","wordsStyle","minHeight","translate","isAnsComplated","moveStockWords","moveAnsWords","GrammerPage","getSentences","toLocaleLowerCase","slice","split","answer","setAnswer","setIsAnsComplated","a","weight","Math","random","sort","b","setStockWords","setAnsWords","i","separateSentence","shuffle","aw","sw","every","GrammerData","sentences","dummyWord","storageSentences","getGrammerData","answerAddDummy","App","state","currentPage","setWordData","setGrammerData","theme","createMuiTheme","palette","main","colors","type","changePage","setState","ThemeProvider","CssBaseline","WordGrammerPage","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d9282f4.chunk.js","sourcesContent":["import React from 'react';\nimport { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\n\n\ninterface GlobalMenuProps {\n  currentPage: string,\n  changeCurrentPage: (val:pageNames) => void\n}\n\nconst GlobalMenu:React.FC<GlobalMenuProps> = props => {\n\n  const style:React.CSSProperties = {\n    position:'fixed',\n    bottom:0,\n    width: '100%',\n  }\n\n  return (\n    <BottomNavigation\n      showLabels={true}\n      style={style}\n      onChange={(event, newValue:pageNames) => {\n        props.changeCurrentPage(newValue);\n        sessionStorage.setItem('currentPage', newValue);\n      }}\n    >\n      <BottomNavigationAction showLabel={true} label='Word' value='WordPage' icon={<TextFormatIcon />} />\n      <BottomNavigationAction showLabel={true} label='WordTrans' value='WordTransPage'icon={<TextFormatIcon />} />\n      <BottomNavigationAction showLabel={true} label='Grammer' value='GrammerPage'icon={<TextFieldsIcon />} />\n    </BottomNavigation>\n  );\n}\n\nexport default GlobalMenu;","import axios from \"axios\";\n\ntype sentenceType = {\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n}\n\ntype wordType = {\n  id: string,\n  part: string,\n  word: string,\n  plural: string,\n  partOfSpeech: string,\n  trans: string,\n  sentence: string,\n  sentenceTrans: string,\n}\n\nexport default class EnglishData {\n  static setWordData() {\n    const sheetId = '10QM4n6jg93YevAhr-yS8SFp8VjaK_lv09VF_HfFxTYk';\n    const sheetName = 'new_horizon_j1_word';\n    const apiKey = 'AIzaSyD61LRLY0MGuJyIU9EQCb4KUDiFJRmxO1o';\n    const words:wordType[] = [];\n    return axios\n    .get('https://sheets.googleapis.com/v4/spreadsheets/'+sheetId+'/values/'+sheetName+'?key='+apiKey)\n    .then(response => {\n      if (!Array.isArray(response.data.values)) {\n        return words;\n      }\n      const responseWords = response.data.values;\n      responseWords.shift();\n      responseWords.forEach((w: any) => {\n        words.push({\n          id: w[0],\n          part: w[1],\n          word: w[2],\n          plural: w[3],\n          partOfSpeech: w[4],\n          trans: w[5],\n          sentence: w[6],\n          sentenceTrans: w[7]\n        })\n      })\n      sessionStorage.setItem('WORDS', JSON.stringify(words));\n    })\n    .catch(() => words);\n  }\n\n  static getWordData() {\n    const storageWords = sessionStorage.getItem('WORDS');\n    const words:wordType[] = [];\n    if (storageWords != null && storageWords.length > 0) {\n      JSON.parse(storageWords).forEach((w:any) => {\n        words.push({\n          id: w['id'],\n          part: w['part'],\n          word: w['word'],\n          plural: w['plural'],\n          partOfSpeech: w['partOfSpeech'],\n          trans: w['trans'],\n          sentence: w['sentence'],\n          sentenceTrans: w['sentenceTrans']\n        })\n      });\n    }\n    return words;\n  }\n\n  static getFirstPart() {\n    return this.getWordData().reduce((val:string[], cur:any) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, [])[0];\n  }\n\n  static getParts() {\n    return this.getWordData().reduce((val:string[], cur:any) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, []);  \n  }\n\n  static getSentences() {\n    return this.getWordData().reduce((val:sentenceType[], cur:any) => {\n      const w:sentenceType = {\n        part: cur.part,\n        sentence: cur.sentence, \n        sentenceTrans: cur.sentenceTrans\n      };\n\n      if (!val.some(v => \n        v.part === w.part && v.sentence === w.sentence)) {\n        val.push(w);\n      }\n      return val;\n    }, []);  \n  }\n}\n","class EnglishVoice {\n  static speech(text:string, lang: string, rate: number) {\n    const synth = window.speechSynthesis;\n    const voices = synth.getVoices().filter(voice => voice.lang === lang);\n    const voice = voices[0];\n    const utter = new SpeechSynthesisUtterance();\n    utter.text = text;\n    utter.lang = lang;\n    utter.voice = voice;\n    utter.rate = rate;\n    window.speechSynthesis.speak(utter);\n  }\n}\n\nexport default EnglishVoice;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface WordProps {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    visibleWord: string;\n    isInputWordCompleted: boolean;\n    inputWordString:string;\n    onClick: () => void;\n    changeInputWordCompleted: (val:boolean) => void;\n    changeInputWord: (val:string) => void;    \n}\n\nclass Word extends React.Component<WordProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    \n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <Grid container>\n            <Grid item xs={10}>\n              <Typography variant='subtitle1'>\n                {this.props.trans}\n              </Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <Avatar\n                variant='circular'\n                component='span'\n              >\n                {partOfSpeech.substr(0,1)}\n              </Avatar>\n            </Grid>\n          </Grid>\n          <Typography variant='h4' className={this.props.visibleWord}>\n            {this.props.word}\n          </Typography>\n          <br/>\n          <Grid container direction=\"row\">\n            <TextField\n              error={!this.props.isInputWordCompleted}\n              label= {this.props.isInputWordCompleted ? \"OK\" : \"input word\"}\n              fullWidth={true}\n              value={this.props.inputWordString}\n              variant=\"outlined\"\n              onChange={(o) => \n                {\n                  this.props.changeInputWord(o.target.value.toLowerCase());\n                  if (this.props.word.toLowerCase() === o.target.value.toLowerCase()) {\n                    this.props.changeInputWordCompleted(true);\n                    this.props.onClick();\n                    EnglishVoice.speech('OK. '+this.props.word, 'en-US', 1);\n                  } else {\n                    this.props.changeInputWordCompleted(false);\n                  }\n                }\n              }\n            />\n          </Grid>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => this.props.onClick()}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.word, 'en-US', 1);\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Word;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface PluralProps {\n    plural: string;\n    partOfSpeech: string;\n    trans: string;\n    visiblePlural: string;\n    isInputPluralCompleted: boolean;\n    inputPluralString:string;\n    onClick: () => void;\n    changeInputPluralCompleted: (val:boolean) => void;\n    changeInputPlural: (val:string) => void;    \n}\n\nclass Plural extends React.Component<PluralProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    \n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <Typography variant='h4' className={this.props.visiblePlural}>\n            {this.props.plural}\n          </Typography>\n          <br/>\n          <Grid container direction=\"row\">\n            <TextField\n              error={!this.props.isInputPluralCompleted}\n              label= {this.props.isInputPluralCompleted ? \"OK\" : \"input plural\"}\n              fullWidth={true}\n              value={this.props.inputPluralString}\n              variant=\"outlined\"\n              onChange={(o) => \n                {\n                  this.props.changeInputPlural(o.target.value.toLowerCase());\n                  if (this.props.plural.toLowerCase() === o.target.value.toLowerCase()) {\n                    this.props.changeInputPluralCompleted(true);\n                    this.props.onClick();\n                    EnglishVoice.speech('OK. '+this.props.plural, 'en-US', 1);\n                  } else {\n                    this.props.changeInputPluralCompleted(false);\n                  }\n                }\n              }\n            />\n          </Grid>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => this.props.onClick()}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.plural, 'en-US', 1);\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Plural;","import * as React from 'react';\nimport { Container, Button, Grid } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\n\ninterface SentenceProps {\n    sentence: string;\n    trans: string;\n    visibleSentence: string;\n    speechSpeedRate: number;\n    onClick: () => void;\n}\n\nclass Sentence extends React.Component<SentenceProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <div onClick={() => this.props.onClick()}>\n            <p className=\"word\">{this.props.trans}</p>\n          </div>\n          <Typography component=\"div\">\n            <Box\n              className={this.props.visibleSentence}\n              m={1}\n            >\n              {this.props.sentence}\n            </Box>\n          </Typography>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => this.props.onClick()}\n              >\n                <TranslateIcon\n                  fontSize='small'\n                />\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.sentence, 'en-US', this.props.speechSpeedRate);\n                }}\n              >\n                <VolumeUpIcon\n                  fontSize='small'\n                />\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Sentence;","import * as React from 'react';\nimport { Button, Grid } from '@material-ui/core';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\n\nimport 'fontsource-roboto';\n\ninterface PaginationProps {\n  index: number;\n  maxPage: number;\n  onClickPrev: () => void;\n  onClickNext: () => void;\n} \nconst Pagination: React.FC<PaginationProps> = (props) => {\n  return (\n    <Grid\n    container\n    direction=\"row\"\n    justify=\"space-around\"\n    alignItems=\"flex-end\"\n    >\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => props.onClickPrev()}\n        disabled={props.index === 0 ? true : false}\n      >\n        <ArrowBackIosIcon />\n      </Button> \n      <Button \n        variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => props.onClickNext()}\n        disabled={props.index >= props.maxPage-1 ? true : false}\n      >\n        <ArrowForwardIosIcon />\n      </Button>\n    </Grid>\n  );\n}\n\nexport default Pagination;","import * as React from 'react';\nimport { Grid, Typography, Box } from '@material-ui/core';\n\nconst Part: React.FC<{currentPart: string}> = ({currentPart}) => {\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"space-around\"\n      alignItems=\"flex-end\"\n    >\n        <Typography component=\"div\">\n          <Box\n            fontSize=\"h6.fontSize\" m={1}\n          >\n            {currentPart}\n          </Box>\n        </Typography>        \n    </Grid>\n  );\n}\n\nexport default Part;","import * as React from 'react';\nimport { Container, Button, Grid } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface FavoriteProps {\n    category: 'Grammer'|'Word';\n    part: string;\n    id: string;\n\n}\nexport default function Favorite(props:FavoriteProps) {\n    \n    return (\n        <div>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"small\"\n    //            onClick={() => props.onClickPrev()}\n    //            disabled={props.index === 0 ? true : false}\n            >\n                お気に入り登録\n            </Button>\n        </div>\n    )\n\n}\n","import React, { useState } from 'react';\nimport { Drawer, IconButton, List, ListItem, Slider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { ListItemText, ListItemIcon } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Divider from '@material-ui/core/Divider';\n\ninterface SideMenuProps {\n  parts: string[];\n  currentPart: string;\n  changeCurrentPart: (val:string) => void;\n  speechSpeedRate: number;\n  changeSpeechSpeedRate: (val:number) => void;\n}\n\nconst SideMenu: React.FC<SideMenuProps> = props => {\n  const [menuToggle, setMenuToggle] = useState(false);\n\n  const toggleDrawer = () => {\n    setMenuToggle(!menuToggle);\n  };\n\n  const parts = props.parts;\n\n  const useStyles = makeStyles({\n    list: {\n      width: '50vw',\n    }\n  });\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <IconButton\n        color=\"inherit\"\n        aria-label=\"open drawer\"\n        edge=\"end\"\n        onClick={() => toggleDrawer()}\n      />\n      <Drawer\n        anchor='right'\n        open={menuToggle}\n        onClose={() => setMenuToggle(false)}\n      >\n        <div className={classes.list}>\n          <CloseIcon\n            onClick={() => setMenuToggle(false)}\n          />\n          <List component=\"nav\" aria-label=\"secondary part\">\n            {\n              parts.map(p => {\n                return (\n                  <ListItem \n                    button\n                    onClick={() => {\n                      props.changeCurrentPart(p);\n                      setMenuToggle(false);\n                    }}\n                    key={p}\n                  >\n                    <ListItemText primary={p}/>\n                    <ListItemIcon>\n                      {\n                        p === props.currentPart\n                        &&\n                        <CheckIcon />\n                      }\n                    </ListItemIcon>\n                  </ListItem>\n                )\n              })\n            }\n          </List>\n          <Divider />\n          <List component=\"nav\" aria-label=\"thirdry speechSpeed\">\n            <ListItem>\n              <Slider\n                min={0.1}\n                max={1}\n                step={0.1}\n                value={props.speechSpeedRate}\n                aria-labelledby=\"speech-speed-rate\"\n                valueLabelDisplay=\"auto\"\n                onChange={(e, v) => {\n                  let rate:number = props.speechSpeedRate;\n                  if (typeof(v) ===  'number') {\n                    rate = v;\n                  }\n                  props.changeSpeechSpeedRate(rate);\n                }}\n              />\n            </ListItem>\n          </List>\n        </div>\n      </Drawer>\n      <MenuIcon />\n    </>\n  );\n}\n\nexport default SideMenu;","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport EnglishData from '../context/EnglishData';\nimport Word from '../components/WordPage/Word';\nimport Plural from '../components/WordPage/Plural'\nimport Sentence from '../components/WordPage/Sentence';\nimport Paginate from '../components/Pagination';\nimport Part from '../components/Part';\nimport Favorite from '../components/Common/Favorite';\nimport SideMenu from '../components/SideMenu';\nimport { useSwipeable } from \"react-swipeable\";\nimport { getPlural, getSingular } from 'plury';\n\nconst WordPage: React.FC<{}> = () => {\n  const firstPart = localStorage.getItem('wordCurrentPart') ?? EnglishData.getFirstPart();\n  const wIndex: number = localStorage.getItem('wordWordIndex') ? Number(localStorage.getItem('wordWordIndex')) : 0;\n  const [slides, setSlides] = useState(EnglishData.getWordData().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(wIndex);\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [visibleWord, setVisibleWord] = useState<string>('word-hidden');\n  const [visiblePlural, setVisiblePlural] = useState<string>('word-hidden');\n  const [visibleSentence, setVisibleSentence] = useState<string>('word-hidden');\n  const [isInputWordCompleted, setIsInputWordCompleted] = useState<boolean>(false);\n  const [isInputPluralCompleted, setIsInputPluralCompleted] = useState<boolean>(false);\n  const [inputWordString, setInputWordString] = useState<string>('');\n  const [inputPluralString, setInputPluralString] = useState<string>('');\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const newIndex = wordIndex-1\n      setWordIndex(newIndex);\n      localStorage.setItem('wordWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisiblePlural('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n      setInputPluralString('');\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const newIndex = wordIndex+1;\n      setWordIndex(newIndex);\n      localStorage.setItem('wordWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisiblePlural('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n      setInputPluralString('');\n    }\n  }\n\n  const changeInputWordCompleted = (val: boolean) => {\n    setIsInputWordCompleted(val);\n  }\n\n  const changeInputPluralCompleted = (val:boolean) => {\n    setIsInputPluralCompleted(val);\n  }\n\n  const changeInputWord = (val: string) => {\n    setInputWordString(val);\n  }\n\n  const changeInputPlural = (val: string) => {\n    setInputPluralString(val);\n  }\n\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      const s = EnglishData.getWordData().filter(w => w.part === val);\n        setSlides(s)\n        setCurrentPart(val);\n        localStorage.setItem('wordCurrentPart', val);\n        setWordIndex(0);\n        localStorage.setItem('wordWordIndex', '0');\n        setVisibleWord('word-hidden');\n        setVisibleSentence('word-hidden');\n        setIsInputWordCompleted(false);\n        setInputWordString('');\n        setInputPluralString('');\n      }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  return (\n    <>\n      <SideMenu\n        parts={EnglishData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container maxWidth=\"sm\">\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        <div {...swipeHandles}>\n          <Word\n            word={slides[wordIndex].word}\n            partOfSpeech={slides[wordIndex].partOfSpeech}\n            trans={slides[wordIndex].trans}\n            visibleWord = {visibleWord}\n            isInputWordCompleted={isInputWordCompleted}\n            inputWordString={inputWordString}\n            onClick={() => setVisibleWord('word-visible')}\n            changeInputWordCompleted={(val) => changeInputWordCompleted(val)}\n            changeInputWord={(val) => changeInputWord(val)}\n          />\n          {\n            slides[wordIndex].plural\n            &&\n            <Plural\n              plural={slides[wordIndex].plural}\n              partOfSpeech={slides[wordIndex].partOfSpeech}\n              trans={slides[wordIndex].trans}\n              visiblePlural = {visiblePlural}\n              isInputPluralCompleted={isInputPluralCompleted}\n              inputPluralString={inputPluralString}\n              onClick={() => setVisiblePlural('word-visible')}\n              changeInputPluralCompleted={(val) => changeInputPluralCompleted(val)}\n              changeInputPlural={(val) => changeInputPlural(val)}\n            />\n          }\n        </div>\n        <hr/>\n        <Sentence\n          sentence={slides[wordIndex].sentence}\n          trans={slides[wordIndex].sentenceTrans}\n          visibleSentence={visibleSentence}\n          speechSpeedRate={speechSpeedRate}\n          onClick = {() => setVisibleSentence('word-visible')}\n        />\n        <hr/>\n        <Favorite \n          category='Word'\n          part={currentPart}\n          id={slides[wordIndex].id}\n        />\n        <hr/>\n        <Part\n          currentPart={currentPart}\n        />\n      </Container>\n    </>\n  )\n} \n\nexport default WordPage;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface WordProps {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    visibleWord: string;\n    isInputWordCompleted: boolean;\n    inputWordString:string;\n    onClick: () => void;\n    changeInputWordCompleted: (val:boolean) => void;\n    changeInputWord: (val:string) => void;    \n}\n\nclass Word extends React.Component<WordProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    \n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <Grid container>\n            <Grid item xs={10}>\n              <Typography variant='subtitle1'>\n                {this.props.word}\n              </Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <Avatar\n                variant='circular'\n                component='span'\n              >\n                {partOfSpeech.substr(0,1)}\n              </Avatar>\n            </Grid>\n          </Grid>\n          <Typography variant='h5' className={this.props.visibleWord}>\n            {this.props.trans}\n          </Typography>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => this.props.onClick()}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.word, 'en-US', 1);\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Word;","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport EnglishData from '../context/EnglishData';\nimport Word from '../components/WordTransPage/Word';\nimport Paginate from '../components/Pagination';\nimport Part from '../components/Part';\nimport SideMenu from '../components/SideMenu';\nimport { useSwipeable } from \"react-swipeable\";\n\nconst WordTransPage: React.FC<{}> = () => {\n  const firstPart = localStorage.getItem('wordTransCurrentPart') ?? EnglishData.getFirstPart();\n  const [slides, setSlides] = useState(EnglishData.getWordData().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(0);\n  const [visibleWord, setVisibleWord] = useState<string>('word-hidden');\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [visibleSentence, setVisibleSentence] = useState<string>('word-hidden');\n  const [isInputWordCompleted, setIsInputWordCompleted] = useState<boolean>(false);\n  const [inputWordString, setInputWordString] = useState<string>('');\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const newIndex = wordIndex-1\n      setWordIndex(newIndex);\n      localStorage.setItem('wordTransWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const newIndex = wordIndex+1;\n      setWordIndex(newIndex);\n      localStorage.setItem('wordTransWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n    }\n  }\n\n  const changeInputWordCompleted = (val: boolean) => {\n    setIsInputWordCompleted(val);\n  }\n\n  const changeInputWord = (val: string) => {\n    setInputWordString(val);\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      const s = EnglishData.getWordData().filter(w => w.part === val);\n        setSlides(s)\n        setCurrentPart(val);\n        localStorage.setItem('wordTransCurrentPart', val);\n        setWordIndex(0);\n        localStorage.setItem('wordTransWordIndex', '0');\n        setVisibleWord('word-hidden');\n        setVisibleSentence('word-hidden');\n        setIsInputWordCompleted(false);\n        setInputWordString('');\n      }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  return (\n    <>\n      <SideMenu\n        parts={EnglishData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container maxWidth=\"sm\">\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        <div {...swipeHandles}>\n          <Word\n            word={slides[wordIndex].word}\n            partOfSpeech={slides[wordIndex].partOfSpeech}\n            trans={slides[wordIndex].trans}\n            visibleWord = {visibleWord}\n            isInputWordCompleted={isInputWordCompleted}\n            inputWordString={inputWordString}\n            onClick={() => setVisibleWord('word-visible')}\n            changeInputWordCompleted={(val) => changeInputWordCompleted(val)}\n            changeInputWord={(val) => changeInputWord(val)}\n          />\n        </div>\n        <hr/>\n        <Part\n          currentPart={currentPart}\n        />\n      </Container>\n    </>\n  )\n} \n\nexport default WordTransPage;","import React from 'react';\nimport { Container, Button, Grid, Typography } from '@material-ui/core';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport EnglishVoice from '../../lib/EnglishVoice';\n\ninterface GrammerProps {\n  answer: string[];\n  stockWords: string[];\n  ansWords: string[];\n  sentence: string;\n  translate: string;\n  isAnsComplated: boolean;\n  speechSpeedRate: number;\n  moveAnsWords: (w:string, i:number) => void;\n  moveStockWords: (w:string, i:number) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const stockWords = props.stockWords;\n  const ansWords = props.ansWords;\n  const lastChar:string = props.sentence.substr(-1);\n\n  const buttonStyle: React.CSSProperties = {\n    display: 'inline-block',\n    minWidth: '20px',\n    height: '40px',\n    textTransform: 'lowercase',\n    margin: '5px',\n  }\n\n  const wordsStyle: React.CSSProperties = {\n    minHeight: '30vh',\n  }\n\n  const style: React.CSSProperties = {\n    display: 'inline-block',\n    width: '100%',\n    height: '20%',\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            ansWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color={props.isAnsComplated ? 'default' : 'secondary'}\n                  variant={props.isAnsComplated ? 'outlined' : 'contained'}\n                  size=\"small\"\n                  onClick={() => props.moveStockWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n          <Button\n            style={buttonStyle}\n            color=\"default\"\n            variant=\"text\"\n            size=\"small\"\n            key=\"lastChar\"\n          >\n            {lastChar}\n          </Button>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            stockWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color=\"primary\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  onClick={() => props.moveAnsWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n        </Grid>\n      </Container>\n      <hr />\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          <Button\n            style={style}\n            variant=\"outlined\"\n            onClick={() => {\n              EnglishVoice.speech(props.sentence, 'en-US', props.speechSpeedRate);\n            }}\n          >\n            <VolumeUpIcon\n              fontSize='small'\n            />\n          </Button>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/WordGrammerPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport EnglishData from '../context/EnglishData';\nimport EnglishVoice from '../lib/EnglishVoice';\nimport { useSwipeable } from 'react-swipeable';\n\nconst GrammerPage:React.FC = () => {\n  const firstPart = localStorage.getItem('grammerCurrentPart') ?? EnglishData.getFirstPart();\n  const [slides, setSlides] = useState(EnglishData.getSentences().filter(w => w.part === EnglishData.getFirstPart()));\n  const [wordIndex, setWordIndex] = useState<number>(0);\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [answer, setAnswer] = useState<string[]>(slides[wordIndex].sentence.toLocaleLowerCase().slice(0, -1).split(' '));\n  const [isAnsComplated, setIsAnsComplated] = useState<boolean>(false);\n  const [stockWords, setStockWords] = useState<string[]>(\n    answer\n      .map(function (a) { return { weight: Math.random(), value: a } })\n      .sort(function (a, b) { return a.weight - b.weight })\n      .map(function (a) { return a.value })\n  );\n  const [ansWords, setAnsWords] = useState<string[]>([]);\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const i:number = wordIndex - 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n      setWordIndex(i);\n      setAnswer(s);\n      setStockWords(shuffle(s));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n\n      setWordIndex(i);\n      setAnswer(s);\n      setStockWords(shuffle(s));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      const s = EnglishData.getSentences().filter(w => w.part === val);\n      setSlides(s)\n      setCurrentPart(val);\n      setWordIndex(0);\n      localStorage.setItem('grammerCurrentPart', val);\n      localStorage.setItem('grammerWordIndex', '0');\n\n      const a:string[] = separateSentence(s[0].sentence);\n      setAnswer(a);\n      setStockWords(shuffle(a));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const moveAnsWords = (word: string, index: number) => {\n    const aw = ansWords;\n    const sw = stockWords.filter((v, i) => {\n      return i !== index;\n    });\n    aw.push(word);\n\n    setAnsWords(aw);\n    setStockWords(sw);\n\n    EnglishVoice.speech(word, 'en-US', 1);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const moveStockWords = (word: string, index: number) => {\n    const sw = stockWords;\n    const aw = ansWords.filter((v, i) => {\n      return i !== index;\n    });\n    sw.push(word);\n\n    setStockWords(sw);\n    setAnsWords(aw);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const separateSentence = (s:string) => {\n    return s.toLocaleLowerCase().slice(0, -1).split(' ');\n  }\n\n  const shuffle = (w:string[]) => {\n    return w.map(function (a) { return { weight: Math.random(), value: a } })\n    .sort(function (a, b) { return a.weight - b.weight })\n    .map(function (a) { return a.value })\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  return (\n    <>\n      <SideMenu\n        parts={EnglishData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container>\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        <div {...swipeHandles}>\n          <Grammer\n            answer={answer}\n            stockWords={stockWords}\n            ansWords={ansWords}\n            sentence={slides[wordIndex].sentence}\n            translate={slides[wordIndex].sentenceTrans}\n            isAnsComplated={isAnsComplated}\n            speechSpeedRate={speechSpeedRate}\n            moveAnsWords={(w, i) => moveAnsWords(w, i)}\n            moveStockWords={(w, i) => moveStockWords(w, i)}\n          />\n        </div>\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerPage;","import React from 'react';\nimport { Container, Button, Grid, Typography } from '@material-ui/core';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport EnglishVoice from '../../lib/EnglishVoice';\n\ninterface GrammerProps {\n  answer: string[];\n  stockWords: string[];\n  ansWords: string[];\n  sentence: string;\n  translate: string;\n  isAnsComplated: boolean;\n  moveAnsWords: (w:string, i:number) => void;\n  moveStockWords: (w:string, i:number) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const stockWords = props.stockWords;\n  const ansWords = props.ansWords;\n  const lastChar:string = props.sentence.substr(-1);\n\n  const buttonStyle: React.CSSProperties = {\n    display: 'inline-block',\n    minWidth: '20px',\n    height: '40px',\n    textTransform: 'lowercase',\n    margin: '5px',\n  }\n\n  const wordsStyle: React.CSSProperties = {\n    height: '30vh',\n  }\n\n  const style: React.CSSProperties = {\n    display: 'inline-block',\n    width: '100%',\n    height: '20%',\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            ansWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color={props.isAnsComplated ? 'default' : 'secondary'}\n                  variant={props.isAnsComplated ? 'outlined' : 'contained'}\n                  size=\"small\"\n                  onClick={() => props.moveStockWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n          <Button\n            style={buttonStyle}\n            color=\"default\"\n            variant=\"text\"\n            size=\"small\"\n            key=\"lastChar\"\n          >\n            {lastChar}\n          </Button>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            stockWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color=\"primary\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  onClick={() => props.moveAnsWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n        </Grid>\n      </Container>\n      <hr />\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          <Button\n            style={style}\n            variant=\"outlined\"\n            onClick={() => {\n              EnglishVoice.speech(props.sentence, 'en-US', 1);\n            }}\n          >\n            <VolumeUpIcon\n              fontSize='small'\n            />\n          </Button>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","import axios from \"axios\";\n\ntype sentenceType = {\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n  dummyWord: string,\n}\n\ntype grammerType = {\n  id: string,\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n  dummyWord: string,\n}\n\nexport default class GrammerData {\n  static setGrammerData() {\n    const sheetId = '10QM4n6jg93YevAhr-yS8SFp8VjaK_lv09VF_HfFxTYk';\n    const sheetName = 'csv_new_horizon_j1';\n    const apiKey = 'AIzaSyD61LRLY0MGuJyIU9EQCb4KUDiFJRmxO1o';\n    const sentences:grammerType[] = [];\n    return axios\n    .get('https://sheets.googleapis.com/v4/spreadsheets/'+sheetId+'/values/'+sheetName+'?key='+apiKey)\n    .then(response => {\n      if (!Array.isArray(response.data.values)) {\n        return sentences;\n      }\n      const responseWords = response.data.values;\n      responseWords.shift();\n      responseWords.forEach((w: any) => {\n        sentences.push({\n          id: w[0],\n          part: w[1],\n          sentence: w[2],\n          sentenceTrans: w[3],\n          dummyWord: w[4],\n        })\n      })\n      sessionStorage.setItem('SENTENCES', JSON.stringify(sentences));\n    })\n    .catch(() => sentences);\n  }\n\n  static getGrammerData() {\n    const storageSentences = sessionStorage.getItem('SENTENCES');\n    const sentences:grammerType[] = [];\n    if (storageSentences != null && storageSentences.length > 0) {\n      JSON.parse(storageSentences).forEach((s:any) => {\n        sentences.push({\n          id: s['id'],\n          part: s['part'],\n          sentence: s['sentence'],\n          sentenceTrans: s['sentenceTrans'],\n          dummyWord: s['dummyWord'],\n        })\n      });\n    }\n    return sentences;\n  }\n\n  static getFirstPart() {\n    return this.getGrammerData().reduce((val:string[], cur) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, [])[0];  \n  }\n\n  static getParts() {\n    return this.getGrammerData().reduce((val:string[], cur) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, []);  \n  }\n\n  static getSentences() {\n    return this.getGrammerData().reduce((val:sentenceType[], cur) => {\n      const w:sentenceType = {\n        part: cur.part,\n        sentence: cur.sentence, \n        sentenceTrans: cur.sentenceTrans,\n        dummyWord: cur.dummyWord,\n      };\n\n      if (!val.some(v => \n        v.part === w.part && v.sentence === w.sentence)) {\n        val.push(w);\n      }\n      return val;\n    }, []);  \n  }\n}\n","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/GrammerPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport GrammerData from '../context/GrammerData';\nimport EnglishVoice from '../lib/EnglishVoice';\nimport { useSwipeable } from 'react-swipeable';\n\n\nconst GrammerPage:React.FC = () => {\n  const firstPart = localStorage.getItem('grammerCurrentPart') ?? GrammerData.getFirstPart();\n  const wIndex: number = localStorage.getItem('grammerWordIndex') ? Number(localStorage.getItem('grammerWordIndex')) : 0;\n  const [slides, setSlides] = useState(GrammerData.getSentences().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(wIndex);\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [answer, setAnswer] = useState<string[]>(slides[wordIndex].sentence.toLocaleLowerCase().slice(0, -1).split('  '));\n  const [isAnsComplated, setIsAnsComplated] = useState<boolean>(false);\n  const answerAddDummy = answer.slice();\n  answerAddDummy.push(slides[wordIndex].dummyWord.toLocaleLowerCase());\n  const [stockWords, setStockWords] = useState<string[]>(\n    answerAddDummy\n      .map(function (a) { return { weight: Math.random(), value: a } })\n      .sort(function (a, b) { return a.weight - b.weight })\n      .map(function (a) { return a.value })\n  );\n  const [ansWords, setAnsWords] = useState<string[]>([]);\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const i:number = wordIndex - 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n      setWordIndex(i);\n      localStorage.setItem('grammerWordIndex', i.toString());\n      setAnswer(s);\n      const w:string[] = s.slice();\n      w.push(slides[i].dummyWord.toLocaleLowerCase());\n      setStockWords(shuffle(w));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n      setWordIndex(i);\n      localStorage.setItem('grammerWordIndex', i.toString());\n      setAnswer(s);\n      const w:string[] = s.slice();\n      w.push(slides[i].dummyWord.toLocaleLowerCase());\n      setStockWords(shuffle(w));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      const s = GrammerData.getSentences().filter(w => w.part === val);\n      setSlides(s)\n      setCurrentPart(val);\n      localStorage.setItem('grammerCurrentPart', val);\n      setWordIndex(0);\n      localStorage.setItem('grammerWordIndex', '0');\n\n      const a:string[] = separateSentence(s[0].sentence);\n      setAnswer(a);\n      const w:string[] = a.slice();\n      w.push(s[0].dummyWord.toLocaleLowerCase());\n      setStockWords(shuffle(w));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const moveAnsWords = (word: string, index: number) => {\n    const aw = ansWords;\n    const sw = stockWords.filter((v, i) => {\n      return i !== index;\n    });\n    aw.push(word);\n\n    setAnsWords(aw);\n    setStockWords(sw);\n\n    EnglishVoice.speech(word, 'en-US', 1);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const moveStockWords = (word: string, index: number) => {\n    const sw = stockWords;\n    const aw = ansWords.filter((v, i) => {\n      return i !== index;\n    });\n    sw.push(word);\n\n    setStockWords(sw);\n    setAnsWords(aw);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const separateSentence = (s:string) => {\n    return s.toLocaleLowerCase().slice(0, -1).split('  ');\n  }\n\n  const shuffle = (w:string[]) => {\n    return w.map(function (a) { return { weight: Math.random(), value: a } })\n    .sort(function (a, b) { return a.weight - b.weight })\n    .map(function (a) { return a.value })\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  return (\n    <>\n      <SideMenu\n        parts={GrammerData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container>\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        <div {...swipeHandles}>\n          <Grammer\n            answer={answer}\n            stockWords={stockWords}\n            ansWords={ansWords}\n            sentence={slides[wordIndex].sentence}\n            translate={slides[wordIndex].sentenceTrans}\n            isAnsComplated={isAnsComplated}\n            moveAnsWords={(w, i) => moveAnsWords(w, i)}\n            moveStockWords={(w, i) => moveStockWords(w, i)}\n          />\n        </div>\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerPage;","import React from 'react';\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport * as colors from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport 'fontsource-roboto';\nimport GlobalMenu from './components/GlobalMenu';\nimport WordPage from './pages/WordPage';\nimport WordTransPage from './pages/WordTransPage';\nimport WordGrammerPage from './pages/WordGrammerPage';\nimport GrammerPage from './pages/GrammerPage';\nimport EnglishData from './context/EnglishData';\nimport GrammerData from './context/GrammerData';\n\ninterface AppProps {\n}\n\ninterface AppState {\n  currentPage: pageNames\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    const sPage:readonly string[] = ['WordPage'];\n    const cPage:pageNames = 'WordPage';\n    this.state = {\n      currentPage: cPage\n    }\n    EnglishData.setWordData();\n    GrammerData.setGrammerData();\n  }\n\n  render () {\n    const theme = createMuiTheme({\n      palette: {\n        primary: {\n          main: colors.blue[800],\n        },\n        type: 'dark',\n      },\n    });\n\n    const changePage = async (val: pageNames) => {\n      this.setState({\n        currentPage: val\n      })\n      if (val === 'WordPage') {\n        await EnglishData.setWordData();\n      } else if (val === 'WordTransPage') {\n        await GrammerData.setGrammerData();\n      }\n    }\n\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        {\n          this.state.currentPage === 'WordPage'\n          &&\n          <WordPage />\n        }\n        {\n          this.state.currentPage === 'WordTransPage'\n          &&\n          <WordTransPage />\n        }\n        {\n          this.state.currentPage === 'WordGrammerPage'\n          &&\n          <WordGrammerPage />\n        }\n        {\n          this.state.currentPage === 'GrammerPage'\n          &&\n          <GrammerPage />\n        }\n        <GlobalMenu\n            currentPage={this.state.currentPage}\n            changeCurrentPage= {(val) => changePage(val)}\n        />\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}