{"version":3,"sources":["WordComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WordComponent","className","Container","maxWidth","onClick","props","this","word","visibleTrans","trans","Button","style","display","width","height","utter","SpeechSynthesisUtterance","text","lang","window","speechSynthesis","speak","React","App","axios","get","params","crossDomain","then","results","console","log","data","catch","error","status","state","slides","wordIndex","visibleSentenceTrans","slidePrev","undefined","setState","slideNext","length","onSwipedLeft","onSwipedRight","sentence","sentenceTrans","Grid","container","justify","variant","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23030187.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Container, Button } from '@material-ui/core';\nimport 'fontsource-roboto';\n\ninterface WordComponentProps {\n    word: string;\n    trans: string;\n    visibleTrans: string;\n    onClick: () => void;\n}\n\nclass WordComponent extends React.Component<WordComponentProps, {}>{\n\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <div onClick={() => this.props.onClick()}>\n            <p className=\"word\">{this.props.word}</p>\n          </div>\n          <div\n            className={this.props.visibleTrans}\n          >\n            {this.props.trans}\n          </div>\n          <Button\n            style={style}\n            onClick={ () => {\n              const utter = new SpeechSynthesisUtterance();\n              utter.text = this.props.word;\n              utter.lang = \"en-US\";\n              window.speechSynthesis.speak(utter);\n            }}\n          >\n            play\n          </Button>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default WordComponent;","import * as React from 'react';\nimport {Swipe} from \"react-swipe-component\"\nimport { Container, Grid, Button } from '@material-ui/core';\nimport 'fontsource-roboto';\nimport WordComponent from './WordComponent';\nimport axios from 'axios';\n\ninterface AppProps {\n}\n\ninterface AppState {\n  slides?: {\n    word: string;\n    trans: string;\n    sentence: string;\n    sentenceTrans: string;\n  }[];\n  wordIndex?: number;\n  visibleTrans?: string;\n  visibleSentenceTrans?: string;\n}\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    const url = 'https://script.google.com/macros/s/AKfycbxPPDEVjPn7cZST-UF2INAmSAHNzGO-W6vK5xXPMoj3NDyazVhQR9jsZw/exec';\n    const params = {\n      crossDomain: true\n    }\n    axios // axiosモジュールを使う\n    \n        .get(url, { params }) // getメソッドを呼び出す\n        .then((results) => { // レスポンスが来たらthenを実行\n            console.log(results.data); // コンソールログにresultsに含まれるdataを表示\n        })\n        .catch((error) => { // 通信エラーが発生したら\n            console.log('通信失敗'); // ログに失敗と表示\n            console.log(error.status); // エラーコードを表示\n        });\n    \n\n    this.state = {\n      slides: [\n        {'word':'I', 'trans':'私は', 'sentence': \"I have a pen.\", 'sentenceTrans': '私はペンを持っています。'},\n        {'word':'my', 'trans':'私の', 'sentence': \"You are my friend.\", 'sentenceTrans': '貴方は私の友達です。'}, \n        {'word':'me', 'trans':'私を', 'sentence': \"Ken doesn't know me.\", 'sentenceTrans': 'ケンは私を知りません。'},\n      ],\n      wordIndex: 1,\n      visibleTrans: 'translate-hidden',\n      visibleSentenceTrans: 'translate-hidden'\n    }\n  }\n\n  render () {\n    const slidePrev = () => {\n      if (this.state.wordIndex === undefined) return;\n      if (this.state.wordIndex > 0) {\n        this.setState({\n          wordIndex: this.state.wordIndex - 1,\n          visibleTrans: 'translate-hidden',\n          visibleSentenceTrans: 'translate-hidden'\n        })\n      }\n    };\n  \n    const slideNext = () => {\n      if (this.state.wordIndex === undefined || this.state.slides === undefined) return;\n\n      if (this.state.wordIndex < this.state.slides.length-1) {\n        this.setState({\n          wordIndex: this.state.wordIndex + 1,\n          visibleTrans: 'translate-hidden',\n          visibleSentenceTrans: 'translate-hidden'\n        })\n      }\n    };\n    \n    const slides = this.state.slides ?? [] ;\n    const wordIndex = this.state.wordIndex ?? 0;\n    const visibleTrans = this.state.visibleTrans ?? 'translate-hidden';\n    const visibleSentenceTrans = this.state.visibleSentenceTrans ?? 'translate-hidden';\n    return (\n      <Container maxWidth=\"sm\">\n        <Swipe      \n          onSwipedLeft={() => {console.log(1);slideNext()}}\n          onSwipedRight={() => {console.log(2);slidePrev()}}\n        >\n            <WordComponent\n              word={slides[wordIndex].word}\n              trans={slides[wordIndex].trans}\n              visibleTrans = {visibleTrans}\n              onClick = {() => this.setState({visibleTrans:'translate-visible'})}\n            />\n            <hr/>\n            <WordComponent\n              word={slides[wordIndex].sentence}\n              trans={slides[wordIndex].sentenceTrans}\n              visibleTrans = {visibleSentenceTrans}\n              onClick = {() => this.setState({visibleSentenceTrans:'translate-visible'})}\n            />\n            <hr/>\n        </Swipe>\n        <Grid container justify=\"center\">\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {slidePrev()}}\n          >\n            Prev\n          </Button> \n          <Button \n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {slideNext()}}\n          >\n            Next\n          </Button>\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}