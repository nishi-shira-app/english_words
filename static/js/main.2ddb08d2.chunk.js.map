{"version":3,"sources":["EnglishData.ts","components/WordComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EnglishData","WORDS","WordComponent","style","display","width","height","voice","window","speechSynthesis","getVoices","filter","lang","partOfSpeech","this","props","length","className","Container","maxWidth","onClick","word","visibleTrans","trans","Grid","container","direction","spacing","justify","alignItems","item","xs","Button","variant","color","utter","SpeechSynthesisUtterance","text","speak","React","App","state","slides","wordIndex","visibleSentenceTrans","theme","createMuiTheme","palette","primary","main","colors","type","ThemeProvider","CssBaseline","setState","sentence","sentenceTrans","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ddb08d2.chunk.js","sourcesContent":["export default class EnglishData {\n  static readonly WORDS = \n  [\n    {\n      \"word\": \"I\",\n      \"partOfSpeech\": \"名詞\",\n      \"trans\": \"私は\",\n      \"sentence\": \"I have a pen.\",\n      \"sentenceTrans\": \"私はペンを持っています。\"\n    },\n    {\n      \"word\": \"my\",\n      \"partOfSpeech\": \"名詞\",\n      \"trans\": \"私の\",\n      \"sentence\": \"You are my friend.\",\n      \"sentenceTrans\": \"あなたは私の友達です。\"\n    },\n    {\n      \"word\": \"me\",\n      \"partOfSpeech\": \"名詞\",\n      \"trans\": \"私を\",\n      \"sentence\": \"Ken doesn't know me.\",\n      \"sentenceTrans\": \"ケンは私を知りません。\"\n    },\n    {\n      \"word\": \"play\",\n      \"partOfSpeech\": \"動詞\",\n      \"trans\": \"する\",\n      \"sentence\": \"I play tennis.\",\n      \"sentenceTrans\": \"私をテニスをする。\"\n    },\n    {\n      \"word\": \"so\",\n      \"partOfSpeech\": \"副詞\",\n      \"trans\": \"そのように，このように，そのとおりに，このとおりに.\",\n      \"sentence\": \"Please don't walk so fast!\",\n      \"sentenceTrans\": \"そんなに速く歩かないでください！\"\n    },\n    {\n      \"word\": \"at\",\n      \"partOfSpeech\": \"前置詞\",\n      \"trans\": \"[場所・位置を表わして]…に，…で，…において\",\n      \"sentence\": \"I got up at 5 o’clock today.\",\n      \"sentenceTrans\": \"私は今日 5時に起きました。\"\n    }\n  ]\n}","import * as React from 'react';\nimport { Container, Button, Grid } from '@material-ui/core';\nimport 'fontsource-roboto';\n\ninterface WordComponentProps {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    visibleTrans: string;\n    onClick: () => void;\n}\n\nclass WordComponent extends React.Component<WordComponentProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n\n    const synth = window.speechSynthesis;\n    const voices = synth.getVoices().filter(voice => voice.lang === 'en-US');\n    const voice = voices[0];\n    const partOfSpeech = this.props.partOfSpeech.length ? '['+this.props.partOfSpeech+']' : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <div onClick={() => this.props.onClick()}>\n            <p className=\"word\">{this.props.word}<span className=\"partOfSpeech\">{partOfSpeech}</span></p>\n          </div>\n          <div\n            className={this.props.visibleTrans}\n          >\n            {this.props.trans}\n          </div>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => this.props.onClick()}\n              >\n                和訳表示\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                color=\"secondary\"\n                onClick={() => {\n                  const utter = new SpeechSynthesisUtterance();\n                  utter.text = this.props.word;\n                  utter.lang = \"en-US\";\n                  utter.voice = voice;\n                  window.speechSynthesis.speak(utter);\n                }}\n              >\n                play\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default WordComponent;","import * as React from 'react';\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { Container, Grid, Button } from '@material-ui/core';\nimport * as colors from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport EnglishData from './EnglishData';\nimport 'fontsource-roboto';\nimport WordComponent from './components/WordComponent';\n\ninterface AppProps {\n}\n\ninterface AppState {\n  slides?: {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    sentence: string;\n    sentenceTrans: string;\n  }[];\n  wordIndex?: number;\n  visibleTrans?: string;\n  visibleSentenceTrans?: string;\n}\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    \n    this.state = {\n      slides: EnglishData.WORDS,\n      wordIndex: 1,\n      visibleTrans: 'translate-hidden',\n      visibleSentenceTrans: 'translate-hidden'\n    }\n  }\n\n  render () {\n    const theme = createMuiTheme({\n      palette: {\n        primary: {\n          main: colors.blue[800],\n        },\n        type: \"light\",\n      },\n    });\n\n    const slidePrev = () => {\n      if (this.state.wordIndex === undefined) return;\n      if (this.state.wordIndex > 0) {\n        this.setState({\n          wordIndex: this.state.wordIndex - 1,\n          visibleTrans: 'translate-hidden',\n          visibleSentenceTrans: 'translate-hidden'\n        })\n      }\n    };\n  \n    const slideNext = () => {\n      if (this.state.wordIndex === undefined || this.state.slides === undefined) return;\n\n      if (this.state.wordIndex < this.state.slides.length-1) {\n        this.setState({\n          wordIndex: this.state.wordIndex + 1,\n          visibleTrans: 'translate-hidden',\n          visibleSentenceTrans: 'translate-hidden'\n        })\n      }\n    };\n    \n    const slides = this.state.slides ?? [] ;\n    const wordIndex = this.state.wordIndex ?? 0;\n    const visibleTrans = this.state.visibleTrans ?? 'translate-hidden';\n    const visibleSentenceTrans = this.state.visibleSentenceTrans ?? 'translate-hidden';\n\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Container maxWidth=\"sm\">\n          <WordComponent\n            word={slides[wordIndex].word}\n            partOfSpeech={slides[wordIndex].partOfSpeech}\n            trans={slides[wordIndex].trans}\n            visibleTrans = {visibleTrans}\n            onClick = {() => this.setState({visibleTrans:'translate-visible'})}\n          />\n          <hr/>\n          <WordComponent\n            word={slides[wordIndex].sentence}\n            partOfSpeech=\"\"\n            trans={slides[wordIndex].sentenceTrans}\n            visibleTrans = {visibleSentenceTrans}\n            onClick = {() => this.setState({visibleSentenceTrans:'translate-visible'})}\n          />\n          <hr/>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-around\"\n            alignItems=\"flex-end\"\n          >\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {slidePrev()}}\n            >\n              Prev\n            </Button> \n            <Button \n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {slideNext()}}\n            >\n              Next\n            </Button>\n          </Grid>\n        </Container>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}