{"version":3,"sources":["components/GlobalMenu.tsx","context/EnglishData.ts","pages/MainMenuPage.tsx","lib/EnglishVoice.ts","components/WordPage/Word.tsx","components/WordPage/Plural.tsx","components/Pagination.tsx","components/Common/Favorite.tsx","components/SideMenu.tsx","pages/WordPage.tsx","components/WordTransPage/Word.tsx","pages/WordTransPage.tsx","components/WordGrammerPage/Grammer.tsx","pages/WordGrammerPage.tsx","components/GrammerPage/Grammer.tsx","context/GrammerData.ts","pages/GrammerPage.tsx","components/GrammerWritingPage/Grammer.tsx","pages/GrammerWritingPage.tsx","components/GrammerWritingTestPage/Grammer.tsx","pages/GrammerWritingTestPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalMenu","props","BottomNavigation","showLabels","style","position","bottom","width","value","currentPage","onChange","event","newValue","changeCurrentPage","localStorage","setItem","BottomNavigationAction","label","icon","EnglishData","currentYear","words","axios","get","then","response","Array","isArray","data","values","responseWords","shift","forEach","w","undefined","push","id","year","category","part","word","plural","partOfSpeech","trans","sentence","sentenceTrans","sessionStorage","JSON","stringify","catch","storageWords","getItem","length","parse","favorite","sWords","f","s","filter","this","getWordData","reduce","val","cur","includes","console","log","some","v","useStyles","makeStyles","theme","createStyles","root","margin","spacing","MainMenuPage","classes","years","getYears","className","map","Button","color","variant","onClick","EnglishVoice","text","lang","rate","voice","window","speechSynthesis","getVoices","utter","SpeechSynthesisUtterance","speak","Word","wordInputElement","React","current","focus","display","height","Container","maxWidth","backgroundColor","Grid","container","item","xs","Typography","Avatar","component","substr","visibleWord","direction","TextField","inputRef","error","isInputWordCompleted","fullWidth","inputWordString","o","changeInputWord","target","toLowerCase","changeInputWordCompleted","speech","justify","alignItems","Plural","visiblePlural","isInputPluralCompleted","inputPluralString","changeInputPlural","changeInputPluralCompleted","Pagination","size","onClickPrev","disabled","index","isViewPrev","onClickNext","maxPage","isViewNext","Favorite","useState","isFavorite","setIsFavorite","checkIsFavorite","a","setFavorite","isF","concat","useEffect","isFa","SideMenu","menuToggle","setMenuToggle","listOpen","setListOpen","categories","parts","drawerWidth","vals","c","currentPart","header","marginBottom","open","close","closeIcon","marginTop","marginLeft","hide","list","paddingLeft","changeCategoryMenu","splice","Toolbar","noWrap","flexGrow","textAlign","IconButton","aria-label","edge","Drawer","anchor","onClose","List","ListItem","button","ListItemText","primary","Collapse","in","timeout","unmountOnExit","disablePadding","p","i","changeCurrentPart","replaceAll","trim","ListItemIcon","Divider","Slider","min","max","step","speechSpeedRate","aria-labelledby","valueLabelDisplay","e","changeSpeechSpeedRate","WordPage","firstPart","getFirstPart","wIndex","Number","slides","setSlides","wordIndex","setWordIndex","setCurrentPart","setVisibleWord","setVisiblePlural","setVisibleSentence","setIsInputWordCompleted","setIsInputPluralCompleted","setInputWordString","setInputPluralString","setSpeechSpeedRate","slidePrev","newIndex","toString","slideNext","getFavoriteWordData","swipeHandles","useSwipeable","onSwipedLeft","absX","onSwipedRight","preventDefaultTouchmoveEvent","trackMouse","getParts","WordTransPage","Grammer","stockWords","ansWords","lastChar","buttonStyle","minWidth","textTransform","wordsStyle","minHeight","translate","isAnsComplated","moveStockWords","moveAnsWords","fontSize","GrammerPage","getSentences","toLocaleLowerCase","slice","split","answer","setAnswer","setIsAnsComplated","weight","Math","random","sort","b","setStockWords","setAnsWords","separateSentence","shuffle","aw","sw","every","paddingBottom","borderTop","GrammerData","sentences","dummyWord","storageSentences","sSentences","d","getGrammerData","wi","getFavoriteSentenceData","getCategories","inputElement","useRef","visibleSentence","inputString","changeInputString","changeIsAnsComplated","changeVisibleSentence","GrammerWritingPage","setInputString","setPart","result","borderBottom","GrammerWritingTestPage","arrayShuffle","timer","setTimer","isEndAnswer","setIsEndAnswer","ans","answerWk","isCorrect","setInterval","t","clearInterval","timerLimit","is","overflowY","App","sPage","state","isLoaded","setWordData","setGrammerData","setState","createMuiTheme","palette","main","colors","type","changePage","changeCureentYear","ThemeProvider","CssBaseline","verticalAlign","CircularProgress","WordGrammerPage","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kYAqCeA,EA1B8B,SAAAC,GAQ3C,OACE,eAACC,EAAA,EAAD,CACEC,YAAU,EACVC,MAT8B,CAChCC,SAAS,QACTC,OAAO,EACPC,MAAO,QAOLC,MAAOP,EAAMQ,YACbC,SAAU,SAACC,EAAOC,GAChBX,EAAMY,kBAAkBD,GACxBE,aAAaC,QAAQ,cAAeH,IANxC,UASE,cAACI,EAAA,EAAD,CAAwBC,MAAM,OAAOT,MAAM,WAAWU,KAAM,cAAC,IAAD,MAC5D,cAACF,EAAA,EAAD,CAAwBC,MAAM,UAAUT,MAAM,cAAaU,KAAM,cAAC,IAAD,MACjE,cAACF,EAAA,EAAD,CAAwBC,MAAM,eAAeT,MAAM,qBAAoBU,KAAM,cAAC,IAAD,MAC7E,cAACF,EAAA,EAAD,CAAwBC,MAAM,OAAOT,MAAM,yBAAwBU,KAAM,cAAC,IAAD,U,4CCR1DC,E,gGACnB,SAAmBC,GACjB,IAGMC,EAAmB,GACzB,OAAOC,IACNC,IAAI,qKACJC,MAAK,SAAAC,GACJ,IAAKC,MAAMC,QAAQF,EAASG,KAAKC,QAC/B,OAAOR,EAET,IAAMS,EAAgBL,EAASG,KAAKC,OACpCC,EAAcC,QACdD,EAAcE,SAAQ,SAACC,QACHC,IAAdd,GAA2BA,IAAgBa,EAAE,IAGjDZ,EAAMc,KAAK,CACTC,GAAIH,EAAE,GACNI,KAAMJ,EAAE,GACRK,SAAUL,EAAE,GACZM,KAAMN,EAAE,GACRO,KAAMP,EAAE,GACRQ,OAAQR,EAAE,GACVS,aAAcT,EAAE,GAChBU,MAAOV,EAAE,GACTW,SAAUX,EAAE,GACZY,cAAeZ,EAAE,QAGrBa,eAAe/B,QAAQ,QAASgC,KAAKC,UAAU3B,OAEhD4B,OAAM,kBAAM5B,O,yBAGf,WACE,IAAM6B,EAAeJ,eAAeK,QAAQ,SACtC9B,EAAmB,GAiBzB,OAhBoB,MAAhB6B,GAAwBA,EAAaE,OAAS,GAChDL,KAAKM,MAAMH,GAAclB,SAAQ,SAACC,GAChCZ,EAAMc,KAAK,CACTC,GAAIH,EAAC,GACLI,KAAMJ,EAAC,KACPK,SAAUL,EAAC,SACXM,KAAMN,EAAC,KACPO,KAAMP,EAAC,KACPQ,OAAQR,EAAC,OACTS,aAAcT,EAAC,aACfU,MAAOV,EAAC,MACRW,SAAUX,EAAC,SACXY,cAAeZ,EAAC,mBAIfZ,I,iCAGT,WACC,IAAD,EACMA,EAAmB,GACnBiC,EAAWP,KAAKM,MAAL,UAAWvC,aAAaqC,QAAQ,mBAAhC,QAA+C,MACxDI,EAAST,eAAeK,QAAQ,SAClCD,EAAmB,GACvB,OAAc,MAAVK,GAAkBA,EAAOH,OAAS,GACpCF,EAAeH,KAAKM,MAAME,GAIxB7B,MAAMC,QAAQ2B,IAChBA,EAAStB,SAAQ,SAAAwB,GACf,GAAsB,SAAlBA,EAAC,SAAyB,CAC5B,IAAMC,EAAQP,EAAaQ,QAAO,SAACD,GAAD,OAAWA,EAAC,KAAWD,EAAC,MACtDC,EAAEL,OAAS,GACb/B,EAAMc,KACJ,CACEC,GAAIqB,EAAE,GAAF,GACJpB,KAAMoB,EAAE,GAAF,KACNnB,SAAUmB,EAAE,GAAF,SACVlB,KAAMkB,EAAE,GAAF,KACNjB,KAAMiB,EAAE,GAAF,KACNhB,OAAQgB,EAAE,GAAF,OACRf,aAAce,EAAE,GAAF,aACdd,MAAOc,EAAE,GAAF,MACPb,SAAUa,EAAE,GAAF,SACVZ,cAAeY,EAAE,GAAF,oBAOpBpC,GAzBEA,I,0BA4BX,WACE,OAAOsC,KAAKC,cAAcC,QAAO,SAACC,EAAcC,GAI9C,OAHKD,EAAIE,SAASD,EAAIxB,OACpBuB,EAAI3B,KAAK4B,EAAIxB,MAERuB,IACN,IAAI,K,sBAGT,WACE,OAAOH,KAAKC,cAAcC,QAAO,SAACC,EAAcC,GAI9C,OAHKD,EAAIE,SAASD,EAAIxB,OACpBuB,EAAI3B,KAAK4B,EAAIxB,MAERuB,IACN,M,sBAGL,WAEE,OADAG,QAAQC,IAAIP,KAAKC,eACVD,KAAKC,cAAcC,QAAO,SAACC,EAAcC,GAI9C,OAHKD,EAAIE,SAASD,EAAI1B,OACpByB,EAAI3B,KAAK4B,EAAI1B,MAERyB,IACN,M,0BAGL,WACE,OAAOH,KAAKC,cAAcC,QAAO,SAACC,EAAoBC,GACpD,IAAM9B,EAAiB,CACrBG,GAAI2B,EAAI3B,GACRC,KAAM0B,EAAI1B,KACVC,SAAUyB,EAAIzB,SACdC,KAAMwB,EAAIxB,KACVK,SAAUmB,EAAInB,SACdC,cAAekB,EAAIlB,eAOrB,OAJKiB,EAAIK,MAAK,SAAAC,GAAC,OACbA,EAAE7B,OAASN,EAAEM,MAAQ6B,EAAExB,WAAaX,EAAEW,aACtCkB,EAAI3B,KAAKF,GAEJ6B,IACN,Q,KC1JDO,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJ,QAAS,CACPC,OAAQH,EAAMI,QAAQ,UA6BfC,EAvBM,SAAC3E,GACpB,IAAM4E,EAAUR,IAEVS,EAAQ3D,EAAY4D,WAE1B,OADAd,QAAQC,IAAIY,GAEV,qBAAKE,UAAWH,EAAQJ,KAAxB,SAEIK,EAAMG,KACJ,SAAA5C,GAAI,OACF,cAAC6C,EAAA,EAAD,CACEC,MAAM,UACNC,QAAQ,YACRC,QAAS,kBAAMpF,EAAMS,SAAS2B,IAHhC,SAKGA,U,2DCpBAiD,E,2FAbb,SAAcC,EAAaC,EAAcC,GACvC,IAEMC,EAFQC,OAAOC,gBACAC,YAAYnC,QAAO,SAAAgC,GAAK,OAAIA,EAAMF,OAASA,KAC3C,GACfM,EAAQ,IAAIC,yBAClBD,EAAMP,KAAOA,EACbO,EAAMN,KAAOA,EACbM,EAAMJ,MAAQA,EACdI,EAAML,KAAOA,EACbE,OAAOC,gBAAgBI,MAAMF,O,uCCuHlBG,E,kDA5Gb,WAAYhG,GAAmB,IAAD,8BAC5B,cAAMA,IAFAiG,sBACsB,EAE5B,EAAKA,iBAAmBC,cAFI,E,sDAK9B,WAAsB,IAAD,EACnB,UAAAxC,KAAKuC,iBAAiBE,eAAtB,SAA+BC,U,+BAGjC,WAAqB,IAAD,EAClB,UAAA1C,KAAKuC,iBAAiBE,eAAtB,SAA+BC,U,oBAGjC,WAAW,IAAD,OACFjG,EAA6B,CACjCkG,QAAS,eACT/F,MAAO,OACPgG,OAAQ,OAKJ7D,EAAeiB,KAAK1D,MAAMyC,aAAaU,OAASO,KAAK1D,MAAMyC,aAAe,GAEhF,OACE,qBAAKsC,UAAU,YAAf,SACE,eAACwB,EAAA,EAAD,CAAWC,SAAS,KAAKrG,MAAwB,iBAAjBsC,EAPU,CAC5CgE,gBAAiB,gBAM4DxE,EAA3E,UACE,eAACyE,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAY3B,QAAQ,YAApB,SACGzB,KAAK1D,MAAM0C,UAGhB,cAACgE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAACE,EAAA,EAAD,CACE5B,QAAQ,WACR6B,UAAU,OAFZ,SAIGvE,EAAawE,OAAO,EAAE,UAI7B,cAACH,EAAA,EAAD,CAAY3B,QAAQ,KAAKJ,UAAWrB,KAAK1D,MAAMkH,YAA/C,SACGxD,KAAK1D,MAAMuC,OAEd,uBACA,cAACmE,EAAA,EAAD,CAAMC,WAAS,EAACQ,UAAU,MAA1B,SACE,cAACC,EAAA,EAAD,CACEC,SAAU3D,KAAKuC,iBACfqB,OAAQ5D,KAAK1D,MAAMuH,qBACnBvG,MAAQ0C,KAAK1D,MAAMuH,qBAAuB,KAAO,aACjDC,WAAW,EACXjH,MAAOmD,KAAK1D,MAAMyH,gBAClBtC,QAAQ,WACR1E,SAAU,SAACiH,GAEP,EAAK1H,MAAM2H,gBAAgBD,EAAEE,OAAOrH,MAAMsH,eACtC,EAAK7H,MAAMuC,KAAKsF,gBAAkBH,EAAEE,OAAOrH,MAAMsH,eACnD,EAAK7H,MAAM8H,0BAAyB,GACpC,EAAK9H,MAAMoF,UACXC,EAAa0C,OAAO,OAAS,EAAK/H,MAAMuC,KAAM,QAAS,IAEvD,EAAKvC,MAAM8H,0BAAyB,QAM9C,uBACA,eAACpB,EAAA,EAAD,CACEC,WAAS,EACTQ,UAAU,MACVzC,QAAS,EACTsD,QAAQ,SACRC,WAAW,SALb,UAOE,cAACvB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAAC5B,EAAA,EAAD,CACE9E,MAAOA,EACP+E,MAAM,UACNC,QAAQ,WACRC,QAAS,WAAO,IAAD,EACb,EAAKpF,MAAMoF,UACX,YAAKa,iBAAiBE,eAAtB,SAA+BC,SANnC,SASI,cAAC,IAAD,QAGN,cAACM,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAAC5B,EAAA,EAAD,CACE9E,MAAOA,EACPgF,QAAQ,WACRC,QAAS,WAAO,IAAD,EACbC,EAAa0C,OAAO,EAAK/H,MAAMuC,KAAM,QAAS,GAC9C,YAAK0D,iBAAiBE,eAAtB,SAA+BC,SALnC,SAQE,cAAC,IAAD,oB,GApGGF,aC0EJgC,E,4JAzEb,WAAW,IAAD,OACF/H,EAA6B,CACjCkG,QAAS,eACT/F,MAAO,OACPgG,OAAQ,OAGW5C,KAAK1D,MAAMyC,aAAaU,QAASO,KAAK1D,MAAMyC,aAEjE,OACE,qBAAKsC,UAAU,YAAf,SACE,eAACwB,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAACM,EAAA,EAAD,CAAY3B,QAAQ,KAAKJ,UAAWrB,KAAK1D,MAAMmI,cAA/C,SACGzE,KAAK1D,MAAMwC,SAEd,uBACA,cAACkE,EAAA,EAAD,CAAMC,WAAS,EAACQ,UAAU,MAA1B,SACE,cAACC,EAAA,EAAD,CACEE,OAAQ5D,KAAK1D,MAAMoI,uBACnBpH,MAAQ0C,KAAK1D,MAAMoI,uBAAyB,KAAO,eACnDZ,WAAW,EACXjH,MAAOmD,KAAK1D,MAAMqI,kBAClBlD,QAAQ,WACR1E,SAAU,SAACiH,GAEP,EAAK1H,MAAMsI,kBAAkBZ,EAAEE,OAAOrH,MAAMsH,eACxC,EAAK7H,MAAMwC,OAAOqF,gBAAkBH,EAAEE,OAAOrH,MAAMsH,eACrD,EAAK7H,MAAMuI,4BAA2B,GACtC,EAAKvI,MAAMoF,UACXC,EAAa0C,OAAO,OAAS,EAAK/H,MAAMwC,OAAQ,QAAS,IAEzD,EAAKxC,MAAMuI,4BAA2B,QAMhD,uBACA,eAAC7B,EAAA,EAAD,CACEC,WAAS,EACTQ,UAAU,MACVzC,QAAS,EACTsD,QAAQ,SACRC,WAAW,SALb,UAOE,cAACvB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAAC5B,EAAA,EAAD,CACE9E,MAAOA,EACP+E,MAAM,UACNC,QAAQ,WACRC,QAAS,kBAAM,EAAKpF,MAAMoF,WAJ5B,SAMI,cAAC,IAAD,QAGN,cAACsB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAAC5B,EAAA,EAAD,CACE9E,MAAOA,EACPgF,QAAQ,WACRC,QAAS,WACPC,EAAa0C,OAAO,EAAK/H,MAAMwC,OAAQ,QAAS,IAJpD,SAOE,cAAC,IAAD,oB,GAhEK0D,a,mCC0BNsC,GA9B+B,SAACxI,GAC7C,OACE,eAAC0G,EAAA,EAAD,CACAC,WAAS,EACTQ,UAAU,MACVa,QAAQ,eACRC,WAAW,WAJX,UAME,cAAChD,EAAA,EAAD,CACEE,QAAQ,YACRD,MAAM,UACNuD,KAAK,QACLrD,QAAS,kBAAMpF,EAAM0I,eACrBC,SAA0B,IAAhB3I,EAAM4I,QAAgB5I,EAAM6I,WALxC,SAOE,cAAC,IAAD,MAEF,cAAC5D,EAAA,EAAD,CACEE,QAAQ,YACRD,MAAM,UACNuD,KAAK,QACLrD,QAAS,kBAAMpF,EAAM8I,eACrBH,SAAU3I,EAAM4I,OAAS5I,EAAM+I,QAAQ,IAAM/I,EAAMgJ,WALrD,SAOE,cAAC,KAAD,U,wCC3BO,SAASC,GAASjJ,GAC7B,MAAoCkJ,oBAAkB,GAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoBF,mBAAiBlJ,EAAMmC,IAA3C,mBAEMkH,GAFN,UAEqB,uCAAG,8BAAAC,EAAA,6DAChBjG,EAAe,GADC,SAEHP,KAAKM,MAAL,UAAWvC,aAAaqC,QAAQ,mBAAhC,QAA+C,MAF5C,UAEpBG,EAFoB,QAGhB5B,MAAMC,QAAQ2B,GAHE,yCAITA,EAASI,QAAO,SAAAF,GAAC,OAAIA,EAAC,WAAiBvD,EAAMqC,UAAYkB,EAAC,KAAWvD,EAAMmC,MAAIgB,OAAS,GAJ/E,iCAMT,GANS,2CAAH,sDAUfoG,EAAW,uCAAG,8BAAAD,EAAA,sEACKxG,KAAKM,MAAL,UAAWvC,aAAaqC,QAAQ,mBAAhC,QAA+C,MADpD,UACZG,EADY,QAEZ5B,MAAMC,QAAQ2B,GAFF,gCAGNgG,IACL9H,MAAK,SAACiI,GACCA,GACAnG,EAAWA,EAASI,QAAO,SAACF,GAAD,OAAWA,EAAC,WAAiBvD,EAAMqC,UAAYkB,EAAC,KAAWvD,EAAMmC,MAC5FiH,GAAc,KAEd/F,EAAWA,EAASoG,OAAOzJ,GAC3BoJ,GAAc,IAElBvI,aAAaC,QAAQ,WAAYgC,KAAKC,UAAUM,OAZxC,8BAeZ+F,GAAc,GACdvI,aAAaC,QAAQ,WAAYgC,KAAKC,UAAU,CAAC/C,KAhBrC,4CAAH,qDA2BjB,OAPA0J,qBAAU,WACNL,IACC9H,MAAK,SAACoI,GACHP,EAAcO,SAKlB,cAAC1E,EAAA,EAAD,CACIE,QAAQ,YACRD,MAAM,UACNuD,KAAK,QACLrD,QAASmE,EAJb,SAOIJ,EAAa,cAAC,KAAD,IAAe,cAAC,KAAD,M,+MC2LzBS,GA5N2B,SAAA5J,GACxC,MAAoCkJ,oBAAS,GAA7C,mBAAOW,EAAP,KAAmBC,EAAnB,KACA,EAAgCZ,mBAAoB,IAApD,mBAAOa,EAAP,KAAiBC,EAAjB,KAMMC,EAAmCjK,EAAMiK,WACzCC,EAAQlK,EAAMkK,MACdC,EAAc,OAEpBT,qBAAU,WACR,GAAIO,EAAY,CACd,IAAIG,EAAiB,GACrBH,EAAWlI,SAAQ,SAAAsI,GACbA,EAAEH,MAAMnG,SAAS/D,EAAMsK,aACzBF,EAAKlI,MAAK,GAEVkI,EAAKlI,MAAK,MAGd8H,EAAYI,MAEd,IAEF,IAAMhG,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXgG,OAAQ,CACNjE,OAAO,MACPG,gBAAiB,UACjB+D,aAAc,OAEhBC,KAAM,CACJnK,MAAO6J,GAETO,MAAO,CACLpK,MAAM,QAERqK,UAAW,CACTC,UAAW,OACXC,WAAY,QAEdC,KAAM,CACJzE,QAAS,QAEX0E,KAAM,CACJzK,MAAO6J,GAETF,WAAY,CACVxD,gBAAiB,QAEnByD,MAAO,CACLc,YAAa,YAKbC,EAAsB,SAACrC,GAC3B,IAAIwB,EAAiB,GACrBL,EAAShI,SAAQ,SAAAsI,GACfD,EAAKlI,MAAK,MAEE,OAAV0G,GACFwB,EAAKc,OAAOtC,EAAO,GAAG,GAExBoB,EAAYI,IAGRxF,EAAUR,IAEhB,OACE,qCACE,eAAC+G,GAAA,EAAD,CACEpG,UAAS,UAAK8E,EAAajF,EAAQ6F,KAAO7F,EAAQ8F,MAAzC,YAAkD9F,EAAQ2F,QADrE,UAGE,cAACzD,EAAA,EAAD,CACE3B,QAAQ,KACRiG,QAAM,EACNjL,MAAO,CAACkL,SAAU,EAAGC,UAAU,UAHjC,SAKGtL,EAAMsK,cAET,cAACiB,GAAA,EAAD,CACErG,MAAM,UACNH,UAAW8E,EAAajF,EAAQkG,KAAO,GACvCU,aAAW,cACXC,KAAK,MACLrG,QAAS,WAnFf0E,GAAeD,IA8EX,SAOE,cAAC,KAAD,SAGJ,cAAC6B,GAAA,EAAD,CACEC,OAAO,QACPlB,KAAMZ,EACN+B,QAAS,kBAAM9B,GAAc,IAH/B,SAKE,sBAAK/E,UAAWH,EAAQmG,KAAxB,UACE,cAAC,KAAD,CACEhG,UAAWH,EAAQ+F,UACnBvF,QAAS,kBAAM0E,GAAc,MAE/B,eAAC+B,GAAA,EAAD,CAAuB7E,UAAU,MAAMwE,aAAW,iBAAlD,UAEIvB,GAEAA,EAAWjF,KAAI,SAACqF,EAAGzB,GACjB,OACE,gCACE,eAACkD,GAAA,EAAD,CAEE/G,UAAWH,EAAQqF,WACnB8B,QAAM,EACN3G,QAAS,WACH2E,EAASnB,GACXqC,EAAmB,MAEnBA,EAAmBrC,IARzB,UAYE,cAACoD,GAAA,EAAD,CAAmCC,QAAS5B,EAAEhI,UAA3B,gBAClB0H,EAASnB,GAAS,cAAC,KAAD,IAAiB,cAAC,KAAD,MAZ/B,WAAWA,GAclB,cAACsD,GAAA,EAAD,CAAgCC,GAAIpC,EAASnB,GAAQwD,QAAQ,OAAOC,eAAa,EAAjF,SACE,cAACR,GAAA,EAAD,CAAgC7E,UAAU,MAAMsF,gBAAc,EAA9D,SAEIjC,EAAEH,MAAMlF,KAAI,SAACuH,EAAGC,GAAJ,OACV,eAACV,GAAA,EAAD,CAEEC,QAAM,EACNhH,UAAWH,EAAQsF,MACnB9E,QAAS,WACPpF,EAAMyM,kBAAkBF,GACxBzC,GAAc,GACdmB,EAAmBrC,IAPvB,UAWE,cAACoD,GAAA,EAAD,CAA4CC,QAASM,EAAEG,WAAWrC,EAAEhI,SAAU,IAAIsK,QAA/D,cAAc/D,EAAM2D,EAAEC,GACzC,cAACI,GAAA,EAAD,UAEIL,IAAMvM,EAAMsK,aAEZ,cAAC,KAAD,KAJe,cAAc1B,EAAM2D,EAAEC,KAXpC,UAAU5D,EAAM2D,EAAEC,OAJpB,cAAc5D,IADZ,UAAUA,KAhBjB,kBAAkBA,OAiD/BqB,GAAcC,GAEfA,EAAMlF,KAAI,SAAAuH,GACR,OACE,eAACT,GAAA,EAAD,CACEC,QAAM,EACN3G,QAAS,WACPpF,EAAMyM,kBAAkBF,GACxBzC,GAAc,IAJlB,UAQE,cAACkC,GAAA,EAAD,CAAcC,QAASM,IACvB,cAACK,GAAA,EAAD,UAEIL,IAAMvM,EAAMsK,aAEZ,cAAC,KAAD,QAPCiC,MAcb,cAACT,GAAA,EAAD,CACEC,QAAM,EACN3G,QAAS,WACPpF,EAAMyM,kBAAkB,YACxB3C,GAAc,IAJlB,SAQE,cAACkC,GAAA,EAAD,CAAcC,QAAQ,cAFjB,cArFE,YA0FX,cAACY,GAAA,EAAD,IACA,cAAChB,GAAA,EAAD,CAA6B7E,UAAU,MAAMwE,aAAW,sBAAxD,SACE,eAACM,GAAA,EAAD,WACE,cAACE,GAAA,EAAD,CAAcC,QAAQ,gBACtB,cAACa,GAAA,EAAD,CACEC,IAAK,GACLC,IAAK,EACLC,KAAM,GACN1M,MAAOP,EAAMkN,gBACbC,kBAAgB,oBAChBC,kBAAkB,OAClB3M,SAAU,SAAC4M,EAAGlJ,GACZ,IAAIqB,EAAcxF,EAAMkN,gBACL,kBAAR/I,IACTqB,EAAOrB,GAETnE,EAAMsN,sBAAsB9H,QAdnB,uBADN,2B,SCvBN+H,GA7LgB,WAAO,IAAD,EAC7BC,EAAS,UAAG3M,aAAaqC,QAAQ,0BAAxB,QAA8ChC,EAAYuM,eACnEC,EAAiB7M,aAAaqC,QAAQ,iBAAmByK,OAAO9M,aAAaqC,QAAQ,kBAAoB,EAC/G,EAA4BgG,mBAAShI,EAAYyC,cAAcF,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASkL,MAAtF,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAAkC3E,mBAAiBwE,GAAnD,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAsC7E,mBAAiBsE,GAAvD,mBAAOlD,EAAP,KAAoB0D,EAApB,KACA,EAAsC9E,mBAAiB,eAAvD,mBAAOhC,EAAP,KAAoB+G,EAApB,KACA,EAA0C/E,mBAAiB,eAA3D,mBAAOf,EAAP,KAAsB+F,EAAtB,KACA,EAA8ChF,mBAAiB,eAA/D,mBAAwBiF,GAAxB,WACA,EAAwDjF,oBAAkB,GAA1E,mBAAO3B,EAAP,KAA6B6G,EAA7B,KACA,EAA4DlF,oBAAkB,GAA9E,mBAAOd,EAAP,KAA+BiG,EAA/B,KACA,EAA8CnF,mBAAiB,IAA/D,mBAAOzB,EAAP,KAAwB6G,EAAxB,KACA,EAAkDpF,mBAAiB,IAAnE,mBAAOb,EAAP,KAA0BkG,EAA1B,KACA,EAA8CrF,mBAAiB,IAA/D,mBAAOgE,GAAP,KAAwBsB,GAAxB,KAEMC,GAAY,WAChB,GAAIX,EAAY,EAAG,CACjBG,EAAe,eACfC,EAAiB,eACjBC,EAAmB,eACnBC,GAAwB,GACxBE,EAAmB,IACnBC,EAAqB,IACrB,IAAMG,EAAWZ,EAAU,EAC3BC,EAAaW,GACb7N,aAAaC,QAAQ,gBAAiB4N,EAASC,cAI7CC,GAAY,WAChB,GAAId,EAAYF,EAAOzK,OAAO,EAAG,CAC/B8K,EAAe,eACfC,EAAiB,eACjBC,EAAmB,eACnBC,GAAwB,GACxBE,EAAmB,IACnBC,EAAqB,IACrB,IAAMG,EAAWZ,EAAU,EAC3BC,EAAaW,GACb7N,aAAaC,QAAQ,gBAAiB4N,EAASC,cAoB7ClC,GAAiB,uCAAG,WAAO5I,GAAP,eAAAyF,EAAA,yDACpB9F,EAAQ,GACR8G,IAAgBzG,EAFI,oBAGV,aAARA,EAHkB,gCAIV3C,EAAY2N,sBAJF,OAIpBrL,EAJoB,+CAMVtC,EAAYyC,cAAcF,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASuB,KANvC,QAMpBL,EANoB,eAQtBuK,EAAa,GACbF,EAAUrK,GACVwK,EAAenK,GACfoK,EAAe,eACfE,EAAmB,eACnBC,GAAwB,GACxBE,EAAmB,IACnBC,EAAqB,IACrB1N,aAAaC,QAAQ,kBAAmB+C,GACxChD,aAAaC,QAAQ,gBAAiB,KAjBhB,4CAAH,sDAyBjBgO,GAAeC,wBAAa,CAChCC,aAAc,SAAC3B,GACTA,EAAE4B,MAAQ,KACZL,MAGJM,cAAe,SAAC7B,GACVA,EAAE4B,MAAQ,KACZR,MAGJU,8BAA8B,EAC9BC,YAAY,IAOd,OAJA1F,qBAAU,WACR+C,GAAkBe,KACjB,IAGD,qCAEIlD,GAEA,cAAC,GAAD,CACEL,WAAY,KACZC,MAAOhJ,EAAYmO,WACnB/E,YAAaA,EACbmC,kBAAmB,SAAC5I,GAAD,OAAS4I,GAAkB5I,IAC9CqJ,gBAAiBA,GACjBI,sBAAuB,SAACzJ,GAAD,OAlCD,SAACA,GAC7B2K,GAAmB3K,GAiCmByJ,CAAsBzJ,MAG1D,eAAC0C,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAAC,GAAD,CACEoC,MAAOkF,EACP/E,QAAS6E,EAAOzK,OAChB0F,YAAY,EACZG,YAAY,EACZN,YAAa+F,GACb3F,YAAa8F,KAEf,uBAEmB,GAAjBhB,EAAOzK,QAEP,wCAGAyK,EAAOzK,OAAS,GAEhB,qCACE,gDAAS2L,IAAT,cACE,cAAC,EAAD,CACEvM,KAAMqL,EAAOE,GAAWvL,KACxBE,aAAcmL,EAAOE,GAAWrL,aAChCC,MAAOkL,EAAOE,GAAWpL,MACzBwE,YAAeA,EACfK,qBAAsBA,EACtBE,gBAAiBA,EACjBrC,QAAS,kBAAM6I,EAAe,iBAC9BnG,yBAA0B,SAACjE,GAAD,OAtGP,SAACA,GAChCuK,EAAwBvK,GAqGuBiE,CAAyBjE,IAC5D8D,gBAAiB,SAAC9D,GAAD,OA/FP,SAACA,GACvByK,EAAmBzK,GA8FmB8D,CAAgB9D,MAG1C+J,EAAOE,GAAWtL,QAElB,cAAC,EAAD,CACEA,OAAQoL,EAAOE,GAAWtL,OAC1BC,aAAcmL,EAAOE,GAAWrL,aAChCC,MAAOkL,EAAOE,GAAWpL,MACzByF,cAAiBA,EACjBC,uBAAwBA,EACxBC,kBAAmBA,EACnBjD,QAAS,kBAAM8I,EAAiB,iBAChC3F,2BAA4B,SAAC1E,GAAD,OAhHT,SAACA,GAClCwK,EAA0BxK,GA+GyB0E,CAA2B1E,IAChEyE,kBAAmB,SAACzE,GAAD,OAzGT,SAACA,GACzB0K,EAAqB1K,GAwGqByE,CAAkBzE,UAcpD,uBACA,qBAAK1D,MAAO,CAACmL,UAAU,UAAvB,SACE,cAACrC,GAAD,CACE5G,SAAS,OACTC,KAAMgI,EACNnI,GAAIyL,EAAOE,GAAW3L,iBCvGvB6D,G,4JAlEb,WAAW,IAAD,OACF7F,EAA6B,CACjCkG,QAAS,eACT/F,MAAO,OACPgG,OAAQ,OAGJ7D,EAAeiB,KAAK1D,MAAMyC,aAAaU,OAASO,KAAK1D,MAAMyC,aAAe,GAEhF,OACE,qBAAKsC,UAAU,YAAf,SACE,eAACwB,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,eAACE,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,SACE,cAACC,EAAA,EAAD,CAAY3B,QAAQ,YAApB,SACGzB,KAAK1D,MAAMuC,SAGhB,cAACmE,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAACE,EAAA,EAAD,CACE5B,QAAQ,WACR6B,UAAU,OAFZ,SAIGvE,EAAawE,OAAO,EAAE,UAI7B,cAACH,EAAA,EAAD,CAAY3B,QAAQ,KAAKJ,UAAWrB,KAAK1D,MAAMkH,YAA/C,SACGxD,KAAK1D,MAAM0C,QAEd,uBACA,eAACgE,EAAA,EAAD,CACEC,WAAS,EACTQ,UAAU,MACVzC,QAAS,EACTsD,QAAQ,SACRC,WAAW,SALb,UAOE,cAACvB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAAC5B,EAAA,EAAD,CACE9E,MAAOA,EACP+E,MAAM,UACNC,QAAQ,WACRC,QAAS,kBAAM,EAAKpF,MAAMoF,WAJ5B,SAMI,cAAC,IAAD,QAGN,cAACsB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAAC5B,EAAA,EAAD,CACE9E,MAAOA,EACPgF,QAAQ,WACRC,QAAS,WACPC,EAAa0C,OAAO,EAAK/H,MAAMuC,KAAM,QAAS,IAJlD,SAOE,cAAC,IAAD,oB,GAzDG2D,aC0GJoJ,GApHqB,WAAO,IAAD,EAClC9B,EAAS,UAAG3M,aAAaqC,QAAQ,+BAAxB,QAAmDhC,EAAYuM,eAC9E,EAA4BvE,mBAAShI,EAAYyC,cAAcF,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASkL,MAAtF,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAAkC3E,mBAAiB,GAAnD,mBAAO4E,EAAP,KAAkBC,EAAlB,KACA,EAAsC7E,mBAAiB,eAAvD,mBAAOhC,EAAP,KAAoB+G,EAApB,KACA,EAAsC/E,mBAAiBsE,GAAvD,mBAAOlD,EAAP,KAAoB0D,EAApB,KACA,EAA8C9E,mBAAiB,eAA/D,mBAAwBiF,GAAxB,WACA,EAAwDjF,oBAAkB,GAA1E,mBAAO3B,EAAP,KAA6B6G,EAA7B,KACA,EAA8ClF,mBAAiB,IAA/D,mBAAOzB,EAAP,KAAwB6G,EAAxB,KACA,EAA8CpF,mBAAiB,IAA/D,mBAAOgE,EAAP,KAAwBsB,EAAxB,KAEMC,EAAY,WAChB,GAAIX,EAAY,EAAG,CACjB,IAAMY,EAAWZ,EAAU,EAC3BC,EAAaW,GACb7N,aAAaC,QAAQ,qBAAsB4N,EAASC,YACpDV,EAAe,eACfE,EAAmB,eACnBC,GAAwB,GACxBE,EAAmB,MAIjBM,EAAY,WAChB,GAAId,EAAYF,EAAOzK,OAAO,EAAG,CAC/B,IAAMuL,EAAWZ,EAAU,EAC3BC,EAAaW,GACb7N,aAAaC,QAAQ,qBAAsB4N,EAASC,YACpDV,EAAe,eACfE,EAAmB,eACnBC,GAAwB,GACxBE,EAAmB,MA+BjBQ,EAAeC,wBAAa,CAChCC,aAAc,SAAC3B,GACTA,EAAE4B,MAAQ,KACZL,KAGJM,cAAe,SAAC7B,GACVA,EAAE4B,MAAQ,KACZR,KAGJU,8BAA8B,EAC9BC,YAAY,IAGd,OACE,qCACE,cAAC,GAAD,CACEnF,WAAY,KACZC,MAAOhJ,EAAYmO,WACnB/E,YAAaA,EACbmC,kBAAmB,SAAC5I,GAAD,OAxCC,SAACA,GACzB,GAAIyG,IAAgBzG,EAAK,CACvB,IAAML,EAAItC,EAAYyC,cAAcF,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASuB,KACzDgK,EAAUrK,GACVwK,EAAenK,GACfhD,aAAaC,QAAQ,uBAAwB+C,GAC7CkK,EAAa,GACblN,aAAaC,QAAQ,qBAAsB,KAC3CmN,EAAe,eACfE,EAAmB,eACnBC,GAAwB,GACxBE,EAAmB,KA6BS7B,CAAkB5I,IAC9CqJ,gBAAiBA,EACjBI,sBAAuB,SAACzJ,GAAD,OA3BC,SAACA,GAC7B2K,EAAmB3K,GA0BiByJ,CAAsBzJ,MAExD,eAAC0C,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAAC,GAAD,CACEoC,MAAOkF,EACP/E,QAAS6E,EAAOzK,OAChB0F,YAAY,EACZG,YAAY,EACZN,YAAa+F,EACb3F,YAAa8F,IAEf,uBACA,+CAASE,GAAT,aACE,cAAC,GAAD,CACEvM,KAAMqL,EAAOE,GAAWvL,KACxBE,aAAcmL,EAAOE,GAAWrL,aAChCC,MAAOkL,EAAOE,GAAWpL,MACzBwE,YAAeA,EACfK,qBAAsBA,EACtBE,gBAAiBA,EACjBrC,QAAS,kBAAM6I,EAAe,iBAC9BnG,yBAA0B,SAACjE,GAAD,OAvEH,SAACA,GAChCuK,EAAwBvK,GAsEmBiE,CAAyBjE,IAC5D8D,gBAAiB,SAAC9D,GAAD,OApEH,SAACA,GACvByK,EAAmBzK,GAmEe8D,CAAgB9D,SAG9C,8BCDO0L,GArGyB,SAAAvP,GACtC,IAAMwP,EAAaxP,EAAMwP,WACnBC,EAAWzP,EAAMyP,SACjBC,EAAkB1P,EAAM2C,SAASsE,QAAQ,GAEzC0I,EAAmC,CACvCtJ,QAAS,eACTuJ,SAAU,OACVtJ,OAAQ,OACRuJ,cAAe,YACfpL,OAAQ,OAGJqL,EAAkC,CACtCC,UAAW,QASb,OACE,qCACE,cAACxJ,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAACE,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACG,EAAA,EAAD,CAAY3B,QAAQ,YAApB,SACGnF,EAAMgQ,gBAIb,cAACzJ,EAAA,EAAD,CAAWC,SAAS,KAAKrG,MAAO2P,EAAhC,SACE,eAACpJ,EAAA,EAAD,CAAMC,WAAS,EAAf,UAEI8I,EAASzK,KAAI,SAAChD,EAAG4G,GACf,OACE,cAAC3D,EAAA,EAAD,CACE9E,MAAOwP,EACPzK,MAAOlF,EAAMiQ,eAAiB,UAAY,YAC1C9K,QAASnF,EAAMiQ,eAAiB,WAAa,YAC7CxH,KAAK,QACLrD,QAAS,kBAAMpF,EAAMkQ,eAAelO,EAAG4G,IALzC,SAQG5G,GAFI4G,MAOb,cAAC3D,EAAA,EAAD,CACE9E,MAAOwP,EACPzK,MAAM,UACNC,QAAQ,OACRsD,KAAK,QAJP,SAOGiH,GAFG,iBAMV,cAACnJ,EAAA,EAAD,CAAWC,SAAS,KAAKrG,MAAO2P,EAAhC,SACE,cAACpJ,EAAA,EAAD,CAAMC,WAAS,EAAf,SAEI6I,EAAWxK,KAAI,SAAChD,EAAG4G,GACjB,OACE,cAAC3D,EAAA,EAAD,CACE9E,MAAOwP,EACPzK,MAAM,UACNC,QAAQ,YACRsD,KAAK,QACLrD,QAAS,kBAAMpF,EAAMmQ,aAAanO,EAAG4G,IALvC,SAQG5G,GAFI4G,UASjB,uBACA,cAACrC,EAAA,EAAD,CAAWC,SAAS,KAAKrG,MAAO2P,EAAhC,SACE,cAACpJ,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAAC1B,EAAA,EAAD,CACE9E,MApEyB,CACjCkG,QAAS,eACT/F,MAAO,OACPgG,OAAQ,OAkEAnB,QAAQ,WACRC,QAAS,WACPC,EAAa0C,OAAO/H,EAAM2C,SAAU,QAAS3C,EAAMkN,kBAJvD,SAOE,cAAC,IAAD,CACEkD,SAAS,oBCiERC,GApKc,WAAO,IAAD,EAC3B7C,EAAS,UAAG3M,aAAaqC,QAAQ,6BAAxB,QAAiDhC,EAAYuM,eAC5E,EAA4BvE,mBAAShI,EAAYoP,eAAe7M,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASpB,EAAYuM,mBAAnG,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAkC3E,mBAAiB,GAAnD,mBAAO4E,EAAP,KAAkBC,EAAlB,KACA,EAAsC7E,mBAAiBsE,GAAvD,mBAAOlD,EAAP,KAAoB0D,EAApB,KACA,EAA4B9E,mBAAmB0E,EAAOE,GAAWnL,SAAS4N,oBAAoBC,MAAM,GAAI,GAAGC,MAAM,MAAjH,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4CzH,oBAAkB,GAA9D,mBAAO+G,EAAP,KAAuBW,EAAvB,KACA,EAAoC1H,mBAClCwH,EACG1L,KAAI,SAAUsE,GAAK,MAAO,CAAEuH,OAAQC,KAAKC,SAAUxQ,MAAO+I,MAC1D0H,MAAK,SAAU1H,EAAG2H,GAAK,OAAO3H,EAAEuH,OAASI,EAAEJ,UAC3C7L,KAAI,SAAUsE,GAAK,OAAOA,EAAE/I,UAJjC,mBAAOiP,EAAP,KAAmB0B,EAAnB,KAMA,EAAgChI,mBAAmB,IAAnD,mBAAOuG,EAAP,KAAiB0B,EAAjB,KACA,EAA8CjI,mBAAiB,IAA/D,mBAAOgE,EAAP,KAAwBsB,EAAxB,KACMC,EAAY,WAChB,GAAIX,EAAY,EAAG,CACjB,IAAMtB,EAAWsB,EAAY,EACvBtK,EAAa4N,EAAiBxD,EAAOpB,GAAG7J,UAC9CoL,EAAavB,GACbmE,EAAUnN,GACV0N,EAAcG,EAAQ7N,IACtB2N,EAAY,IACZP,GAAkB,KAIhBhC,EAAY,WAChB,GAAId,EAAYF,EAAOzK,OAAO,EAAG,CAC/B,IAAMqJ,EAAWsB,EAAY,EACvBtK,EAAa4N,EAAiBxD,EAAOpB,GAAG7J,UAE9CoL,EAAavB,GACbmE,EAAUnN,GACV0N,EAAcG,EAAQ7N,IACtB2N,EAAY,IACZP,GAAkB,KA6DhBQ,EAAmB,SAAC5N,GACxB,OAAOA,EAAE+M,oBAAoBC,MAAM,GAAI,GAAGC,MAAM,MAG5CY,EAAU,SAACrP,GACf,OAAOA,EAAEgD,KAAI,SAAUsE,GAAK,MAAO,CAAEuH,OAAQC,KAAKC,SAAUxQ,MAAO+I,MAClE0H,MAAK,SAAU1H,EAAG2H,GAAK,OAAO3H,EAAEuH,OAASI,EAAEJ,UAC3C7L,KAAI,SAAUsE,GAAK,OAAOA,EAAE/I,UAGzBuO,EAAeC,wBAAa,CAChCC,aAAc,SAAC3B,GACTA,EAAE4B,MAAQ,KACZL,KAGJM,cAAe,SAAC7B,GACVA,EAAE4B,MAAQ,KACZR,KAGJU,8BAA8B,EAC9BC,YAAY,IAGd,OACE,qCAEoB,KAAhB9E,GAEA,cAAC,GAAD,CACEL,WAAY,KACZC,MAAOhJ,EAAYmO,WACnB/E,YAAaA,EACbmC,kBAAmB,SAAC5I,GAAD,OA3FD,SAACA,GACzB,GAAIyG,IAAgBzG,EAAK,CACvB,IAAML,EAAItC,EAAYoP,eAAe7M,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASuB,KAC5DgK,EAAUrK,GACVwK,EAAenK,GACfkK,EAAa,GACblN,aAAaC,QAAQ,qBAAsB+C,GAC3ChD,aAAaC,QAAQ,mBAAoB,KAEzC,IAAMwI,EAAa8H,EAAiB5N,EAAE,GAAGb,UACzCgO,EAAUrH,GACV4H,EAAcG,EAAQ/H,IACtB6H,EAAY,IACZP,GAAkB,IA8EcnE,CAAkB5I,IAC9CqJ,gBAAiBA,EACjBI,sBAAuB,SAACzJ,GAAD,OA5ED,SAACA,GAC7B2K,EAAmB3K,GA2EmByJ,CAAsBzJ,MAG1D,eAAC0C,EAAA,EAAD,WACE,cAAC,GAAD,CACEqC,MAAOkF,EACP/E,QAAS6E,EAAOzK,OAChB0F,YAAY,EACZG,YAAY,EACZN,YAAa+F,EACb3F,YAAa8F,IAEf,uBACA,+CAASE,GAAT,aACE,cAAC,GAAD,CACE4B,OAAQA,EACRlB,WAAYA,EACZC,SAAUA,EACV9M,SAAUiL,EAAOE,GAAWnL,SAC5BqN,UAAWpC,EAAOE,GAAWlL,cAC7BqN,eAAgBA,EAChB/C,gBAAiBA,EACjBiD,aAAc,SAACnO,EAAGwK,GAAJ,OA9FH,SAACjK,EAAcqG,GAClC,IAAM0I,EAAK7B,EACL8B,EAAK/B,EAAW/L,QAAO,SAACU,EAAGqI,GAC/B,OAAOA,IAAM5D,KAEf0I,EAAGpP,KAAKK,GAER4O,EAAYG,GACZJ,EAAcK,GAEdlM,EAAa0C,OAAOxF,EAAM,QAAS,GAC/BmO,EAAOvN,SAAWmO,EAAGnO,QAAUuN,EAAOc,OAAM,SAAClI,EAAGV,GAAJ,OAAcU,IAAMgI,EAAG1I,OACrEgI,GAAkB,GAClBvL,EAAa0C,OAAO,OAAS6F,EAAOE,GAAWnL,SAAU,QAASuK,IAElE0D,GAAkB,GA+EYT,CAAanO,EAAGwK,IACxC0D,eAAgB,SAAClO,EAAGwK,GAAJ,OA5EH,SAACjK,EAAcqG,GACpC,IAAM2I,EAAK/B,EACL8B,EAAK7B,EAAShM,QAAO,SAACU,EAAGqI,GAC7B,OAAOA,IAAM5D,KAEf2I,EAAGrP,KAAKK,GAER2O,EAAcK,GACdJ,EAAYG,GACRZ,EAAOvN,SAAWmO,EAAGnO,QAAUuN,EAAOc,OAAM,SAAClI,EAAGV,GAAJ,OAAcU,IAAMgI,EAAG1I,OACrEgI,GAAkB,GAClBvL,EAAa0C,OAAO,OAAS6F,EAAOE,GAAWnL,SAAU,QAASuK,IAElE0D,GAAkB,GA+DcV,CAAelO,EAAGwK,gBCnCzC+C,GA/GyB,SAAAvP,GACtC,IAAMwP,EAAaxP,EAAMwP,WACnBC,EAAWzP,EAAMyP,SACjBC,EAAkB1P,EAAM2C,SAASsE,QAAQ,GAEzC0I,EAAmC,CACvCtJ,QAAS,eACTuJ,SAAU,OACVtJ,OAAQ,OACRuJ,cAAe,YACfpL,OAAQ,OAGJqL,EAAkC,CACtCC,UAAW,OACX0B,cAAe,QASjB,OACE,qCACE,cAAClL,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAACE,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,cAACG,EAAA,EAAD,CAAY3B,QAAQ,YAApB,SACGnF,EAAMgQ,gBAIb,cAACzJ,EAAA,EAAD,CAAWC,SAAS,KAAKrG,MAAO2P,EAAhC,SACE,eAACpJ,EAAA,EAAD,CAAMC,WAAS,EAAf,UAEI8I,EAASzK,KAAI,SAAChD,EAAG4G,GACf,OACE,cAAC3D,EAAA,EAAD,CACE9E,MAAOwP,EACPzK,MAAOlF,EAAMiQ,eAAiB,UAAY,YAC1C9K,QAASnF,EAAMiQ,eAAiB,WAAa,YAC7CxH,KAAK,QACLrD,QAAS,kBAAMpF,EAAMkQ,eAAelO,EAAG4G,IALzC,SAQG5G,GAFI4G,MAOb,cAAC3D,EAAA,EAAD,CACE9E,MAAOwP,EACPzK,MAAM,UACNC,QAAQ,OACRsD,KAAK,QAJP,SAOGiH,GAFG,iBAMV,cAACnJ,EAAA,EAAD,CAAWC,SAAS,KAAKrG,MAAO2P,EAAhC,SACE,cAACpJ,EAAA,EAAD,CAAMC,WAAS,EAACxG,MAAO,CAACuR,UAAW,sBAAnC,SAEIlC,EAAWxK,KAAI,SAAChD,EAAG4G,GACjB,OACE,cAAC3D,EAAA,EAAD,CACE9E,MAAOwP,EACPzK,MAAM,UACNC,QAAQ,YACRsD,KAAK,QACLrD,QAAS,kBAAMpF,EAAMmQ,aAAanO,EAAG4G,IALvC,SAQG5G,GAFI4G,UASjB,uBACA,cAACrC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACE,EAAA,EAAD,CACEC,WAAS,EACTQ,UAAU,MACVa,QAAQ,eACRC,WAAW,WAJb,UAME,cAAChD,EAAA,EAAD,CACEE,QAAQ,WACRC,QAAS,WACPC,EAAa0C,OAAO/H,EAAM2C,SAAU,QAAS3C,EAAMkN,kBAHvD,SAME,cAAC,IAAD,CACEkD,SAAS,YAGb,cAACnH,GAAD,CACE5G,SAAS,UACTC,KAAMtC,EAAMsK,YACZnI,GAAInC,EAAMmC,cChGDwP,G,mGACnB,SAAsBxQ,GACpB,IAGMyQ,EAA0B,GAChC,OAAOvQ,IACNC,IAAI,oKACJC,MAAK,SAAAC,GACJ,IAAKC,MAAMC,QAAQF,EAASG,KAAKC,QAC/B,OAAOgQ,EAET,IAAM/P,EAAgBL,EAASG,KAAKC,OACpCC,EAAcC,QACdD,EAAcE,SAAQ,SAACC,QACHC,IAAdd,GAA2BA,IAAgBa,EAAE,IAGjD4P,EAAU1P,KAAK,CACbC,GAAIH,EAAE,GACNI,KAAMJ,EAAE,GACRK,SAAUL,EAAE,GACZM,KAAMN,EAAE,GACRW,SAAUX,EAAE,GACZY,cAAeZ,EAAE,GACjB6P,UAAW7P,EAAE,QAGjBa,eAAe/B,QAAQ,YAAagC,KAAKC,UAAU6O,OAEpD5O,OAAM,kBAAM4O,O,4BAGf,WACE,IAAME,EAAmBjP,eAAeK,QAAQ,aAC1C0O,EAA0B,GAchC,OAbwB,MAApBE,GAA4BA,EAAiB3O,OAAS,GACxDL,KAAKM,MAAM0O,GAAkB/P,SAAQ,SAACyB,GACpCoO,EAAU1P,KAAK,CACbC,GAAIqB,EAAC,GACLpB,KAAMoB,EAAC,KACPnB,SAAUmB,EAAC,SACXlB,KAAMkB,EAAC,KACPb,SAAUa,EAAC,SACXZ,cAAeY,EAAC,cAChBqO,UAAWrO,EAAC,eAIXoO,I,qCAGT,WACC,IAAD,EACMA,EAA2B,GAC3BvO,EAAWP,KAAKM,MAAL,UAAWvC,aAAaqC,QAAQ,mBAAhC,QAA+C,MACxD6O,EAAalP,eAAeK,QAAQ,aACtC4O,EAAuB,GAC3B,OAAkB,MAAdC,GAAsBA,EAAW5O,OAAS,GAC5C2O,EAAmBhP,KAAKM,MAAM2O,GAI5BtQ,MAAMC,QAAQ2B,IAChBA,EAAStB,SAAQ,SAAAwB,GACf,GAAsB,YAAlBA,EAAC,SAA4B,CAC/B,IAAMC,EAAQsO,EAAiBrO,QAAO,SAACD,GAAD,OAAWA,EAAC,KAAWD,EAAC,MAC9D,GAAIC,EAAEL,OAAS,EAAG,CAChB,IAAM6O,EAAIxO,EAAE,GACZoO,EAAU1P,KACR,CACEC,GAAI6P,EAAC,GACL5P,KAAM4P,EAAC,KACP3P,SAAU2P,EAAC,SACX1P,KAAM0P,EAAC,KACPrP,SAAUqP,EAAC,SACXpP,cAAeoP,EAAC,cAChBH,UAAWG,EAAC,iBAOjBJ,GAvBEA,I,0BA0BX,WACE,OAAOlO,KAAKuO,iBAAiBrO,QAAO,SAACC,EAAcC,GAIjD,OAHKD,EAAIE,SAASD,EAAIxB,OACpBuB,EAAI3B,KAAK4B,EAAIxB,MAERuB,IACN,IAAI,K,sBAGT,WACE,OAAOH,KAAKuO,iBAAiBrO,QAAO,SAACC,EAAcC,GAIjD,OAHKD,EAAIE,SAASD,EAAIxB,OACpBuB,EAAI3B,KAAK4B,EAAIxB,MAERuB,IACN,M,2BAGL,WAAwB,IAAD,OAQrB,OAPmBH,KAAKuO,iBAAiBrO,QAAO,SAACC,EAAcC,GAI7D,OAHKD,EAAIE,SAASD,EAAIzB,WACpBwB,EAAI3B,KAAK4B,EAAIzB,UAERwB,IACN,IAEemB,KAAI,SAAAqF,GACpB,IAAMH,EAAQ,EAAK+H,iBAAiBrO,QAAO,SAACC,EAAcC,GAExD,IAAMxB,EAAOwB,EAAIxB,KAIjB,OAHKuB,EAAIE,SAASzB,IAAS+H,IAAMvG,EAAIzB,UACnCwB,EAAI3B,KAAKI,GAEJuB,IACN,IACH,MAAO,CACLxB,SAAUgI,EACVH,MAAOA,Q,0BAKb,WACE,OAAOxG,KAAKuO,iBAAiBrO,QAAO,SAACC,EAAoBC,GACvD,IAAM9B,EAAiB,CACrBG,GAAI2B,EAAI3B,GACRC,KAAM0B,EAAI1B,KACVC,SAAUyB,EAAIzB,SACdC,KAAMwB,EAAIxB,KACVK,SAAUmB,EAAInB,SACdC,cAAekB,EAAIlB,cACnBiP,UAAW/N,EAAI+N,WAOjB,OAJKhO,EAAIK,MAAK,SAAAC,GAAC,OACbA,EAAE7B,OAASN,EAAEM,MAAQ6B,EAAExB,WAAaX,EAAEW,aACtCkB,EAAI3B,KAAKF,GAEJ6B,IACN,Q,KCqDQwM,GAzNc,WAAO,IAAD,EAC3B7C,EAAS,UAAG3M,aAAaqC,QAAQ,6BAAxB,QAAiDyO,GAAYlE,eAQ5E,EAA4BvE,mBAASyI,GAAYrB,eAAe7M,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASkL,MAAvF,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAAkC3E,oBARnB,WACb,IAAMgJ,EAAYrR,aAAaqC,QAAQ,oBAAsByK,OAAO9M,aAAaqC,QAAQ,qBAAuB,EAChH,OAAIyO,GAAYrB,eAAe7M,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASkL,KAAWrK,OAAS+O,EACjE,EAEFA,KAGT,mBAAOpE,EAAP,KAAkBC,EAAlB,KACA,EAAsC7E,mBAAiB,IAAvD,mBAAOoB,EAAP,KAAoB0D,EAApB,KACA,EAA4B9E,mBAAmB,IAA/C,mBAAOwH,EAAP,KAAeC,EAAf,KACA,EAA4CzH,oBAAkB,GAA9D,mBAAO+G,EAAP,KAAuBW,EAAvB,KACA,EAAoC1H,mBAAmB,IAAvD,mBAAOsG,EAAP,KAAmB0B,EAAnB,KACA,EAAgChI,mBAAmB,IAAnD,mBAAOuG,EAAP,KAAiB0B,EAAjB,KACA,EAA8CjI,mBAAiB,IAA/D,mBAAOgE,EAAP,KAAwBsB,EAAxB,KAEMC,EAAY,WAChB,GAAIX,EAAY,EAAG,CACjB,IAAMtB,EAAWsB,EAAY,EACvBtK,EAAa4N,EAAiBxD,EAAOpB,GAAG7J,UAC9CoL,EAAavB,GACbmE,EAAUnN,GACV,IAAMxB,EAAawB,EAAEgN,QACrBxO,EAAEE,KAAK0L,EAAOpB,GAAGqF,UAAUtB,qBAC3BW,EAAcG,EAAQrP,IACtBmP,EAAY,IACZP,GAAkB,GAClB/P,aAAaC,QAAQ,mBAAoB0L,EAAEmC,cAIzCC,EAAY,WAChB,GAAId,EAAYF,EAAOzK,OAAO,EAAG,CAC/B,IAAMqJ,EAAWsB,EAAY,EACvBtK,EAAa4N,EAAiBxD,EAAOpB,GAAG7J,UAC9CoL,EAAavB,GACbmE,EAAUnN,GACV,IAAMxB,EAAawB,EAAEgN,QACrBxO,EAAEE,KAAK0L,EAAOpB,GAAGqF,UAAUtB,qBAC3BW,EAAcG,EAAQrP,IACtBmP,EAAY,IACZP,GAAkB,GAClB/P,aAAaC,QAAQ,mBAAoB0L,EAAEmC,cAIzClC,EAAiB,uCAAG,WAAO5I,GAAP,MAAAyF,EAAA,WAAAA,EAAA,yDACpBgB,IAAgBzG,EADI,oBAElBL,EAAQ,GACA,aAARK,EAHkB,gCAIV8N,GAAYQ,0BAJF,OAIpB3O,EAJoB,+CAMVmO,GAAYrB,eAAe7M,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASuB,KANxC,QAMpBL,EANoB,eAQtBqK,EAAUrK,GACVwK,EAAenK,GACfhD,aAAaC,QAAQ,qBAAsB+C,GAC3CkK,EAAa,GACblN,aAAaC,QAAQ,mBAAoB,KAEnCwI,EAAa9F,EAAEL,OAAS,EAAIiO,EAAiB5N,EAAE,GAAGb,UAAY,GACpEgO,EAAUrH,IACJtH,EAAasH,EAAEkH,SACnBtO,KAAKsB,EAAEL,OAAS,EAAIK,EAAE,GAAGqO,UAAUtB,oBAAqB,IAC1DW,EAAcG,EAAQrP,IACtBmP,EAAY,IACZP,GAAkB,GApBI,4CAAH,sDAiEjBQ,EAAmB,SAAC5N,GACxB,OAAOA,EAAE+M,oBAAoBC,MAAM,GAAI,GAAGC,MAAM,OAG5CY,EAAU,SAACrP,GACf,OAAOA,EAAEgD,KAAI,SAAUsE,GAAK,MAAO,CAAEuH,OAAQC,KAAKC,SAAUxQ,MAAO+I,MAClE0H,MAAK,SAAU1H,EAAG2H,GAAK,OAAO3H,EAAEuH,OAASI,EAAEJ,UAC3C7L,KAAI,SAAUsE,GAAK,OAAOA,EAAE/I,UAGzBuO,EAAeC,wBAAa,CAChCC,aAAc,SAAC3B,GACTA,EAAE4B,MAAQ,KACZL,KAGJM,cAAe,SAAC7B,GACVA,EAAE4B,MAAQ,KACZR,KAGJU,8BAA8B,EAC9BC,YAAY,IAOd,OAJA1F,qBAAU,WACR+C,EAAkBe,KACjB,IAGD,qCAEoB,KAAhBlD,GAEA,cAAC,GAAD,CACEL,WAAY0H,GAAYS,gBACxBlI,MAAOyH,GAAYtC,WACnB/E,YAAaA,EACbmC,kBAAmB,SAAC5I,GAAD,OAAS4I,EAAkB5I,IAC9CqJ,gBAAiBA,EACjBI,sBAAuB,SAACzJ,GAAD,OAjFD,SAACA,GAC7B2K,EAAmB3K,GAgFmByJ,CAAsBzJ,MAG1D,eAAC0C,EAAA,EAAD,WACE,cAAC,GAAD,CACEqC,MAAOkF,EACP/E,QAAS6E,EAAOzK,OAChB0F,YAAY,EACZG,YAAY,EACZN,YAAa+F,EACb3F,YAAa8F,IAEf,uBAEmB,GAAjBhB,EAAOzK,QAEP,wCAGAyK,EAAOzK,OAAS,GAEhB,qCACE,+CAAS2L,GAAT,aACE,cAAC,GAAD,CACE3M,GAAIyL,EAAOE,GAAW3L,GACtBmI,YAAaA,EACboG,OAAQA,EACRlB,WAAYA,EACZC,SAAUA,EACV9M,SAAUiL,EAAOE,GAAWnL,SAC5BqN,UAAWpC,EAAOE,GAAWlL,cAC7BsK,gBAAiBA,EACjB+C,eAAgBA,EAChBE,aAAc,SAACnO,EAAGwK,GAAJ,OA9GP,SAACjK,EAAcqG,GAClC,IAAM0I,EAAK7B,EACL8B,EAAK/B,EAAW/L,QAAO,SAACU,EAAGqI,GAC/B,OAAOA,IAAM5D,KAEf0I,EAAGpP,KAAKK,GAER4O,EAAYG,GACZJ,EAAcK,GAEdlM,EAAa0C,OAAOxF,EAAM,QAAS,GAC/BmO,EAAOvN,SAAWmO,EAAGnO,QAAUuN,EAAOc,OAAM,SAAClI,EAAGV,GAAJ,OAAcU,IAAMgI,EAAG1I,OACrEgI,GAAkB,GAClBvL,EAAa0C,OAAO,OAAS6F,EAAOE,GAAWnL,SAAU,QAASuK,GAClElJ,QAAQC,IAAI,OAAS2J,EAAOE,GAAWnL,WAEvCiO,GAAkB,GA8FgBT,CAAanO,EAAGwK,IACxC0D,eAAgB,SAAClO,EAAGwK,GAAJ,OA3FP,SAACjK,EAAcqG,GACpC,IAAM2I,EAAK/B,EACL8B,EAAK7B,EAAShM,QAAO,SAACU,EAAGqI,GAC7B,OAAOA,IAAM5D,KAEf2I,EAAGrP,KAAKK,GAER2O,EAAcK,GACdJ,EAAYG,GACRZ,EAAOvN,SAAWmO,EAAGnO,QAAUuN,EAAOc,OAAM,SAAClI,EAAGV,GAAJ,OAAcU,IAAMgI,EAAG1I,OACrEgI,GAAkB,GAClBvL,EAAa0C,OAAO,OAAS6F,EAAOE,GAAWnL,SAAU,QAASuK,IAElE0D,GAAkB,GA8EkBV,CAAelO,EAAGwK,SAGhD,cAACX,GAAA,EAAD,CAAM7E,UAAU,MAAMwE,aAAW,sBAAjC,SACA,eAACM,GAAA,EAAD,WACE,cAACE,GAAA,EAAD,CAAcC,QAAQ,gBACpB,cAACa,GAAA,EAAD,CACEC,IAAK,GACLC,IAAK,EACLC,KAAM,GACN1M,MAAO2M,EACPC,kBAAgB,oBAChBC,kBAAkB,OAClB3M,SAAU,SAAC4M,EAAGlJ,GACZ,IAAIqB,EAAc0H,EACC,kBAAR/I,IACTqB,EAAOrB,GAETqK,EAAmBhJ,qBCnGxB+J,GA9FyB,SAAAvP,GACtC,IAAMqS,EAAeC,iBAAoB,MAEzC,OACE,qCACE,cAAC/L,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACE,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACG,EAAA,EAAD,CAAY3B,QAAQ,YAApB,SACGnF,EAAMgQ,YAET,4BAGJ,cAACzJ,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAACE,EAAA,EAAD,CAAMC,WAAS,EAACxG,MAAO,CAACqK,aAAc,OAAtC,SACE,cAAC1D,EAAA,EAAD,CAAY3B,QAAQ,QAAQJ,UAAW/E,EAAMuS,gBAAkB,eAAiB,cAAhF,SACGvS,EAAM2C,eAIb,eAAC4D,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAACE,EAAA,EAAD,CACEC,WAAS,EACTQ,UAAU,MACVa,QAAQ,eACRC,WAAW,WAJb,SAME,cAACvB,EAAA,EAAD,CAAMC,WAAS,EAACQ,UAAU,MAA1B,SACE,cAACC,EAAA,EAAD,CACEC,SAAUgL,EACV/K,OAAQtH,EAAMiQ,eACdjP,MAAQhB,EAAMiQ,eAAiB,KAAO,aACtCzI,WAAW,EACXjH,MAAOP,EAAMwS,YACbrN,QAAQ,WACR1E,SAAU,SAACiH,GAEP1H,EAAMyS,kBAAkB/K,EAAEE,OAAOrH,OACjCP,EAAM0S,qBAAqB1S,EAAM2C,WAAa+E,EAAEE,OAAOrH,OACnDP,EAAM2C,WAAa+E,EAAEE,OAAOrH,QAC9BP,EAAM2S,uBAAsB,GAC5BtN,EAAa0C,OAAO,OAAS/H,EAAM2C,SAAU,QAAS3C,EAAMkN,yBAOxE,uBACA,eAACxG,EAAA,EAAD,CACEC,WAAS,EACTQ,UAAU,MACVzC,QAAS,EACTsD,QAAQ,SACRC,WAAW,SALb,UAOE,cAACvB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAAC5B,EAAA,EAAD,CACEE,QAAQ,WACRC,QAAS,WACPC,EAAa0C,OAAO/H,EAAM2C,SAAU,QAAS3C,EAAMkN,iBACnDmF,EAAalM,QAAQC,SAJzB,SAOE,cAAC,IAAD,CACEgK,SAAS,cAIf,cAAC1J,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAAC5B,EAAA,EAAD,CACEC,MAAM,UACNC,QAAQ,WACRC,QAAS,WACPpF,EAAM2S,uBAAuB3S,EAAMuS,iBACnCF,EAAalM,QAAQC,SALzB,SAQE,cAAC,IAAD,QAGJ,cAACM,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAACoC,GAAD,CACE5G,SAAS,iBACTC,KAAMtC,EAAMsK,YACZnI,GAAInC,EAAMmC,iBCoETyQ,GAtKqB,WAAO,IAAD,EAClCpF,EAAS,UAAG3M,aAAaqC,QAAQ,oCAAxB,QAAwDyO,GAAYlE,eAC7EC,EAAiB7M,aAAaqC,QAAQ,2BAA6ByK,OAAO9M,aAAaqC,QAAQ,4BAA8B,EACnI,EAA4BgG,mBAASyI,GAAYrB,eAAe7M,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASkL,MAAvF,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAAkC3E,mBAAiBwE,GAAnD,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAsC7E,mBAAiB,IAAvD,mBAAOoB,EAAP,KAAoB0D,EAApB,KACA,EAA4C9E,oBAAkB,GAA9D,mBAAO+G,EAAP,KAAuBW,EAAvB,KACA,EAAsC1H,mBAAiB,IAAvD,mBAAOsJ,EAAP,KAAoBK,EAApB,KACA,EAA8C3J,oBAAkB,GAAhE,mBAAOqJ,EAAP,KAAwBpE,EAAxB,KACA,EAA8CjF,mBAAiB,IAA/D,mBAAOgE,EAAP,KAAwBsB,EAAxB,KAEMC,EAAY,WAChB,GAAIX,EAAY,EAAG,CACjB,IAAMtB,EAAWsB,EAAY,EAC7BC,EAAavB,GACb3L,aAAaC,QAAQ,0BAA2B0L,EAAEmC,YAClDiC,GAAkB,GAClBzC,GAAmB,GACnB0E,EAAe,MAIbjE,EAAY,WAChB,GAAId,EAAYF,EAAOzK,OAAO,EAAG,CAC/B,IAAMqJ,EAAWsB,EAAY,EAC7BC,EAAavB,GACb3L,aAAaC,QAAQ,0BAA2B0L,EAAEmC,YAClDiC,GAAkB,GAClBzC,GAAmB,GACnB0E,EAAe,MAIbpG,EAAiB,uCAAG,WAAO5I,GAAP,eAAAyF,EAAA,yDACpBgB,IAAgBzG,EADI,oBAElBL,EAAQ,GACA,aAARK,EAHkB,gCAIV8N,GAAYQ,0BAJF,OAIpB3O,EAJoB,+CAMVmO,GAAYrB,eAAe7M,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASuB,KANxC,QAMpBL,EANoB,eAQtBqK,EAAUrK,GACVwK,EAAenK,GACfhD,aAAaC,QAAQ,4BAA6B+C,GAClDkK,EAAa,GACblN,aAAaC,QAAQ,0BAA2B,KAChD8P,GAAkB,GAClBiC,EAAe,IAdO,4CAAH,sDAsBjB/D,EAAeC,wBAAa,CAChCC,aAAc,SAAC3B,GACTA,EAAE4B,MAAQ,KACZL,KAGJM,cAAe,SAAC7B,GACVA,EAAE4B,MAAQ,KACZR,KAGJU,8BAA8B,EAC9BC,YAAY,IAwBd,OATA1F,qBAAU,YACK,uCAAG,8BAAAJ,EAAA,6DACVhH,EAAc,GADJ,SAEDzB,aAAaqC,QAAQ,6BAFpB,oJAEoDyO,GAAYlE,eAFhE,eAEdnL,EAFc,eAGRmK,EAAkBnK,GAHV,4CAAH,qDAKbwQ,KACC,IAGD,qCAEoB,KAAhBxI,GAEA,cAAC,GAAD,CACEL,WAAY0H,GAAYS,gBACxBlI,MAAOyH,GAAYtC,WACnB/E,YAAaA,EACbmC,kBAAmB,SAAC5I,GAAD,OAAS4I,EAAkB5I,IAC9CqJ,gBAAiBA,EACjBI,sBAAuB,SAACzJ,GAAD,OAnDD,SAACA,GAC7B2K,EAAmB3K,GAkDmByJ,CAAsBzJ,MAG1D,eAAC0C,EAAA,EAAD,WACE,cAAC,GAAD,CACEqC,MAAOkF,EACP/E,QAAS6E,EAAOzK,OAChB0F,YAAY,EACZG,YAAY,EACZN,YAAa+F,EACb3F,YAAa8F,IAEf,uBAEmB,GAAjBhB,EAAOzK,QAEP,wCAGAyK,EAAOzK,OAAS,GAEhB,qCACE,+CAAS2L,GAAT,aACE,cAAC,GAAD,CACE3M,GAAIyL,EAAOE,GAAW3L,GACtBmI,YAAaA,EACb3H,SAAUiL,EAAOE,GAAWnL,SAAS+J,WAAW,KAAM,KACtD6F,gBAAiBA,EACjBC,YAAaA,EACbxC,UAAWpC,EAAOE,GAAWlL,cAC7BsK,gBAAiBA,EACjB+C,eAAgBA,EAChBwC,kBAAmB,SAACtO,GA/DhC0O,EA+DwD1O,IAC5CuO,qBAAsB,SAACvO,GA5DnCyM,EA4D8DzM,IAClDwO,sBAAuB,SAACxO,GAzDpCgK,EAyDgEhK,SAGxD,cAAC0H,GAAA,EAAD,CAAM7E,UAAU,MAAMwE,aAAW,sBAAjC,SACE,eAACM,GAAA,EAAD,WACE,cAACE,GAAA,EAAD,CAAcC,QAAQ,gBACtB,cAACa,GAAA,EAAD,CACEC,IAAK,GACLC,IAAK,EACLC,KAAM,GACN1M,MAAO2M,EACPC,kBAAgB,oBAChBC,kBAAkB,OAClB3M,SAAU,SAAC4M,EAAGlJ,GACZ,IAAIqB,EAAc0H,EACC,kBAAR/I,IACTqB,EAAOrB,GAETqK,EAAmBhJ,qBChFxB+J,GAjEyB,SAAAvP,GACtC,IAAMqS,EAAeC,iBAAoB,MAMzC,OAJA5I,qBAAU,WACR2I,EAAalM,QAAQC,WAIrB,qCACE,cAACG,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,eAACE,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACG,EAAA,EAAD,CAAY3B,QAAQ,YAApB,SACGnF,EAAMgQ,YAET,4BAGJ,eAACzJ,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAACE,EAAA,EAAD,CACEC,WAAS,EACTQ,UAAU,MACVa,QAAQ,eACRC,WAAW,WAJb,SAME,cAACvB,EAAA,EAAD,CAAMC,WAAS,EAACQ,UAAU,MAA1B,SACE,cAACC,EAAA,EAAD,CACEC,SAAUgL,EACV/K,OAAQtH,EAAMiQ,eACdjP,MAAQhB,EAAMiQ,eAAiB,KAAO,aACtCzI,WAAW,EACXjH,MAAOP,EAAMwS,YACbrN,QAAQ,WACR1E,SAAQ,uCAAE,WAAOiH,GAAP,SAAA4B,EAAA,6DAENtJ,EAAMyS,kBAAkB/K,EAAEE,OAAOrH,OAF3B,SAGAP,EAAM0S,qBAAqB1S,EAAM2C,WAAa+E,EAAEE,OAAOrH,MAAOmH,EAAEE,OAAOrH,OAHvE,UAIFP,EAAM2C,WAAa+E,EAAEE,OAAOrH,MAJ1B,gCAKE8E,EAAa0C,OAAO,OAAS/H,EAAM2C,SAAU,QAAS3C,EAAMkN,iBAL9D,2CAAF,4DAYd,uBACA,cAACxG,EAAA,EAAD,CACEC,WAAS,EACTQ,UAAU,MACVzC,QAAS,EACTsD,QAAQ,SACRC,WAAW,SALb,SAOE,cAACvB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACE,cAACoC,GAAD,CACE5G,SAAS,iBACTC,KAAMtC,EAAMsK,YACZnI,GAAInC,EAAMmC,gB,mDCrDlBiC,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyO,OAAQ,CACNtB,cAAe,OACfuB,aAAc,sBA4PHC,GAxPyB,WAAO,IAAD,EAEtCzF,EAAS,UAAG3M,aAAaqC,QAAQ,oCAAxB,QAAwDyO,GAAYlE,eAC7EC,EAAiB7M,aAAaqC,QAAQ,2BAA6ByK,OAAO9M,aAAaqC,QAAQ,4BAA8B,EACnI,EAA4BgG,mBAASgK,aAAavB,GAAYrB,eAAe7M,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASkL,OAApG,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAAkC3E,mBAAiBwE,GAAnD,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAsC7E,mBAAiB,IAAvD,mBAAOoB,EAAP,KAAoB0D,EAApB,KACA,EAA4C9E,oBAAkB,GAA9D,mBAAO+G,EAAP,KAAuBW,EAAvB,KACA,EAAsC1H,mBAAiB,IAAvD,mBAAOsJ,EAAP,KAAoBK,EAApB,KACA,EAA8C3J,mBAAiB,IAA/D,mBAAOgE,EAAP,KAAwBsB,EAAxB,KACA,EAA0BtF,mBAAiB,GAA3C,mBAAOiK,EAAP,KAAcC,EAAd,KACA,EAA4BlK,mBAAuB,IAAnD,mBAAOwH,EAAP,KAAeC,EAAf,KACA,EAAsCzH,oBAAkB,GAAxD,mBAAOmK,EAAP,KAAoBC,EAApB,KAMM1E,EAAY,WAAqC,IAApC2E,EAAmC,uDAAT,KAC3C,GAAY,OAARA,EAAc,CAChB,IAAMC,EAAwBD,EAAKvO,KAAI,SAAAsE,GACrC,OAAIA,EAAEhH,OAASgI,GAAehB,EAAEnH,KAAOyL,EAAOE,GAAW3L,GAC/C,CACNG,KAAMgH,EAAEhH,KACRH,GAAImH,EAAEnH,GACNQ,SAAU2G,EAAE3G,SACZ6P,YAAaA,EACbiB,UAAWnK,EAAEmK,WAGVnK,KAETqH,EAAU6C,GACV3Q,eAAe/B,QAAQ,uBAAwBgC,KAAKC,UAAUyQ,IAGhE,GAAI1F,EAAYF,EAAOzK,OAAO,EAAG,CAC/B,IAAMqJ,EAAWsB,EAAY,EAC7BC,EAAavB,GACb3L,aAAaC,QAAQ,8BAA+B0L,EAAEmC,YACtDiC,GAAkB,GAClBiC,EAAe,IACfO,EAAS,QAETE,GAAe,IAKb7G,EAAiB,uCAAG,WAAO5I,GAAP,eAAAyF,EAAA,yDACpBgB,IAAgBzG,EADI,oBAEtBhD,aAAaC,QAAQ,4BAA6B+C,GAClDkK,EAAa,GACblN,aAAaC,QAAQ,0BAA2B,KAChD8P,GAAkB,GAClBiC,EAAe,IACfO,EAAS,GACTzC,EAAU,IACV2C,GAAe,GACX9P,EAAQ,GACA,aAARK,EAXkB,kCAYV8N,GAAYQ,0BAZF,QAYpB3O,EAZoB,gDAcVmO,GAAYrB,eAAe7M,QAAO,SAAAzB,GAAC,OAAIA,EAAEM,OAASuB,KAdxC,QAcpBL,EAdoB,eAgBtBqK,EAAUqF,aAAa1P,IACvBwK,EAAenK,GACfhB,eAAe/B,QAAQ,uBAAwB,IAlBzB,4CAAH,sDAgEvB4I,qBAAU,YACK,uCAAG,8BAAAJ,EAAA,6DACVhH,EAAc,GADJ,SAEDzB,aAAaqC,QAAQ,6BAFpB,oJAEoDyO,GAAYlE,eAFhE,eAEdnL,EAFc,eAGRmK,EAAkBnK,GAHV,4CAAH,qDAKbwQ,GACA,IAAM3Q,EAAKuR,aAAY,WACrBN,GAAS,SAAAO,GAAC,OAAIA,EAAI,OACjB,KACH,OAAO,kBAAMC,cAAczR,MAC1B,IAEHuH,qBAAU,WACR,IAAI6J,EAAmB7C,EACqE,GAAxFA,EAAOjN,QAAO,SAAA6F,GAAC,OAAKA,EAAEhH,OAASgI,GAAehB,EAAEnH,KAAOyL,EAAOE,GAAW3L,MAAKgB,SAChFoQ,EAAIrR,KAAK,CACPI,KAAMgI,EACNnI,GAAIyL,EAAOE,GAAW3L,GACtBQ,SAAUiL,EAAOE,GAAWnL,SAAS+J,WAAW,KAAM,KACtD8F,YAAa,GACbiB,WAAW,IAEb9C,EAAU4C,GACV1Q,eAAe/B,QAAQ,uBAAwBgC,KAAKC,UAAUwQ,KAxI/C,IA2IbJ,GAAwBE,IACtBvF,EAAYF,EAAOzK,OAAO,EAC5BkC,EAAa0C,OAAO,OAAQ,QAAS,IAErCuL,GAAe,GACfjO,EAAa0C,OAAO,MAAO,QAAS,KAGpCoL,EAASU,KAAkBR,GAC7BzE,EAAU2E,MAId,IAAM3O,EAAUR,KAChB,OACE,qCAEoB,KAAhBkG,GAEA,cAAC,GAAD,CACEL,WAAY0H,GAAYS,gBACxBlI,MAAOyH,GAAYtC,WACnB/E,YAAaA,EACbmC,kBAAmB,SAAC5I,GAAD,OAAS4I,EAAkB5I,IAC9CqJ,gBAAiBA,EACjBI,sBAAuB,SAACzJ,GAAD,OA9FD,SAACA,GAC7B2K,EAAmB3K,GA6FmByJ,CAAsBzJ,MAG1D,eAAC0C,EAAA,EAAD,YAEK8M,GAED,qCACE,cAAC,GAAD,CACEzK,MAAOkF,EACP/E,QAAS6E,EAAOzK,OAChB0F,YAAY,EACZG,YAAY,EACRN,YApKE,aAqKNI,YAAa,kBAAM8F,OAErB,uBAEmB,GAAjBhB,EAAOzK,QAEP,wCAGAyK,EAAOzK,OAAS,GAEhB,cAAC,GAAD,CACEhB,GAAIyL,EAAOE,GAAW3L,GACtBmI,YAAaA,EACb3H,SAAUiL,EAAOE,GAAWnL,SAAS+J,WAAW,KAAM,KACtD8F,YAAaA,EACbxC,UAAWpC,EAAOE,GAAWlL,cAC7BsK,gBAAiBA,EACjB+C,eAAgBA,EAChBwC,kBAAmB,SAACtO,GA1HhC0O,EA0HwD1O,IAC5CuO,qBAAsB,SAACvO,EAAWX,GAAZ,OAxHP,SAACK,EAAciQ,GAC1C,IAAIP,EAAmB7C,EACnBA,EAAOjN,QAAO,SAAA6F,GAAC,OAAKA,EAAEhH,OAASgI,GAAehB,EAAEnH,KAAOyL,EAAOE,GAAW3L,MAAKgB,QAAU,EAC1FoQ,EAAMA,EAAIvO,KAAI,SAAAsE,GACZ,OAAIA,EAAEhH,OAASgI,GAAehB,EAAEnH,KAAOyL,EAAOE,GAAW3L,GAC/C,CACNG,KAAMgH,EAAEhH,KACRH,GAAImH,EAAEnH,GACNQ,SAAU2G,EAAE3G,SACZ6P,YAAasB,EACbL,UAAW5P,GAGRyF,KAGTiK,EAAIrR,KAAK,CACPI,KAAMgI,EACNnI,GAAIyL,EAAOE,GAAW3L,GACtBQ,SAAUiL,EAAOE,GAAWnL,SAAS+J,WAAW,KAAM,KACtD8F,YAAa,GACbiB,UAAW5P,IAGf8M,EAAU4C,GACV1Q,eAAe/B,QAAQ,uBAAwBgC,KAAKC,UAAUwQ,IAE9D3C,EAAkB/M,GACdA,IACFwB,EAAa0C,OAAO,OAAO6F,EAAOE,GAAWnL,SAAU,QAAS,GAChEiM,EAAU2E,IA0F+Cb,CAAqBvO,EAAGX,MAIzE2P,GA1MO,IA4MP,0CAGAA,EA/MO,IAiNP,uCAjNO,GAiNcA,QAKzBE,GAEA,qCACE,wCACA,qBAAKlT,MAAO,CAACmG,OAAO,MAAOyN,UAAU,QAArC,SAEIrD,EAAO1L,KAAI,SAAAsE,GAAC,OACV,eAAC5C,EAAA,EAAD,CAAMC,WAAS,EAAC5B,UAAWH,EAAQmO,OAAnC,UACE,cAACrM,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SACA,cAACC,EAAA,EAAD,CAAY3B,QAAS,QAArB,SAEImE,EAAEmK,UACF,cAAC,KAAD,CAA0BvO,MAAO,YAEjC,cAAC,KAAD,CAAWA,MAAO,cAItB,eAACwB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAf,UACE,cAACC,EAAA,EAAD,CAAY3B,QAAS,QAArB,SAA+BmE,EAAE3G,WACjC,eAACmE,EAAA,EAAD,CAAY5B,MAAO,QAAnB,UAA8BoE,EAAEmK,UAA8B,GAAlBnK,EAAEkJ,YAAY,GAA1D,+BCpGPwB,G,kDAvIb,WAAYhU,GAAkB,IAAD,sBAC3B,cAAMA,GACN,IAAIiU,EAAkB,WACtB,OAAQpT,aAAaqC,QAAQ,gBAC3B,IAAK,WAAa+Q,EAAQ,WACpB,MACN,IAAK,cAAeA,EAAQ,cACtB,MACN,IAAK,kBAAmBA,EAAQ,kBAC1B,MACN,IAAK,gBAAiBA,EAAQ,gBACxB,MACN,IAAK,qBAAsBA,EAAQ,qBAC7B,MACN,IAAK,yBAA0BA,EAAQ,yBACjC,MACN,QAASA,EAAQ,WAhBQ,OAkB3B,EAAKC,MAAQ,CACX/S,YAAa,GACbX,YAAayT,EACbE,SAAU,GArBe,E,4FAyB7B,sBAAA7K,EAAA,sEACQpI,EAAYkT,cADpB,uBAEQzC,GAAY0C,iBAFpB,uBAGQ3Q,KAAK4Q,SAAS,CAACH,SAAU,IAHjC,gD,0EAMA,WAAW,IAAD,OACF7P,EAAQiQ,YAAe,CAC3BC,QAAS,CACPvI,QAAS,CACPwI,KAAMC,IAAY,MAEpBC,KAAM,UAIJC,EAAU,uCAAG,WAAO/Q,GAAP,SAAAyF,EAAA,yDACjB,EAAKgL,SAAS,CACZ9T,YAAaqD,IAEH,aAARA,EAJa,gCAKT3C,EAAYkT,YAAY,EAAKF,MAAM/S,aAL1B,gCAME,kBAAR0C,EANM,gCAOT8N,GAAY0C,eAAe,EAAKH,MAAM/S,aAP7B,2CAAH,sDAWV0T,EAAiB,uCAAG,WAAOzS,GAAP,SAAAkH,EAAA,sEAClBpI,EAAYkT,YAAYhS,GADN,uBAElBuP,GAAY0C,eAAejS,GAFT,uBAGlB,EAAKkS,SAAS,CAClBnT,YAAaiB,EACb+R,SAAU,IALY,2CAAH,sDASvB,OACE,eAACW,EAAA,EAAD,CAAexQ,MAAOA,EAAtB,UACE,cAACyQ,EAAA,EAAD,IAE0B,IAAxBrR,KAAKwQ,MAAMC,UAEX,mCACE,sBAAKhU,MACH,CACEmG,OAAQ,QACRhG,MAAO,QACP+F,QAAS,aACT2O,cAAe,SACf1J,UAAW,UANf,UASE,cAAC2J,EAAA,EAAD,IACA,oDAKoB,IAAxBvR,KAAKwQ,MAAMC,UAET,cAAC,EAAD,CACE1T,SAAUoU,IAIU,IAAxBnR,KAAKwQ,MAAMC,UAEX,qCAE6B,aAA3BzQ,KAAKwQ,MAAM1T,aAEX,cAAC,GAAD,IAG2B,kBAA3BkD,KAAKwQ,MAAM1T,aAEX,cAAC,GAAD,IAG2B,oBAA3BkD,KAAKwQ,MAAM1T,aAEX,cAAC0U,GAAD,IAG2B,gBAA3BxR,KAAKwQ,MAAM1T,aAEX,cAAC,GAAD,IAG2B,uBAA3BkD,KAAKwQ,MAAM1T,aAEX,cAAC,GAAD,IAG2B,2BAA3BkD,KAAKwQ,MAAM1T,aAEX,cAAC,GAAD,IAGF,cAAC,EAAD,CACIA,YAAakD,KAAKwQ,MAAM1T,YACxBI,kBAAoB,SAACiD,GAAD,OAAS+Q,EAAW/Q,gB,GA/HpCqC,IAAMiP,WCZTC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB/T,MAAK,YAAkD,IAA/CgU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.dd9209ff.chunk.js","sourcesContent":["import React from 'react';\nimport { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\nimport CreateIcon from '@material-ui/icons/Create';\n\ninterface GlobalMenuProps {\n  currentPage: string,\n  changeCurrentPage: (val:pageNames) => void\n}\n\nconst GlobalMenu:React.FC<GlobalMenuProps> = props => {\n\n  const style:React.CSSProperties = {\n    position:'fixed',\n    bottom:0,\n    width: '100%',\n  }\n\n  return (\n    <BottomNavigation\n      showLabels\n      style={style}\n      value={props.currentPage}\n      onChange={(event, newValue:pageNames) => {\n        props.changeCurrentPage(newValue);\n        localStorage.setItem('currentPage', newValue);\n      }}\n    >\n      <BottomNavigationAction label='Word' value='WordPage' icon={<TextFormatIcon />} />\n      <BottomNavigationAction label='Grammer' value='GrammerPage'icon={<TextFieldsIcon />} />\n      <BottomNavigationAction label='GrammerWrite' value='GrammerWritingPage'icon={<TextFieldsIcon />} />\n      <BottomNavigationAction label='Test' value='GrammerWritingTestPage'icon={<CreateIcon />} />\n    </BottomNavigation>\n  );\n}\n\nexport default GlobalMenu;","import axios from \"axios\";\n\ntype sentenceType = {\n  id: string,\n  year: string,\n  category: string,\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n}\n\ntype wordType = {\n  id: string,\n  year: string,\n  category: string,\n  part: string,\n  word: string,\n  plural: string,\n  partOfSpeech: string,\n  trans: string,\n  sentence: string,\n  sentenceTrans: string,\n}\n\nexport default class EnglishData {\n  static setWordData(currentYear?:string) {\n    const sheetId = '10QM4n6jg93YevAhr-yS8SFp8VjaK_lv09VF_HfFxTYk';\n    const sheetName = 'new_horizon_j1_word';\n    const apiKey = 'AIzaSyD61LRLY0MGuJyIU9EQCb4KUDiFJRmxO1o';\n    const words:wordType[] = [];\n    return axios\n    .get('https://sheets.googleapis.com/v4/spreadsheets/'+sheetId+'/values/'+sheetName+'?key='+apiKey)\n    .then(response => {\n      if (!Array.isArray(response.data.values)) {\n        return words;\n      }\n      const responseWords = response.data.values;\n      responseWords.shift();\n      responseWords.forEach((w: any) => {\n        if (currentYear!==undefined && currentYear !== w[1]) {\n          return;\n        }\n        words.push({\n          id: w[0],\n          year: w[1],\n          category: w[2],\n          part: w[3],\n          word: w[4],\n          plural: w[5],\n          partOfSpeech: w[6],\n          trans: w[7],\n          sentence: w[8],\n          sentenceTrans: w[9]\n        })\n      })\n      sessionStorage.setItem('WORDS', JSON.stringify(words));\n    })\n    .catch(() => words);\n  }\n\n  static getWordData() {\n    const storageWords = sessionStorage.getItem('WORDS');\n    const words:wordType[] = [];\n    if (storageWords != null && storageWords.length > 0) {\n      JSON.parse(storageWords).forEach((w:any) => {\n        words.push({\n          id: w['id'],\n          year: w['year'],\n          category: w['category'],\n          part: w['part'],\n          word: w['word'],\n          plural: w['plural'],\n          partOfSpeech: w['partOfSpeech'],\n          trans: w['trans'],\n          sentence: w['sentence'],\n          sentenceTrans: w['sentenceTrans']\n        })\n      });\n    }\n    return words;\n  }\n\n  static getFavoriteWordData()\n  {\n    let words:wordType[] = [];\n    let favorite = JSON.parse(localStorage.getItem('favorite') ?? '{}');\n    const sWords = sessionStorage.getItem('WORDS');\n    let storageWords:any = [];\n    if (sWords != null && sWords.length > 0) {\n      storageWords = JSON.parse(sWords);\n    } else {\n      return words;\n    }\n    if (Array.isArray(favorite)) {\n      favorite.forEach(f => {\n        if (f['category'] === 'Word') {\n          const s:any = storageWords.filter((s:any) => s['id'] === f['id']);\n          if (s.length > 0) {\n            words.push(\n              {\n                id: s[0]['id'],\n                year: s[0]['year'],\n                category: s[0]['category'],\n                part: s[0]['part'],\n                word: s[0]['word'],\n                plural: s[0]['plural'],\n                partOfSpeech: s[0]['partOfSpeech'],\n                trans: s[0]['trans'],\n                sentence: s[0]['sentence'],\n                sentenceTrans: s[0]['sentenceTrans']\n              }\n            );\n          }\n        }\n      });\n    }\n    return words;\n  }\n\n  static getFirstPart() {\n    return this.getWordData().reduce((val:string[], cur:any) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, [])[0];\n  }\n\n  static getParts() {\n    return this.getWordData().reduce((val:string[], cur:any) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, []);  \n  }\n\n  static getYears() {\n    console.log(this.getWordData())\n    return this.getWordData().reduce((val:string[], cur:any) => {\n      if (!val.includes(cur.year)) {\n        val.push(cur.year);\n      }\n      return val;\n    }, []);\n  }\n\n  static getSentences() {\n    return this.getWordData().reduce((val:sentenceType[], cur:any) => {\n      const w:sentenceType = {\n        id: cur.id,\n        year: cur.year,\n        category: cur.category,\n        part: cur.part,\n        sentence: cur.sentence, \n        sentenceTrans: cur.sentenceTrans\n      };\n\n      if (!val.some(v => \n        v.part === w.part && v.sentence === w.sentence)) {\n        val.push(w);\n      }\n      return val;\n    }, []);  \n  }\n}\n","import React from 'react';\nimport { Container, Button } from '@material-ui/core';\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\nimport EnglishData from '../context/EnglishData';\n\ninterface MainMenuProps {\n  onChange: (val:string) => void\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n  }),\n);\n\nconst MainMenuPage = (props:MainMenuProps) => {\n  const classes = useStyles();\n\n  const years = EnglishData.getYears();\n  console.log(years);\n  return (\n    <div className={classes.root}>\n      {\n        years.map(\n          year => \n            <Button\n              color=\"primary\"\n              variant=\"contained\"\n              onClick={() => props.onChange(year)}\n            >\n              {year}\n            </Button>\n        )\n      }\n    </div>\n  )\n} \n\nexport default MainMenuPage;","class EnglishVoice {\n  static speech(text:string, lang: string, rate: number) {\n    const synth = window.speechSynthesis;\n    const voices = synth.getVoices().filter(voice => voice.lang === lang);\n    const voice = voices[0];\n    const utter = new SpeechSynthesisUtterance();\n    utter.text = text;\n    utter.lang = lang;\n    utter.voice = voice;\n    utter.rate = rate;\n    window.speechSynthesis.speak(utter);\n  }\n}\n\nexport default EnglishVoice;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface WordProps {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    visibleWord: string;\n    isInputWordCompleted: boolean;\n    inputWordString:string;\n    onClick: () => void;\n    changeInputWordCompleted: (val:boolean) => void;\n    changeInputWord: (val:string) => void;    \n}\n\nclass Word extends React.Component<WordProps, {}>{\n  private wordInputElement: React.RefObject<HTMLInputElement>;\n  constructor(props: WordProps) {\n    super(props);\n    this.wordInputElement = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.wordInputElement.current?.focus();\n  }\n\n  componentDidMount() {\n    this.wordInputElement.current?.focus();\n  }\n\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    const partOfSpeechVerb: React.CSSProperties = {\n      backgroundColor: '#876445'\n    }\n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\" style={partOfSpeech === '動詞' ? partOfSpeechVerb : undefined}>\n          <Grid container>\n            <Grid item xs={10}>\n              <Typography variant='subtitle1'>\n                {this.props.trans}\n              </Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <Avatar\n                variant='circular'\n                component='span'\n              >\n                {partOfSpeech.substr(0,1)}\n              </Avatar>\n            </Grid>\n          </Grid>\n          <Typography variant='h4' className={this.props.visibleWord}>\n            {this.props.word}\n          </Typography>\n          <br/>\n          <Grid container direction=\"row\">\n            <TextField\n              inputRef={this.wordInputElement}\n              error={!this.props.isInputWordCompleted}\n              label= {this.props.isInputWordCompleted ? \"OK\" : \"input word\"}\n              fullWidth={true}\n              value={this.props.inputWordString}\n              variant=\"outlined\"\n              onChange={(o) => \n                {\n                  this.props.changeInputWord(o.target.value.toLowerCase());\n                  if (this.props.word.toLowerCase() === o.target.value.toLowerCase()) {\n                    this.props.changeInputWordCompleted(true);\n                    this.props.onClick();\n                    EnglishVoice.speech('OK. ' + this.props.word, 'en-US', 1);\n                  } else {\n                    this.props.changeInputWordCompleted(false);\n                  }\n                }\n              }\n            />\n          </Grid>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => {\n                  this.props.onClick()\n                  this.wordInputElement.current?.focus();\n                }}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.word, 'en-US', 1);\n                  this.wordInputElement.current?.focus();\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Word;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface PluralProps {\n    plural: string;\n    partOfSpeech: string;\n    trans: string;\n    visiblePlural: string;\n    isInputPluralCompleted: boolean;\n    inputPluralString:string;\n    onClick: () => void;\n    changeInputPluralCompleted: (val:boolean) => void;\n    changeInputPlural: (val:string) => void;    \n}\n\nclass Plural extends React.Component<PluralProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    \n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <Typography variant='h4' className={this.props.visiblePlural}>\n            {this.props.plural}\n          </Typography>\n          <br/>\n          <Grid container direction=\"row\">\n            <TextField\n              error={!this.props.isInputPluralCompleted}\n              label= {this.props.isInputPluralCompleted ? \"OK\" : \"input plural\"}\n              fullWidth={true}\n              value={this.props.inputPluralString}\n              variant=\"outlined\"\n              onChange={(o) => \n                {\n                  this.props.changeInputPlural(o.target.value.toLowerCase());\n                  if (this.props.plural.toLowerCase() === o.target.value.toLowerCase()) {\n                    this.props.changeInputPluralCompleted(true);\n                    this.props.onClick();\n                    EnglishVoice.speech('OK. ' + this.props.plural, 'en-US', 1);\n                  } else {\n                    this.props.changeInputPluralCompleted(false);\n                  }\n                }\n              }\n            />\n          </Grid>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => this.props.onClick()}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.plural, 'en-US', 1);\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Plural;","import * as React from 'react';\nimport { Button, Grid } from '@material-ui/core';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\n\nimport 'fontsource-roboto';\n\ninterface PaginationProps {\n  index: number;\n  maxPage: number;\n  isViewPrev: boolean;\n  isViewNext: boolean;\n  onClickPrev: () => void;\n  onClickNext: () => void;\n} \nconst Pagination: React.FC<PaginationProps> = (props) => {\n  return (\n    <Grid\n    container\n    direction=\"row\"\n    justify=\"space-around\"\n    alignItems=\"flex-end\"\n    >\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => props.onClickPrev()}\n        disabled={props.index === 0 || !props.isViewPrev ? true : false}\n      >\n        <ArrowBackIosIcon />\n      </Button> \n      <Button \n        variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => props.onClickNext()}\n        disabled={props.index >= props.maxPage-1 || !props.isViewNext ? true : false}\n      >\n        <ArrowForwardIosIcon />\n      </Button>\n    </Grid>\n  );\n}\n\nexport default Pagination;","import React, { useState, useEffect } from 'react';\nimport { Button, Grid } from '@material-ui/core';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport 'fontsource-roboto';\n\ninterface FavoriteProps {\n    category: 'Grammer'|'Word'|'GrammerWriting';\n    part: string;\n    id: string;\n}\n\nexport default function Favorite(props:FavoriteProps) {\n    const [isFavorite, setIsFavorite] = useState<boolean>(false);\n    const [id, setId] = useState<string>(props.id);\n\n    const checkIsFavorite = async () => {\n        let favorite:any = [];\n        favorite = await JSON.parse(localStorage.getItem('favorite') ?? '{}');\n        if (Array.isArray(favorite)) {\n            return favorite.filter(f => f['category'] === props.category && f['id'] === props.id).length > 0;\n        } else {\n            return false;\n        }\n    }\n\n    const setFavorite = async () => {\n        let favorite = await JSON.parse(localStorage.getItem('favorite') ?? '{}');\n        if (Array.isArray(favorite)) {\n            await checkIsFavorite()\n            .then((isF:any) => {\n                if (isF) {\n                    favorite = favorite.filter((f:any) => f['category'] !== props.category || f['id'] !== props.id);\n                    setIsFavorite(false);\n                } else {\n                    favorite = favorite.concat(props);\n                    setIsFavorite(true);\n                }\n                localStorage.setItem('favorite', JSON.stringify(favorite));\n            });\n        } else {\n            setIsFavorite(true);\n            localStorage.setItem('favorite', JSON.stringify([props]));\n        }\n    }\n\n    useEffect(() => {\n        checkIsFavorite()\n        .then((isFa:boolean) => {\n            setIsFavorite(isFa);\n        })\n    })\n\n    return (\n        <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={setFavorite}\n        >\n        {\n            isFavorite ? <StarIcon /> : <StarBorderIcon />\n        }\n        </Button>\n    )\n\n}\n","import React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport { Drawer, IconButton, List, ListItem, Collapse, Slider } from '@material-ui/core';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { AppBar, Toolbar } from '@material-ui/core';\nimport { ListItemText, ListItemIcon } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nimport { VerticalSplitSharp } from '@material-ui/icons';\n\ntype categoryType = {\n  category: string;\n  parts: string[];\n}\ninterface SideMenuProps {\n  categories: categoryType[]|null;\n  parts: string[];\n  currentPart: string;\n  changeCurrentPart: (val:string) => void;\n  speechSpeedRate: number;\n  changeSpeechSpeedRate: (val:number) => void;\n}\n\nconst SideMenu: React.FC<SideMenuProps> = props => {\n  const [menuToggle, setMenuToggle] = useState(false);\n  const [listOpen, setListOpen] = useState<boolean[]>([]);\n\n  const toggleDrawer = () => {\n    setMenuToggle(!menuToggle);\n  };\n\n  const categories:categoryType[] | null = props.categories;\n  const parts = props.parts;\n  const drawerWidth = '70vw';\n\n  useEffect(() => {\n    if (categories) {\n      let vals:boolean[] = [];\n      categories.forEach(c => {\n        if (c.parts.includes(props.currentPart)) {\n          vals.push(true);\n        } else {\n          vals.push(false);\n        }\n      })\n      setListOpen(vals);\n    }\n  },[]);\n\n  const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n      header: {\n        height:'4vh',\n        backgroundColor: '#7A7A7A',\n        marginBottom: '1vh'\n      },\n      open: {\n        width: drawerWidth,\n      },\n      close: {\n        width:'100%',\n      },\n      closeIcon: {\n        marginTop: '16px',\n        marginLeft: '16px',\n      },\n      hide: {\n        display: 'none',\n      },\n      list: {\n        width: drawerWidth,\n      },\n      categories: {\n        backgroundColor: '#333',\n      },\n      parts: {\n        paddingLeft: '2em',\n      }\n    })\n  );\n\n  const changeCategoryMenu = ((index:number|null) => {\n    let vals:boolean[] = [];\n    listOpen.forEach(c => {\n      vals.push(false);\n    })\n    if (index !== null) {\n      vals.splice(index, 1, true);\n    }\n    setListOpen(vals);\n  });\n\n  const classes = useStyles();\n\n  return ( \n    <>\n      <Toolbar\n        className={`${menuToggle ? classes.open : classes.close} ${classes.header}` }\n      >\n        <Typography\n          variant=\"h6\"\n          noWrap\n          style={{flexGrow: 1, textAlign:'center'}}\n        >\n          {props.currentPart}    \n        </Typography>\n        <IconButton\n          color=\"inherit\"\n          className={menuToggle ? classes.hide : ''}\n          aria-label=\"open drawer\"\n          edge=\"end\"\n          onClick={() => toggleDrawer()}\n        >\n          <MenuIcon />\n        </IconButton>\n      </Toolbar>\n      <Drawer\n        anchor='right'\n        open={menuToggle}\n        onClose={() => setMenuToggle(false)}\n      >\n        <div className={classes.list}>\n          <CloseIcon\n            className={classes.closeIcon}\n            onClick={() => setMenuToggle(false)}\n          />\n          <List key={'menuList'} component=\"nav\" aria-label=\"secondary part\">\n            {\n              categories\n              &&\n              categories.map((c, index) => {\n                return (\n                  <div key={'categoryWrapper'+index}>\n                    <ListItem\n                      key={'category'+index}\n                      className={classes.categories}\n                      button\n                      onClick={() => {\n                        if (listOpen[index]) {\n                          changeCategoryMenu(null);\n                        } else {\n                          changeCategoryMenu(index);\n                        }\n                      }}\n                    >\n                      <ListItemText key={'categoryText'} primary={c.category}/>\n                      {listOpen[index] ? <ExpandLess /> : <ExpandMore />}\n                    </ListItem>\n                    <Collapse key={'subMenu'+index} in={listOpen[index]} timeout=\"auto\" unmountOnExit>\n                      <List key={'subMenuList'+index} component=\"div\" disablePadding>\n                        {\n                          c.parts.map((p, i) => \n                            <ListItem \n                              key={'subMenu'+index+p+i}\n                              button\n                              className={classes.parts}\n                              onClick={() => {\n                                props.changeCurrentPart(p);\n                                setMenuToggle(false);\n                                changeCategoryMenu(index);\n                              }}\n                                        \n                            >\n                              <ListItemText key={'subMenuText'+index+p+i} primary={p.replaceAll(c.category, '').trim()}/>\n                              <ListItemIcon key={'subMenuIcon'+index+p+i}>\n                                {\n                                  p === props.currentPart\n                                  &&\n                                  <CheckIcon />\n                                }\n                              </ListItemIcon>\n                            </ListItem>\n                          )\n                        }\n                      </List>\n                    </Collapse>\n                  </div>\n                )\n              })\n            }\n            {\n              !categories && parts\n              &&\n              parts.map(p => {\n                return (\n                  <ListItem \n                    button\n                    onClick={() => {\n                      props.changeCurrentPart(p);\n                      setMenuToggle(false);\n                    }}\n                    key={p}\n                  >\n                    <ListItemText primary={p}/>\n                    <ListItemIcon>\n                      {\n                        p === props.currentPart\n                        &&\n                        <CheckIcon />\n                      }\n                    </ListItemIcon>\n                  </ListItem>\n                )\n              })\n            }\n            <ListItem\n              button\n              onClick={() => {\n                props.changeCurrentPart('favorite');\n                setMenuToggle(false);\n              }}\n              key={'favorite'}\n            >\n              <ListItemText primary=\"favorite\"/>\n            </ListItem>\n          </List>\n          <Divider />\n          <List key={'voiceSpeedList'} component=\"nav\" aria-label=\"thirdry speechSpeed\">\n            <ListItem key={'voiceSpeedListItem'}>\n              <ListItemText primary=\"voice speed\"/>\n              <Slider\n                min={0.1}\n                max={1}\n                step={0.1}\n                value={props.speechSpeedRate}\n                aria-labelledby=\"speech-speed-rate\"\n                valueLabelDisplay=\"auto\"\n                onChange={(e, v) => {\n                  let rate:number = props.speechSpeedRate;\n                  if (typeof(v) ===  'number') {\n                    rate = v;\n                  }\n                  props.changeSpeechSpeedRate(rate);\n                }}\n              />\n            </ListItem>\n          </List>\n        </div>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideMenu;","import React, { useState, useEffect } from 'react';\nimport { Container } from '@material-ui/core';\nimport EnglishData from '../context/EnglishData';\nimport Word from '../components/WordPage/Word';\nimport Plural from '../components/WordPage/Plural'\nimport Paginate from '../components/Pagination';\nimport Favorite from '../components/Common/Favorite';\nimport SideMenu from '../components/SideMenu';\nimport { useSwipeable } from \"react-swipeable\";\n\nconst WordPage: React.FC<{}> = () => {\n  const firstPart = localStorage.getItem('wordCurrentPart') ?? EnglishData.getFirstPart();\n  const wIndex: number = localStorage.getItem('wordWordIndex') ? Number(localStorage.getItem('wordWordIndex')) : 0;\n  const [slides, setSlides] = useState(EnglishData.getWordData().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(wIndex);\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [visibleWord, setVisibleWord] = useState<string>('word-hidden');\n  const [visiblePlural, setVisiblePlural] = useState<string>('word-hidden');\n  const [visibleSentence, setVisibleSentence] = useState<string>('word-hidden');\n  const [isInputWordCompleted, setIsInputWordCompleted] = useState<boolean>(false);\n  const [isInputPluralCompleted, setIsInputPluralCompleted] = useState<boolean>(false);\n  const [inputWordString, setInputWordString] = useState<string>('');\n  const [inputPluralString, setInputPluralString] = useState<string>('');\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      setVisibleWord('word-hidden');\n      setVisiblePlural('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n      setInputPluralString('');\n      const newIndex = wordIndex-1\n      setWordIndex(newIndex);\n      localStorage.setItem('wordWordIndex', newIndex.toString());\n    }\n  }\n  \n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      setVisibleWord('word-hidden');\n      setVisiblePlural('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n      setInputPluralString('');\n      const newIndex = wordIndex+1;\n      setWordIndex(newIndex);\n      localStorage.setItem('wordWordIndex', newIndex.toString());\n    }\n  }\n\n  const changeInputWordCompleted = (val: boolean) => {\n    setIsInputWordCompleted(val);\n  }\n\n  const changeInputPluralCompleted = (val:boolean) => {\n    setIsInputPluralCompleted(val);\n  }\n\n  const changeInputWord = (val: string) => {\n    setInputWordString(val);\n  }\n\n  const changeInputPlural = (val: string) => {\n    setInputPluralString(val);\n  }\n\n  const changeCurrentPart = async (val: string) => {\n    let s:any = [];\n    if (currentPart !== val) {\n      if (val === 'favorite') {\n        s = await EnglishData.getFavoriteWordData();\n      } else {\n        s = await EnglishData.getWordData().filter(w => w.part === val);\n      }\n      setWordIndex(0);\n      setSlides(s);\n      setCurrentPart(val);\n      setVisibleWord('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n      setInputPluralString('');\n      localStorage.setItem('wordCurrentPart', val);\n      localStorage.setItem('wordWordIndex', '0');\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  useEffect(() => {\n    changeCurrentPart(firstPart);\n  }, []);\n\n  return (\n    <>\n      {\n        currentPart\n        &&\n        <SideMenu\n          categories={null}\n          parts={EnglishData.getParts()}\n          currentPart={currentPart}\n          changeCurrentPart={(val) => changeCurrentPart(val)}\n          speechSpeedRate={speechSpeedRate}\n          changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n        />\n      }\n      <Container maxWidth=\"sm\">\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          isViewPrev={true}\n          isViewNext={true}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        {\n          slides.length == 0\n          &&\n          <p>no data</p>\n        }\n        {\n          slides.length > 0\n          &&\n          <>\n            <div {...swipeHandles}>\n              <Word\n                word={slides[wordIndex].word}\n                partOfSpeech={slides[wordIndex].partOfSpeech}\n                trans={slides[wordIndex].trans}\n                visibleWord = {visibleWord}\n                isInputWordCompleted={isInputWordCompleted}\n                inputWordString={inputWordString}\n                onClick={() => setVisibleWord('word-visible')}\n                changeInputWordCompleted={(val) => changeInputWordCompleted(val)}\n                changeInputWord={(val) => changeInputWord(val)}\n              />\n              {\n                slides[wordIndex].plural\n                &&\n                <Plural\n                  plural={slides[wordIndex].plural}\n                  partOfSpeech={slides[wordIndex].partOfSpeech}\n                  trans={slides[wordIndex].trans}\n                  visiblePlural = {visiblePlural}\n                  isInputPluralCompleted={isInputPluralCompleted}\n                  inputPluralString={inputPluralString}\n                  onClick={() => setVisiblePlural('word-visible')}\n                  changeInputPluralCompleted={(val) => changeInputPluralCompleted(val)}\n                  changeInputPlural={(val) => changeInputPlural(val)}\n                />\n              }\n            </div>\n{/*\n            <hr/>\n            <Sentence\n              sentence={slides[wordIndex].sentence}\n              trans={slides[wordIndex].sentenceTrans}\n              visibleSentence={visibleSentence}\n              speechSpeedRate={speechSpeedRate}\n              onClick = {() => setVisibleSentence('word-visible')}\n            />\n*/}\n            <hr/>\n            <div style={{textAlign:'center'}}>\n              <Favorite \n                category='Word'\n                part={currentPart}\n                id={slides[wordIndex].id}\n              />\n            </div>\n          </>\n        }\n      </Container>\n    </>\n  )\n} \n\nexport default WordPage;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface WordProps {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    visibleWord: string;\n    isInputWordCompleted: boolean;\n    inputWordString:string;\n    onClick: () => void;\n    changeInputWordCompleted: (val:boolean) => void;\n    changeInputWord: (val:string) => void;    \n}\n\nclass Word extends React.Component<WordProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    \n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <Grid container>\n            <Grid item xs={10}>\n              <Typography variant='subtitle1'>\n                {this.props.word}\n              </Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <Avatar\n                variant='circular'\n                component='span'\n              >\n                {partOfSpeech.substr(0,1)}\n              </Avatar>\n            </Grid>\n          </Grid>\n          <Typography variant='h5' className={this.props.visibleWord}>\n            {this.props.trans}\n          </Typography>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => this.props.onClick()}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.word, 'en-US', 1);\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Word;","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport EnglishData from '../context/EnglishData';\nimport Word from '../components/WordTransPage/Word';\nimport Paginate from '../components/Pagination';\nimport Part from '../components/Part';\nimport SideMenu from '../components/SideMenu';\nimport { useSwipeable } from \"react-swipeable\";\n\nconst WordTransPage: React.FC<{}> = () => {\n  const firstPart = localStorage.getItem('wordTransCurrentPart') ?? EnglishData.getFirstPart();\n  const [slides, setSlides] = useState(EnglishData.getWordData().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(0);\n  const [visibleWord, setVisibleWord] = useState<string>('word-hidden');\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [visibleSentence, setVisibleSentence] = useState<string>('word-hidden');\n  const [isInputWordCompleted, setIsInputWordCompleted] = useState<boolean>(false);\n  const [inputWordString, setInputWordString] = useState<string>('');\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const newIndex = wordIndex-1\n      setWordIndex(newIndex);\n      localStorage.setItem('wordTransWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const newIndex = wordIndex+1;\n      setWordIndex(newIndex);\n      localStorage.setItem('wordTransWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n    }\n  }\n\n  const changeInputWordCompleted = (val: boolean) => {\n    setIsInputWordCompleted(val);\n  }\n\n  const changeInputWord = (val: string) => {\n    setInputWordString(val);\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      const s = EnglishData.getWordData().filter(w => w.part === val);\n        setSlides(s)\n        setCurrentPart(val);\n        localStorage.setItem('wordTransCurrentPart', val);\n        setWordIndex(0);\n        localStorage.setItem('wordTransWordIndex', '0');\n        setVisibleWord('word-hidden');\n        setVisibleSentence('word-hidden');\n        setIsInputWordCompleted(false);\n        setInputWordString('');\n      }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  return (\n    <>\n      <SideMenu\n        categories={null}\n        parts={EnglishData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container maxWidth=\"sm\">\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          isViewPrev={true}\n          isViewNext={true}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        <div {...swipeHandles}>\n          <Word\n            word={slides[wordIndex].word}\n            partOfSpeech={slides[wordIndex].partOfSpeech}\n            trans={slides[wordIndex].trans}\n            visibleWord = {visibleWord}\n            isInputWordCompleted={isInputWordCompleted}\n            inputWordString={inputWordString}\n            onClick={() => setVisibleWord('word-visible')}\n            changeInputWordCompleted={(val) => changeInputWordCompleted(val)}\n            changeInputWord={(val) => changeInputWord(val)}\n          />\n        </div>\n        <hr/>\n      </Container>\n    </>\n  )\n} \n\nexport default WordTransPage;","import React from 'react';\nimport { Container, Button, Grid, Typography } from '@material-ui/core';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport EnglishVoice from '../../lib/EnglishVoice';\n\ninterface GrammerProps {\n  answer: string[];\n  stockWords: string[];\n  ansWords: string[];\n  sentence: string;\n  translate: string;\n  isAnsComplated: boolean;\n  speechSpeedRate: number;\n  moveAnsWords: (w:string, i:number) => void;\n  moveStockWords: (w:string, i:number) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const stockWords = props.stockWords;\n  const ansWords = props.ansWords;\n  const lastChar:string = props.sentence.substr(-1);\n\n  const buttonStyle: React.CSSProperties = {\n    display: 'inline-block',\n    minWidth: '20px',\n    height: '40px',\n    textTransform: 'lowercase',\n    margin: '5px',\n  }\n\n  const wordsStyle: React.CSSProperties = {\n    minHeight: '30vh',\n  }\n\n  const style: React.CSSProperties = {\n    display: 'inline-block',\n    width: '100%',\n    height: '20%',\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            ansWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color={props.isAnsComplated ? 'default' : 'secondary'}\n                  variant={props.isAnsComplated ? 'outlined' : 'contained'}\n                  size=\"small\"\n                  onClick={() => props.moveStockWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n          <Button\n            style={buttonStyle}\n            color=\"default\"\n            variant=\"text\"\n            size=\"small\"\n            key=\"lastChar\"\n          >\n            {lastChar}\n          </Button>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            stockWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  onClick={() => props.moveAnsWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n        </Grid>\n      </Container>\n      <hr />\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          <Button\n            style={style}\n            variant=\"outlined\"\n            onClick={() => {\n              EnglishVoice.speech(props.sentence, 'en-US', props.speechSpeedRate);\n            }}\n          >\n            <VolumeUpIcon\n              fontSize='small'\n            />\n          </Button>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/WordGrammerPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport Favorite from '../components/Common/Favorite';\nimport EnglishData from '../context/EnglishData';\nimport EnglishVoice from '../lib/EnglishVoice';\nimport { useSwipeable } from 'react-swipeable';\n\nconst GrammerPage:React.FC = () => {\n  const firstPart = localStorage.getItem('grammerCurrentPart') ?? EnglishData.getFirstPart();\n  const [slides, setSlides] = useState(EnglishData.getSentences().filter(w => w.part === EnglishData.getFirstPart()));\n  const [wordIndex, setWordIndex] = useState<number>(0);\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [answer, setAnswer] = useState<string[]>(slides[wordIndex].sentence.toLocaleLowerCase().slice(0, -1).split(' '));\n  const [isAnsComplated, setIsAnsComplated] = useState<boolean>(false);\n  const [stockWords, setStockWords] = useState<string[]>(\n    answer\n      .map(function (a) { return { weight: Math.random(), value: a } })\n      .sort(function (a, b) { return a.weight - b.weight })\n      .map(function (a) { return a.value })\n  );\n  const [ansWords, setAnsWords] = useState<string[]>([]);\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const i:number = wordIndex - 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n      setWordIndex(i);\n      setAnswer(s);\n      setStockWords(shuffle(s));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n\n      setWordIndex(i);\n      setAnswer(s);\n      setStockWords(shuffle(s));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      const s = EnglishData.getSentences().filter(w => w.part === val);\n      setSlides(s)\n      setCurrentPart(val);\n      setWordIndex(0);\n      localStorage.setItem('grammerCurrentPart', val);\n      localStorage.setItem('grammerWordIndex', '0');\n\n      const a:string[] = separateSentence(s[0].sentence);\n      setAnswer(a);\n      setStockWords(shuffle(a));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const moveAnsWords = (word: string, index: number) => {\n    const aw = ansWords;\n    const sw = stockWords.filter((v, i) => {\n      return i !== index;\n    });\n    aw.push(word);\n\n    setAnsWords(aw);\n    setStockWords(sw);\n\n    EnglishVoice.speech(word, 'en-US', 1);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK. ' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const moveStockWords = (word: string, index: number) => {\n    const sw = stockWords;\n    const aw = ansWords.filter((v, i) => {\n      return i !== index;\n    });\n    sw.push(word);\n\n    setStockWords(sw);\n    setAnsWords(aw);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK. ' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const separateSentence = (s:string) => {\n    return s.toLocaleLowerCase().slice(0, -1).split(' ');\n  }\n\n  const shuffle = (w:string[]) => {\n    return w.map(function (a) { return { weight: Math.random(), value: a } })\n    .sort(function (a, b) { return a.weight - b.weight })\n    .map(function (a) { return a.value })\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  return (\n    <>\n      {\n        currentPart !== ''\n        &&\n        <SideMenu\n          categories={null}\n          parts={EnglishData.getParts()}\n          currentPart={currentPart}\n          changeCurrentPart={(val) => changeCurrentPart(val)}\n          speechSpeedRate={speechSpeedRate}\n          changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n        />\n      }\n      <Container>\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          isViewPrev={true}\n          isViewNext={true}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        <div {...swipeHandles}>\n          <Grammer\n            answer={answer}\n            stockWords={stockWords}\n            ansWords={ansWords}\n            sentence={slides[wordIndex].sentence}\n            translate={slides[wordIndex].sentenceTrans}\n            isAnsComplated={isAnsComplated}\n            speechSpeedRate={speechSpeedRate}\n            moveAnsWords={(w, i) => moveAnsWords(w, i)}\n            moveStockWords={(w, i) => moveStockWords(w, i)}\n          />\n        </div>\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerPage;","import React from 'react';\nimport { Container, Button, Grid, List, ListItem, ListItemText, Slider, Typography } from '@material-ui/core';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport Favorite from '../Common/Favorite';\nimport EnglishVoice from '../../lib/EnglishVoice';\n\ninterface GrammerProps {\n  id: string;\n  currentPart: string;\n  answer: string[];\n  stockWords: string[];\n  ansWords: string[];\n  sentence: string;\n  translate: string;\n  speechSpeedRate: number;\n  isAnsComplated: boolean;\n  moveAnsWords: (w:string, i:number) => void;\n  moveStockWords: (w:string, i:number) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const stockWords = props.stockWords;\n  const ansWords = props.ansWords;\n  const lastChar:string = props.sentence.substr(-1);\n\n  const buttonStyle: React.CSSProperties = {\n    display: 'inline-block',\n    minWidth: '20px',\n    height: '40px',\n    textTransform: 'lowercase',\n    margin: '5px',\n  }\n\n  const wordsStyle: React.CSSProperties = {\n    minHeight: '10vh',\n    paddingBottom: '40px',\n  }\n\n  const style: React.CSSProperties = {\n    display: 'inline-block',\n    width: '100%',\n    height: '20%',\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            ansWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color={props.isAnsComplated ? 'default' : 'secondary'}\n                  variant={props.isAnsComplated ? 'outlined' : 'contained'}\n                  size=\"small\"\n                  onClick={() => props.moveStockWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n          <Button\n            style={buttonStyle}\n            color=\"default\"\n            variant=\"text\"\n            size=\"small\"\n            key=\"lastChar\"\n          >\n            {lastChar}\n          </Button>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container style={{borderTop: '1px dashed #8c8b8b'}}>\n          {\n            stockWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  onClick={() => props.moveAnsWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n        </Grid>\n      </Container>\n      <hr />\n      <Container maxWidth=\"sm\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-around\"\n          alignItems=\"flex-end\"\n        >\n          <Button\n            variant=\"outlined\"\n            onClick={() => {\n              EnglishVoice.speech(props.sentence, 'en-US', props.speechSpeedRate);\n            }}\n          >\n            <VolumeUpIcon\n              fontSize='small'\n            />\n          </Button>\n          <Favorite \n            category='Grammer'\n            part={props.currentPart}\n            id={props.id}\n          />\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","import axios from \"axios\";\n\ntype sentenceType = {\n  id: string,\n  year: string,\n  category: string,\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n  dummyWord: string,\n}\n\ntype grammerType = {\n  id: string,\n  year: string,\n  category: string,\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n  dummyWord: string,\n}\n\ntype categoryType = {\n  category: string;\n  parts: string[];\n}\n\nexport default class GrammerData {\n  static setGrammerData(currentYear?:string) {\n    const sheetId = '10QM4n6jg93YevAhr-yS8SFp8VjaK_lv09VF_HfFxTYk';\n    const sheetName = 'csv_new_horizon_j1';\n    const apiKey = 'AIzaSyD61LRLY0MGuJyIU9EQCb4KUDiFJRmxO1o';\n    const sentences:grammerType[] = [];\n    return axios\n    .get('https://sheets.googleapis.com/v4/spreadsheets/'+sheetId+'/values/'+sheetName+'?key='+apiKey)\n    .then(response => {\n      if (!Array.isArray(response.data.values)) {\n        return sentences;\n      }\n      const responseWords = response.data.values;\n      responseWords.shift();\n      responseWords.forEach((w: any) => {\n        if (currentYear!==undefined && currentYear !== w[1]) {\n          return;\n        }\n        sentences.push({\n          id: w[0],\n          year: w[1],\n          category: w[2],\n          part: w[3],\n          sentence: w[4],\n          sentenceTrans: w[5],\n          dummyWord: w[6],\n        })\n      })\n      sessionStorage.setItem('SENTENCES', JSON.stringify(sentences));\n    })\n    .catch(() => sentences);\n  }\n\n  static getGrammerData() {\n    const storageSentences = sessionStorage.getItem('SENTENCES');\n    const sentences:grammerType[] = [];\n    if (storageSentences != null && storageSentences.length > 0) {\n      JSON.parse(storageSentences).forEach((s:any) => {\n        sentences.push({\n          id: s['id'],\n          year: s['year'],\n          category: s['category'],\n          part: s['part'],\n          sentence: s['sentence'],\n          sentenceTrans: s['sentenceTrans'],\n          dummyWord: s['dummyWord'],\n        })\n      });\n    }\n    return sentences;\n  }\n\n  static getFavoriteSentenceData()\n  {\n    let sentences:sentenceType[] = [];\n    let favorite = JSON.parse(localStorage.getItem('favorite') ?? '{}');\n    const sSentences = sessionStorage.getItem('SENTENCES');\n    let storageSentences:any = [];\n    if (sSentences != null && sSentences.length > 0) {\n      storageSentences = JSON.parse(sSentences);\n    } else {\n      return sentences;\n    }\n    if (Array.isArray(favorite)) {\n      favorite.forEach(f => {\n        if (f['category'] === 'Grammer') {\n          const s:any = storageSentences.filter((s:any) => s['id'] === f['id']);\n          if (s.length > 0) {\n            const d = s[0];\n            sentences.push(\n              {\n                id: d['id'],\n                year: d['year'],\n                category: d['category'],\n                part: d['part'],\n                sentence: d['sentence'],\n                sentenceTrans: d['sentenceTrans'],\n                dummyWord: d['dummyWord'],\n              }\n            );\n          }\n        }\n      });\n    }\n    return sentences;\n  }\n\n  static getFirstPart() {\n    return this.getGrammerData().reduce((val:string[], cur) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, [])[0];  \n  }\n\n  static getParts() {\n    return this.getGrammerData().reduce((val:string[], cur) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, []);  \n  }\n\n  static getCategories() {\n    const categories = this.getGrammerData().reduce((val:string[], cur) => {\n      if (!val.includes(cur.category)) {\n        val.push(cur.category);\n      }\n      return val;\n    }, []);\n\n    return categories.map(c => {\n      const parts = this.getGrammerData().reduce((val:string[], cur) => {\n//        const part = cur.part.replaceAll(c , '');\n        const part = cur.part;\n        if (!val.includes(part) && c === cur.category) {\n          val.push(part);\n        }\n        return val;\n      }, []);\n      return {\n        category: c,\n        parts: parts,\n      }\n    })\n  }\n\n  static getSentences() {\n    return this.getGrammerData().reduce((val:sentenceType[], cur) => {\n      const w:sentenceType = {\n        id: cur.id,\n        year: cur.year,\n        category: cur.category,\n        part: cur.part,\n        sentence: cur.sentence, \n        sentenceTrans: cur.sentenceTrans,\n        dummyWord: cur.dummyWord,\n      };\n\n      if (!val.some(v => \n        v.part === w.part && v.sentence === w.sentence)) {\n        val.push(w);\n      }\n      return val;\n    }, []);  \n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport { Container, List, ListItem, ListItemText, Slider } from '@material-ui/core';\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/GrammerPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport GrammerData from '../context/GrammerData';\nimport EnglishVoice from '../lib/EnglishVoice';\nimport { useSwipeable } from 'react-swipeable';\n\nconst GrammerPage:React.FC = () => {\n  const firstPart = localStorage.getItem('grammerCurrentPart') ?? GrammerData.getFirstPart();\n  const wIndex = () => {\n    const wi:number = localStorage.getItem('grammerWordIndex') ? Number(localStorage.getItem('grammerWordIndex')) : 0;\n    if (GrammerData.getSentences().filter(w => w.part === firstPart).length > wi) {\n      return 0;\n    }\n    return wi;\n  }\n  const [slides, setSlides] = useState(GrammerData.getSentences().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(wIndex);\n  const [currentPart, setCurrentPart] = useState<string>('');\n  const [answer, setAnswer] = useState<string[]>([]);\n  const [isAnsComplated, setIsAnsComplated] = useState<boolean>(false);\n  const [stockWords, setStockWords] = useState<string[]>([]);\n  const [ansWords, setAnsWords] = useState<string[]>([]);\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const i:number = wordIndex - 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n      setWordIndex(i);\n      setAnswer(s);\n      const w:string[] = s.slice();\n      w.push(slides[i].dummyWord.toLocaleLowerCase());\n      setStockWords(shuffle(w));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n      localStorage.setItem('grammerWordIndex', i.toString());\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n      setWordIndex(i);\n      setAnswer(s);\n      const w:string[] = s.slice();\n      w.push(slides[i].dummyWord.toLocaleLowerCase());\n      setStockWords(shuffle(w));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n      localStorage.setItem('grammerWordIndex', i.toString());\n    }\n  }\n\n  const changeCurrentPart = async (val: string) => {\n    if (currentPart !== val) {\n      let s:any = [];\n      if (val === 'favorite') {\n        s = await GrammerData.getFavoriteSentenceData();\n      } else {\n        s = await GrammerData.getSentences().filter(w => w.part === val);\n      }\n      setSlides(s)\n      setCurrentPart(val);\n      localStorage.setItem('grammerCurrentPart', val);\n      setWordIndex(0);\n      localStorage.setItem('grammerWordIndex', '0');\n\n      const a:string[] = s.length > 0 ? separateSentence(s[0].sentence) : [];\n      setAnswer(a);\n      const w:string[] = a.slice();\n      w.push(s.length > 0 ? s[0].dummyWord.toLocaleLowerCase(): '');\n      setStockWords(shuffle(w));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const moveAnsWords = (word: string, index: number) => {\n    const aw = ansWords;\n    const sw = stockWords.filter((v, i) => {\n      return i !== index;\n    });\n    aw.push(word);\n\n    setAnsWords(aw);\n    setStockWords(sw);\n\n    EnglishVoice.speech(word, 'en-US', 1);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK. ' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n      console.log('OK. ' + slides[wordIndex].sentence);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const moveStockWords = (word: string, index: number) => {\n    const sw = stockWords;\n    const aw = ansWords.filter((v, i) => {\n      return i !== index;\n    });\n    sw.push(word);\n\n    setStockWords(sw);\n    setAnsWords(aw);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK. ' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const separateSentence = (s:string) => {\n    return s.toLocaleLowerCase().slice(0, -1).split('  ');\n  }\n\n  const shuffle = (w:string[]) => {\n    return w.map(function (a) { return { weight: Math.random(), value: a } })\n    .sort(function (a, b) { return a.weight - b.weight })\n    .map(function (a) { return a.value })\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  useEffect(() => {\n    changeCurrentPart(firstPart);\n  }, []);\n\n  return (\n    <>\n      {\n        currentPart !== ''\n        &&\n        <SideMenu\n          categories={GrammerData.getCategories()}\n          parts={GrammerData.getParts()}\n          currentPart={currentPart}\n          changeCurrentPart={(val) => changeCurrentPart(val)}\n          speechSpeedRate={speechSpeedRate}\n          changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n        />\n      }\n      <Container>\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          isViewPrev={true}\n          isViewNext={true}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        {\n          slides.length == 0\n          &&\n          <p>no data</p>\n        }\n        {\n          slides.length > 0\n          &&\n          <>\n            <div {...swipeHandles}>\n              <Grammer\n                id={slides[wordIndex].id}\n                currentPart={currentPart}\n                answer={answer}\n                stockWords={stockWords}\n                ansWords={ansWords}\n                sentence={slides[wordIndex].sentence}\n                translate={slides[wordIndex].sentenceTrans}\n                speechSpeedRate={speechSpeedRate}\n                isAnsComplated={isAnsComplated}\n                moveAnsWords={(w, i) => moveAnsWords(w, i)}\n                moveStockWords={(w, i) => moveStockWords(w, i)}\n              />\n            </div>\n            <List component=\"nav\" aria-label=\"thirdry speechSpeed\">\n            <ListItem>\n              <ListItemText primary=\"voice speed\"/>\n                <Slider\n                  min={0.4}\n                  max={1}\n                  step={0.1}\n                  value={speechSpeedRate}\n                  aria-labelledby=\"speech-speed-rate\"\n                  valueLabelDisplay=\"auto\"\n                  onChange={(e, v) => {\n                    let rate:number = speechSpeedRate;\n                    if (typeof(v) ===  'number') {\n                      rate = v;\n                    }\n                    setSpeechSpeedRate(rate);\n                  }}\n                />\n              </ListItem>\n            </List>\n          </>\n        }\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerPage;","import React, { useRef, useEffect } from 'react';\nimport { Container, Button, Grid, List, ListItem, ListItemText, Slider, Typography, TextField } from '@material-ui/core';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport Favorite from '../Common/Favorite';\nimport EnglishVoice from '../../lib/EnglishVoice';\n\ninterface GrammerProps {\n  id: string;\n  currentPart: string;\n  sentence: string;\n  visibleSentence: boolean;\n  translate: string;\n  inputString: string;\n  speechSpeedRate: number;\n  isAnsComplated: boolean;\n  changeInputString: (val:string) => void;\n  changeIsAnsComplated: (val:boolean) => void;\n  changeVisibleSentence: (val:boolean) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const inputElement = useRef<HTMLElement>(null!) ;\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n          <br/>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Grid container style={{marginBottom: '1em'}}>\n          <Typography variant='body1' className={props.visibleSentence ? 'word-visible' : 'word-hidden'}>\n            {props.sentence}\n          </Typography>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-around\"\n          alignItems=\"flex-end\"\n        >\n          <Grid container direction=\"row\">\n            <TextField\n              inputRef={inputElement}\n              error={!props.isAnsComplated}\n              label= {props.isAnsComplated ? \"OK\" : \"input word\"}\n              fullWidth={true}\n              value={props.inputString}\n              variant=\"outlined\"\n              onChange={(o) => \n                {\n                  props.changeInputString(o.target.value);\n                  props.changeIsAnsComplated(props.sentence === o.target.value);\n                  if (props.sentence === o.target.value) {\n                    props.changeVisibleSentence(true);\n                    EnglishVoice.speech('OK. ' + props.sentence, 'en-US', props.speechSpeedRate);\n                  }\n                }\n              }\n            />\n          </Grid>\n        </Grid>\n        <hr/>\n        <Grid\n          container\n          direction=\"row\"\n          spacing={5}\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs={4}>\n            <Button\n              variant=\"outlined\"\n              onClick={() => {\n                EnglishVoice.speech(props.sentence, 'en-US', props.speechSpeedRate);\n                inputElement.current.focus();\n              }}\n            >\n              <VolumeUpIcon\n                fontSize='small'\n              />\n            </Button>\n          </Grid>\n          <Grid item xs={4}>\n            <Button\n              color=\"primary\"\n              variant=\"outlined\"\n              onClick={() => {\n                props.changeVisibleSentence(!props.visibleSentence)\n                inputElement.current.focus();\n              }}\n            >\n              <TranslateIcon/>\n          </Button>\n          </Grid>\n          <Grid item xs={4}>\n            <Favorite \n              category='GrammerWriting'\n              part={props.currentPart}\n              id={props.id}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","import React, { useState, useEffect } from 'react';\nimport { Container, List, ListItem, ListItemText, Slider } from '@material-ui/core';\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/GrammerWritingPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport GrammerData from '../context/GrammerData';\nimport { useSwipeable } from 'react-swipeable';\n\nconst GrammerWritingPage:React.FC = () => {\n  const firstPart = localStorage.getItem('grammerWritingCurrentPart') ?? GrammerData.getFirstPart();\n  const wIndex: number = localStorage.getItem('grammerWritingWordIndex') ? Number(localStorage.getItem('grammerWritingWordIndex')) : 0;\n  const [slides, setSlides] = useState(GrammerData.getSentences().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(wIndex);\n  const [currentPart, setCurrentPart] = useState<string>('');\n  const [isAnsComplated, setIsAnsComplated] = useState<boolean>(false);\n  const [inputString, setInputString] = useState<string>('');\n  const [visibleSentence, setVisibleSentence] = useState<boolean>(false);\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const i:number = wordIndex - 1;\n      setWordIndex(i);\n      localStorage.setItem('grammerWritingWordIndex', i.toString());\n      setIsAnsComplated(false);\n      setVisibleSentence(false);\n      setInputString('');\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      setWordIndex(i);\n      localStorage.setItem('grammerWritingWordIndex', i.toString());\n      setIsAnsComplated(false);\n      setVisibleSentence(false);\n      setInputString('');\n    }\n  }\n\n  const changeCurrentPart = async (val: string) => {\n    if (currentPart !== val) {\n      let s:any = [];\n      if (val === 'favorite') {\n        s = await GrammerData.getFavoriteSentenceData();\n      } else {\n        s = await GrammerData.getSentences().filter(w => w.part === val);\n      }\n      setSlides(s)\n      setCurrentPart(val);\n      localStorage.setItem('grammerWritingCurrentPart', val);\n      setWordIndex(0);\n      localStorage.setItem('grammerWritingWordIndex', '0');\n      setIsAnsComplated(false);\n      setInputString('');\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  const changeInputString = (val: string) => {\n    setInputString(val);\n  }\n\n  const changeIsAnsComplated = (val: boolean) => {\n    setIsAnsComplated(val);\n  }\n\n  const changeVisibleSentence = (val: boolean) => {\n    setVisibleSentence(val);\n  }\n\n  useEffect(() => {\n    const setPart = async () => {\n      let part:string = '';\n      part = await localStorage.getItem('grammerWritingCurrentPart') ?? GrammerData.getFirstPart();\n      await changeCurrentPart(part);\n    };\n    setPart();\n  }, []);\n\n  return (\n    <>\n      {\n        currentPart !== ''\n        &&\n        <SideMenu\n          categories={GrammerData.getCategories()}\n          parts={GrammerData.getParts()}\n          currentPart={currentPart}\n          changeCurrentPart={(val) => changeCurrentPart(val)}\n          speechSpeedRate={speechSpeedRate}\n          changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n        />\n      }\n      <Container>\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          isViewPrev={true}\n          isViewNext={true}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        {\n          slides.length == 0\n          &&\n          <p>no data</p>\n        }\n        {\n          slides.length > 0\n          &&\n          <>\n            <div {...swipeHandles}>\n              <Grammer\n                id={slides[wordIndex].id}\n                currentPart={currentPart}\n                sentence={slides[wordIndex].sentence.replaceAll('  ', ' ')}\n                visibleSentence={visibleSentence}\n                inputString={inputString}\n                translate={slides[wordIndex].sentenceTrans}\n                speechSpeedRate={speechSpeedRate}\n                isAnsComplated={isAnsComplated}\n                changeInputString={(v) => changeInputString(v)}\n                changeIsAnsComplated={(v) => changeIsAnsComplated(v)}\n                changeVisibleSentence={(v) => changeVisibleSentence(v)}\n              />\n            </div>\n            <List component=\"nav\" aria-label=\"thirdry speechSpeed\">\n              <ListItem>\n                <ListItemText primary=\"voice speed\"/>\n                <Slider\n                  min={0.1}\n                  max={1}\n                  step={0.1}\n                  value={speechSpeedRate}\n                  aria-labelledby=\"speech-speed-rate\"\n                  valueLabelDisplay=\"auto\"\n                  onChange={(e, v) => {\n                    let rate:number = speechSpeedRate;\n                    if (typeof(v) ===  'number') {\n                      rate = v;\n                    }\n                    setSpeechSpeedRate(rate);\n                  }}\n                />\n              </ListItem>\n            </List>\n          </>\n        }\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerWritingPage;","import React, { useRef, useEffect } from 'react';\nimport { Container, Grid, Typography, TextField } from '@material-ui/core';\nimport Favorite from '../Common/Favorite';\nimport EnglishVoice from '../../lib/EnglishVoice';\n\ninterface GrammerProps {\n  id: string;\n  currentPart: string;\n  sentence: string;\n  translate: string;\n  inputString: string;\n  speechSpeedRate: number;\n  isAnsComplated: boolean;\n  changeInputString: (val:string) => void;\n  changeIsAnsComplated: (val:boolean, s:string) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const inputElement = useRef<HTMLElement>(null!) ;\n\n  useEffect(() => {\n    inputElement.current.focus();\n  })\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n          <br/>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-around\"\n          alignItems=\"flex-end\"\n        >\n          <Grid container direction=\"row\">\n            <TextField\n              inputRef={inputElement}\n              error={!props.isAnsComplated}\n              label= {props.isAnsComplated ? \"OK\" : \"input word\"}\n              fullWidth={true}\n              value={props.inputString}\n              variant=\"outlined\"\n              onChange={async (o) => \n                {\n                  props.changeInputString(o.target.value);\n                  await props.changeIsAnsComplated(props.sentence === o.target.value, o.target.value);\n                  if (props.sentence === o.target.value) {\n                    await EnglishVoice.speech('OK. ' + props.sentence, 'en-US', props.speechSpeedRate);\n                  }\n                }\n              }\n            />\n          </Grid>\n        </Grid>\n        <hr/>\n        <Grid\n          container\n          direction=\"row\"\n          spacing={5}\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs={4}>\n            <Favorite \n              category='GrammerWriting'\n              part={props.currentPart}\n              id={props.id}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","import React, { useState, useEffect } from 'react';\nimport { Container, Grid, Typography } from '@material-ui/core';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/GrammerWritingTestPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport GrammerData from '../context/GrammerData';\nimport EnglishVoice from '../lib/EnglishVoice';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport arrayShuffle from 'array-shuffle';\n\ninterface answerType {\n  part: string,\n  id: string,\n  sentence: string,\n  inputString: string,\n  isCorrect: boolean,\n}\n\nconst useStyles = makeStyles((theme) => ({\n  result: {\n    paddingBottom: '1rem',\n    borderBottom: '1px solid #aaa'\n  }\n}));\n\nconst GrammerWritingTestPage:React.FC = () => {\n  const timerLimit = 30;\n  const firstPart = localStorage.getItem('grammerWritingCurrentPart') ?? GrammerData.getFirstPart();\n  const wIndex: number = localStorage.getItem('grammerWritingWordIndex') ? Number(localStorage.getItem('grammerWritingWordIndex')) : 0;\n  const [slides, setSlides] = useState(arrayShuffle(GrammerData.getSentences().filter(w => w.part === firstPart)));\n  const [wordIndex, setWordIndex] = useState<number>(wIndex);\n  const [currentPart, setCurrentPart] = useState<string>('');\n  const [isAnsComplated, setIsAnsComplated] = useState<boolean>(false);\n  const [inputString, setInputString] = useState<string>('');\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n  const [timer, setTimer] = useState<number>(0);\n  const [answer, setAnswer] = useState<answerType[]>([]);\n  const [isEndAnswer, setIsEndAnswer] = useState<boolean>(false);\n\n  const slidePrev = () => {\n    //テストのため戻るボタンは無効に\n  }\n\n  const slideNext = (ans:answerType[] | null = null) => {\n    if (ans !== null) {\n      const answerWk:answerType[] = ans!.map(a => {\n        if (a.part === currentPart && a.id === slides[wordIndex].id) {\n          return ({\n            part: a.part,\n            id: a.id,\n            sentence: a.sentence,\n            inputString: inputString,\n            isCorrect: a.isCorrect,\n          });\n        }\n        return a;\n      })\n      setAnswer(answerWk);\n      sessionStorage.setItem('grammerWritingAnswer', JSON.stringify(answerWk));\n    }\n\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      setWordIndex(i);\n      localStorage.setItem('grammerWritingTestWordIndex', i.toString());\n      setIsAnsComplated(false);\n      setInputString('');\n      setTimer(0);\n    } else {\n      setIsEndAnswer(true);\n    }\n  }\n\n\n  const changeCurrentPart = async (val: string) => {\n    if (currentPart !== val) {\n      localStorage.setItem('grammerWritingCurrentPart', val);\n      setWordIndex(0);\n      localStorage.setItem('grammerWritingWordIndex', '0');\n      setIsAnsComplated(false);\n      setInputString('');\n      setTimer(0);\n      setAnswer([]);\n      setIsEndAnswer(false);\n      let s:any = [];\n      if (val === 'favorite') {\n        s = await GrammerData.getFavoriteSentenceData();\n      } else {\n        s = await GrammerData.getSentences().filter(w => w.part === val);\n      }\n      setSlides(arrayShuffle(s));\n      setCurrentPart(val);\n      sessionStorage.setItem('grammerWritingAnswer', '');\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const changeInputString = (val: string) => {\n    setInputString(val);\n  }\n\n  const changeIsAnsComplated = (val: boolean, is: string) => {\n    let ans:answerType[] = answer;\n    if (answer.filter(a => (a.part === currentPart && a.id === slides[wordIndex].id)).length >= 1) {\n      ans = ans.map(a => {\n        if (a.part === currentPart && a.id === slides[wordIndex].id) {\n          return ({\n            part: a.part,\n            id: a.id,\n            sentence: a.sentence,\n            inputString: is,\n            isCorrect: val\n          });\n        }\n        return a;\n      })\n    } else {\n      ans.push({\n        part: currentPart,\n        id: slides[wordIndex].id,\n        sentence: slides[wordIndex].sentence.replaceAll('  ', ' '),\n        inputString: '',\n        isCorrect: val,\n      });\n    }\n    setAnswer(ans);\n    sessionStorage.setItem('grammerWritingAnswer', JSON.stringify(ans));\n\n    setIsAnsComplated(val);\n    if (val) {\n      EnglishVoice.speech('OK. '+slides[wordIndex].sentence, 'en-US', 1);\n      slideNext(ans);\n    }\n  }\n\n  useEffect(() => {\n    const setPart = async () => {\n      let part:string = '';\n      part = await localStorage.getItem('grammerWritingCurrentPart') ?? GrammerData.getFirstPart();\n      await changeCurrentPart(part);\n    };\n    setPart();\n    const id = setInterval(() => {\n      setTimer(t => t + 1);\n    }, 1000);\n    return () => clearInterval(id);\n  }, []);\n\n  useEffect(() => {\n    let ans:answerType[] = answer;\n    if (answer.filter(a => (a.part === currentPart && a.id === slides[wordIndex].id)).length == 0) {\n      ans.push({\n        part: currentPart,\n        id: slides[wordIndex].id,\n        sentence: slides[wordIndex].sentence.replaceAll('  ', ' '),\n        inputString: '',\n        isCorrect: false,\n      });\n      setAnswer(ans);\n      sessionStorage.setItem('grammerWritingAnswer', JSON.stringify(ans));\n    }\n\n    if (timer == timerLimit && !isEndAnswer) {\n      if (wordIndex < slides.length-1) {\n        EnglishVoice.speech('next', 'en-US', 1);\n      } else {\n        setIsEndAnswer(true);\n        EnglishVoice.speech('end', 'en-US', 1);\n      }\n    }\n    if (timer > (timerLimit+2) && !isEndAnswer) {\n      slideNext(ans);\n    }\n  });\n\n  const classes = useStyles();\n  return (\n    <>\n      {\n        currentPart !== ''\n        &&\n        <SideMenu\n          categories={GrammerData.getCategories()}\n          parts={GrammerData.getParts()}\n          currentPart={currentPart}\n          changeCurrentPart={(val) => changeCurrentPart(val)}\n          speechSpeedRate={speechSpeedRate}\n          changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n        />\n      }\n      <Container>\n        {\n          !isEndAnswer\n          &&\n          <>\n            <Paginate\n              index={wordIndex}\n              maxPage={slides.length}\n              isViewPrev={false}\n              isViewNext={true}\n                  onClickPrev={(slidePrev)}\n              onClickNext={() => slideNext()}\n            />\n            <hr/>\n            {\n              slides.length == 0\n              &&\n              <p>no data</p>\n            }\n            {\n              slides.length > 0\n              &&\n              <Grammer\n                id={slides[wordIndex].id}\n                currentPart={currentPart}\n                sentence={slides[wordIndex].sentence.replaceAll('  ', ' ')}\n                inputString={inputString}\n                translate={slides[wordIndex].sentenceTrans}\n                speechSpeedRate={speechSpeedRate}\n                isAnsComplated={isAnsComplated}\n                changeInputString={(v) => changeInputString(v)}\n                changeIsAnsComplated={(v:boolean, s:string) => changeIsAnsComplated(v, s)}\n              />\n            }\n            {\n              timer >= timerLimit\n              &&\n              <p>time over</p>\n            }\n            {\n              timer < timerLimit\n              &&\n              <p>Time: {timerLimit-timer}</p>\n            }\n          </>\n        }\n        {\n          isEndAnswer\n          &&\n          <>\n            <h3>result</h3>\n            <div style={{height:'80h', overflowY:'auto'}}>\n              {\n                answer.map(a => \n                  <Grid container className={classes.result}>\n                    <Grid item xs={2}>\n                    <Typography variant={'body1'}>\n                      {\n                        a.isCorrect ?\n                        <RadioButtonUncheckedIcon color={'primary'}/>\n                        :\n                        <ClearIcon color={'error'}/>\n                      } \n                    </Typography>\n                    </Grid>\n                    <Grid item xs={10}>\n                      <Typography variant={'body1'}>{a.sentence}</Typography>\n                      <Typography color={'error'}>{!a.isCorrect ? a.inputString+'': ''}&nbsp;</Typography>\n                    </Grid>\n                  </Grid>\n                )\n              }\n            </div>\n          </>\n        }\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerWritingTestPage;","import React from 'react';\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport * as colors from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport 'fontsource-roboto';\nimport GlobalMenu from './components/GlobalMenu';\nimport MainMenuPage from './pages/MainMenuPage';\nimport WordPage from './pages/WordPage';\nimport WordTransPage from './pages/WordTransPage';\nimport WordGrammerPage from './pages/WordGrammerPage';\nimport GrammerPage from './pages/GrammerPage';\nimport GrammerWritingPage from './pages/GrammerWritingPage';\nimport GrammerWritingTestPage from './pages/GrammerWritingTestPage';\nimport EnglishData from './context/EnglishData';\nimport GrammerData from './context/GrammerData';\n\ninterface AppProps {\n}\n\ninterface AppState {\n  currentYear: string,\n  currentPage: pageNames,\n  isLoaded: number,\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    let sPage:pageNames = 'WordPage';\n    switch (localStorage.getItem('currentPage')) {\n      case 'WordPage':  sPage = 'WordPage';\n            break;\n      case 'GrammerPage': sPage = 'GrammerPage';\n            break;\n      case 'WordGrammerPage': sPage = 'WordGrammerPage';\n            break;\n      case 'WordTransPage': sPage = 'WordTransPage';\n            break;\n      case 'GrammerWritingPage': sPage = 'GrammerWritingPage';\n            break;\n      case 'GrammerWritingTestPage': sPage = 'GrammerWritingTestPage';\n            break;\n      default: sPage = 'WordPage';\n    }\n    this.state = {\n      currentYear: '',\n      currentPage: sPage,\n      isLoaded: 0,\n    }\n  }\n\n  async componentDidMount() {\n    await EnglishData.setWordData();\n    await GrammerData.setGrammerData();\n    await this.setState({isLoaded: 1});\n  }\n\n  render () {\n    const theme = createMuiTheme({\n      palette: {\n        primary: {\n          main: colors.blue[800],\n        },\n        type: 'dark',\n      },\n    });\n\n    const changePage = async (val: pageNames) => {\n      this.setState({\n        currentPage: val\n      })\n      if (val === 'WordPage') {\n        await EnglishData.setWordData(this.state.currentYear);\n      } else if (val === 'WordTransPage') {\n        await GrammerData.setGrammerData(this.state.currentYear);\n      }\n    }\n\n    const changeCureentYear = async (year: string) => {\n      await EnglishData.setWordData(year);\n      await GrammerData.setGrammerData(year);\n      await this.setState({\n        currentYear: year,\n        isLoaded: 2\n      })\n    }\n\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        {\n          this.state.isLoaded === 0\n          &&\n          <>\n            <div style={\n              {\n                height: '100vh',\n                width: '100vw',\n                display: 'table-cell',\n                verticalAlign: 'middle',\n                textAlign: 'center'\n              }\n            }>\n              <CircularProgress />\n              <p>now loading...</p>\n            </div>\n            </>\n          }\n        {\n          this.state.isLoaded === 1\n          &&\n            <MainMenuPage \n              onChange={changeCureentYear}\n            />\n          }\n        {\n          this.state.isLoaded === 2\n          &&\n          <>\n          {\n            this.state.currentPage === 'WordPage'\n            &&\n            <WordPage />\n          }\n          {\n            this.state.currentPage === 'WordTransPage'\n            &&\n            <WordTransPage />\n          }\n          {\n            this.state.currentPage === 'WordGrammerPage'\n            &&\n            <WordGrammerPage />\n          }\n          {\n            this.state.currentPage === 'GrammerPage'\n            &&\n            <GrammerPage />\n          }\n          {\n            this.state.currentPage === 'GrammerWritingPage'\n            &&\n            <GrammerWritingPage />\n          }\n          {\n            this.state.currentPage === 'GrammerWritingTestPage'\n            &&\n            <GrammerWritingTestPage />\n          }\n\n          <GlobalMenu\n              currentPage={this.state.currentPage}\n              changeCurrentPage= {(val) => changePage(val)}\n          />\n          </>\n        }\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}