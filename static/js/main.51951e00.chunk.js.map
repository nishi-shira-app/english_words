{"version":3,"sources":["EnglishData.ts","components/Word.tsx","components/Pagination.tsx","components/Menu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EnglishData","WORDS","Word","style","display","width","height","voice","window","speechSynthesis","getVoices","filter","lang","partOfSpeech","this","props","length","className","Container","maxWidth","onClick","trans","visibleTrans","word","Grid","container","direction","spacing","justify","alignItems","item","xs","Button","variant","color","utter","SpeechSynthesisUtterance","text","speak","React","Pagination","onClickPrev","onClickNext","Menu","useState","menuToggle","setMenuToggle","checkA","setCheckA","themeMode","setThemeMode","console","log","IconButton","aria-label","edge","Drawer","anchor","open","onClose","List","ListItem","Switch","checked","onChange","name","inputProps","App","state","slides","wordIndex","visibleSentenceTrans","theme","createMuiTheme","palette","primary","main","colors","type","ThemeProvider","CssBaseline","setState","sentence","sentenceTrans","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAAqBA,E,kCAAAA,EACHC,MAChB,CACE,CACE,KAAQ,IACR,aAAgB,eAChB,MAAS,eACT,SAAY,gBACZ,cAAiB,4EAEnB,CACE,KAAQ,KACR,aAAgB,eAChB,MAAS,eACT,SAAY,qBACZ,cAAiB,sEAEnB,CACE,KAAQ,KACR,aAAgB,eAChB,MAAS,eACT,SAAY,uBACZ,cAAiB,sEAEnB,CACE,KAAQ,OACR,aAAgB,eAChB,MAAS,eACT,SAAY,iBACZ,cAAiB,0DAEnB,CACE,KAAQ,KACR,aAAgB,eAChB,MAAS,0JACT,SAAY,6BACZ,cAAiB,oGAEnB,CACE,KAAQ,KACR,aAAgB,qBAChB,MAAS,mIACT,SAAY,oCACZ,cAAiB,+E,mCCkCRC,E,4JAhEb,WAAW,IAAD,OACFC,EAA6B,CACjCC,QAAS,eACTC,MAAO,OACPC,OAAQ,OAKJC,EAFQC,OAAOC,gBACAC,YAAYC,QAAO,SAAAJ,GAAK,MAAmB,UAAfA,EAAMK,QAClC,GAEfC,EAAeC,KAAKC,MAAMF,aAAaG,OAAS,IAAIF,KAAKC,MAAMF,aAAa,IAAM,GAExF,OACE,qBAAKI,UAAU,YAAf,SACE,eAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,qBAAKC,QAAS,kBAAM,EAAKL,MAAMK,WAA/B,SACE,oBAAGH,UAAU,OAAb,UAAqBH,KAAKC,MAAMM,MAAM,sBAAMJ,UAAU,eAAhB,SAAgCJ,SAExE,qBACEI,UAAWH,KAAKC,MAAMO,aADxB,SAGGR,KAAKC,MAAMQ,OAEd,eAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAS,EACTC,QAAQ,SACRC,WAAW,SALb,UAOE,cAACL,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACE7B,MAAOA,EACP8B,QAAQ,WACRC,MAAM,UACNd,QAAS,kBAAM,EAAKL,MAAMK,WAJ5B,uBASF,cAACI,EAAA,EAAD,CAAMM,MAAI,EAACC,GAAI,EAAf,SACE,cAACC,EAAA,EAAD,CACE7B,MAAOA,EACP8B,QAAQ,WACRC,MAAM,YACNd,QAAS,WACP,IAAMe,EAAQ,IAAIC,yBAClBD,EAAME,KAAO,EAAKtB,MAAMQ,KACxBY,EAAMvB,KAAO,QACbuB,EAAM5B,MAAQA,EACdC,OAAOC,gBAAgB6B,MAAMH,IATjC,gC,GA3CKI,aCkBJC,EA1BkE,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YAC9F,OACE,eAAClB,EAAA,EAAD,CACAC,WAAS,EACTC,UAAU,MACVE,QAAQ,eACRC,WAAW,WAJX,UAME,cAACG,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNd,QAAS,kBAAMqB,KAHjB,kBAOA,cAACT,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNd,QAAS,kBAAMsB,KAHjB,sB,8ECwCSC,EAvDQ,SAAC,EAAD,GAAa,oCACEC,oBAAS,GADZ,mBAC1BC,EAD0B,KACdC,EADc,OAELF,oBAAS,GAFJ,mBAE1BG,EAF0B,KAElBC,EAFkB,OAGCJ,mBAAS,QAHV,mBAG1BK,EAH0B,KAGfC,EAHe,KAoBjC,OAFAC,QAAQC,IAAIH,GAGV,qCACE,cAACI,EAAA,EAAD,CACEnB,MAAM,UACNoB,aAAW,cACXC,KAAK,MACLnC,QAAS,WApBb0B,GAAeD,MAuBb,cAACW,EAAA,EAAD,CACEC,OAAU,OACVC,KAAQb,EACRc,QAAW,kBAAMb,GAAc,IAHjC,SAKE,8BACE,cAACc,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,wBAEE,cAACC,EAAA,EAAD,CACEP,KAAK,MACLQ,QAAShB,EACTiB,SAhCU,WACtBhB,GAAWD,GAETG,EADEH,EACW,QAEA,SA4BHb,MAAM,UACN+B,KAAK,SACLC,WAAY,CAAE,aAAc,2CAMtC,cAAC,IAAD,QCmDSC,E,kDA7Eb,WAAYpD,GAAkB,IAAD,8BAC3B,cAAMA,IAEDqD,MAAQ,CACXC,OAAQrE,EAAYC,MACpBqE,UAAW,EACXhD,aAAc,mBACdiD,qBAAsB,oBAPG,E,0CAW7B,WAAW,IAAD,eACFC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAMC,IAAY,MAEpBC,KAAM,UAwBJT,EAAM,UAAGvD,KAAKsD,MAAMC,cAAd,QAAwB,GAC9BC,EAAS,UAAGxD,KAAKsD,MAAME,iBAAd,QAA2B,EACpChD,EAAY,UAAGR,KAAKsD,MAAM9C,oBAAd,QAA8B,mBAC1CiD,EAAoB,UAAGzD,KAAKsD,MAAMG,4BAAd,QAAsC,mBAEhE,OACE,eAACQ,EAAA,EAAD,CAAeP,MAAOA,EAAtB,UACE,cAACQ,EAAA,EAAD,IACA,cAAC,EAAD,IACA,eAAC9D,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,cAAC,EAAD,CACEI,KAAM8C,EAAOC,GAAW/C,KACxBV,aAAcwD,EAAOC,GAAWzD,aAChCQ,MAAOgD,EAAOC,GAAWjD,MACzBC,aAAgBA,EAChBF,QAAW,kBAAM,EAAK6D,SAAS,CAAC3D,aAAa,yBAE/C,uBACA,cAAC,EAAD,CACEC,KAAM8C,EAAOC,GAAWY,SACxBrE,aAAa,GACbQ,MAAOgD,EAAOC,GAAWa,cACzB7D,aAAgBiD,EAChBnD,QAAW,kBAAM,EAAK6D,SAAS,CAACV,qBAAqB,yBAEvD,uBACA,cAAC,EAAD,CACE9B,YA/CU,WACZ,EAAK2B,MAAME,UAAY,GACzB,EAAKW,SAAS,CACZX,UAAW,EAAKF,MAAME,UAAY,EAClChD,aAAc,mBACdiD,qBAAsB,sBA2CpB7B,YAtCU,WACZ,EAAK0B,MAAME,UAAY,EAAKF,MAAMC,OAAOrD,OAAO,GAClD,EAAKiE,SAAS,CACZX,UAAW,EAAKF,MAAME,UAAY,EAClChD,aAAc,mBACdiD,qBAAsB,kC,GArCdhC,IAAM6C,WCbTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.51951e00.chunk.js","sourcesContent":["export default class EnglishData {\n  static readonly WORDS = \n  [\n    {\n      \"word\": \"I\",\n      \"partOfSpeech\": \"名詞\",\n      \"trans\": \"私は\",\n      \"sentence\": \"I have a pen.\",\n      \"sentenceTrans\": \"私はペンを持っています。\"\n    },\n    {\n      \"word\": \"my\",\n      \"partOfSpeech\": \"名詞\",\n      \"trans\": \"私の\",\n      \"sentence\": \"You are my friend.\",\n      \"sentenceTrans\": \"あなたは私の友達です。\"\n    },\n    {\n      \"word\": \"me\",\n      \"partOfSpeech\": \"名詞\",\n      \"trans\": \"私を\",\n      \"sentence\": \"Ken doesn't know me.\",\n      \"sentenceTrans\": \"ケンは私を知りません。\"\n    },\n    {\n      \"word\": \"play\",\n      \"partOfSpeech\": \"動詞\",\n      \"trans\": \"する\",\n      \"sentence\": \"I play tennis.\",\n      \"sentenceTrans\": \"私はテニスをする。\"\n    },\n    {\n      \"word\": \"so\",\n      \"partOfSpeech\": \"副詞\",\n      \"trans\": \"そのように，このように，そのとおりに，このとおりに.\",\n      \"sentence\": \"Please don't walk so fast!\",\n      \"sentenceTrans\": \"そんなに速く歩かないでください！\"\n    },\n    {\n      \"word\": \"at\",\n      \"partOfSpeech\": \"前置詞\",\n      \"trans\": \"[場所・位置を表わして]…に，…で，…において\",\n      \"sentence\": \"I got up at 5 o’clock today.\",\n      \"sentenceTrans\": \"私は今日 5時に起きました。\"\n    }\n  ]\n}","import * as React from 'react';\nimport { Container, Button, Grid } from '@material-ui/core';\nimport 'fontsource-roboto';\n\ninterface WordProps {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    visibleTrans: string;\n    onClick: () => void;\n}\n\nclass Word extends React.Component<WordProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n\n    const synth = window.speechSynthesis;\n    const voices = synth.getVoices().filter(voice => voice.lang === 'en-US');\n    const voice = voices[0];\n\n    const partOfSpeech = this.props.partOfSpeech.length ? '['+this.props.partOfSpeech+']' : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <div onClick={() => this.props.onClick()}>\n            <p className=\"word\">{this.props.trans}<span className=\"partOfSpeech\">{partOfSpeech}</span></p>\n          </div>\n          <div\n            className={this.props.visibleTrans}\n          >\n            {this.props.word}\n          </div>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => this.props.onClick()}\n              >\n                english\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                color=\"secondary\"\n                onClick={() => {\n                  const utter = new SpeechSynthesisUtterance();\n                  utter.text = this.props.word;\n                  utter.lang = \"en-US\";\n                  utter.voice = voice;\n                  window.speechSynthesis.speak(utter);\n                }}\n              >\n                play\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Word;","import * as React from 'react';\nimport { Button, Grid } from '@material-ui/core';\nimport 'fontsource-roboto';\n\nconst Pagination: React.FC<{onClickPrev: () => void, onClickNext: () => void}> = ({onClickPrev, onClickNext}) => {\n  return (\n    <Grid\n    container\n    direction=\"row\"\n    justify=\"space-around\"\n    alignItems=\"flex-end\"\n    >\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => onClickPrev()}\n      >\n        Prev\n      </Button> \n      <Button \n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => onClickNext()}\n      >\n        Next\n      </Button>\n    </Grid>\n  );\n}\n\nexport default Pagination;","import React, { useState } from 'react';\nimport { Drawer, Switch, IconButton, List, ListItem } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst Menu: React.FC = ({}, {}) => {\n  const [menuToggle, setMenuToggle] = useState(false);\n  const [checkA, setCheckA] = useState(false);\n  const [themeMode, setThemeMode] = useState('dark');\n\n  const toggleDrawer = () => {\n    setMenuToggle(!menuToggle);\n  };\n\n  const changeThemeMode = () => {\n    setCheckA(!checkA);\n    if (checkA) {\n      setThemeMode('light');\n    } else {\n      setThemeMode('dark');\n    }\n  }\n\n  console.log(themeMode);\n\n  return (\n    <>\n      <IconButton\n        color=\"inherit\"\n        aria-label=\"open drawer\"\n        edge=\"end\"\n        onClick={() => toggleDrawer()}\n      >\n    </IconButton>\n      <Drawer\n        anchor = {'left'}\n        open = {menuToggle}\n        onClose = {() => setMenuToggle(false)}\n      >\n        <div>\n          <List>\n            <ListItem>\n              Theme Mode\n              <Switch\n                edge=\"end\"\n                checked={checkA}\n                onChange={changeThemeMode}\n                color=\"primary\"\n                name=\"checkA\"\n                inputProps={{ 'aria-label': 'switch-list-label-theme-mode' }}\n              />\n            </ListItem>\n          </List>\n        </div>\n      </Drawer>\n      <MenuIcon />\n    </>\n  );\n}\n\nexport default Menu;","import React from 'react';\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { Container } from '@material-ui/core';\nimport * as colors from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport EnglishData from './EnglishData';\nimport 'fontsource-roboto';\nimport Word from './components/Word';\nimport PaginateComponent from './components/Pagination';\nimport Menu from './components/Menu';\n\ninterface AppProps {\n}\n\ninterface AppState {\n  slides: {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    sentence: string;\n    sentenceTrans: string;\n  }[];\n  wordIndex: number;\n  visibleTrans: string;\n  visibleSentenceTrans: string;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    \n    this.state = {\n      slides: EnglishData.WORDS,\n      wordIndex: 1,\n      visibleTrans: 'translate-hidden',\n      visibleSentenceTrans: 'translate-hidden'\n    }\n  }\n\n  render () {\n    const theme = createMuiTheme({\n      palette: {\n        primary: {\n          main: colors.blue[800],\n        },\n        type: \"dark\",\n      },\n    });\n\n    const slidePrev = () => {\n      if (this.state.wordIndex > 1) {\n        this.setState({\n          wordIndex: this.state.wordIndex - 1,\n          visibleTrans: 'translate-hidden',\n          visibleSentenceTrans: 'translate-hidden'\n        })\n      }\n    }\n  \n    const slideNext = () => {\n      if (this.state.wordIndex < this.state.slides.length-1) {\n        this.setState({\n          wordIndex: this.state.wordIndex + 1,\n          visibleTrans: 'translate-hidden',\n          visibleSentenceTrans: 'translate-hidden'\n        })\n      }\n    }\n    \n    const slides = this.state.slides ?? [] ;\n    const wordIndex = this.state.wordIndex ?? 0;\n    const visibleTrans = this.state.visibleTrans ?? 'translate-hidden';\n    const visibleSentenceTrans = this.state.visibleSentenceTrans ?? 'translate-hidden';\n\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Menu/>\n        <Container maxWidth=\"sm\">\n          <Word\n            word={slides[wordIndex].word}\n            partOfSpeech={slides[wordIndex].partOfSpeech}\n            trans={slides[wordIndex].trans}\n            visibleTrans = {visibleTrans}\n            onClick = {() => this.setState({visibleTrans:'translate-visible'})}\n          />\n          <hr/>\n          <Word\n            word={slides[wordIndex].sentence}\n            partOfSpeech=\"\"\n            trans={slides[wordIndex].sentenceTrans}\n            visibleTrans = {visibleSentenceTrans}\n            onClick = {() => this.setState({visibleSentenceTrans:'translate-visible'})}\n          />\n          <hr/>\n          <PaginateComponent\n            onClickPrev={slidePrev}\n            onClickNext={slideNext}\n          />\n        </Container>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}