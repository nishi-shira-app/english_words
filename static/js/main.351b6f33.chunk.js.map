{"version":3,"sources":["components/GlobalMenu.tsx","context/EnglishData.ts","lib/EnglishVoice.ts","components/WordPage/Word.tsx","components/WordPage/Plural.tsx","components/WordPage/Sentence.tsx","components/Pagination.tsx","components/Common/Favorite.tsx","components/SideMenu.tsx","pages/WordPage.tsx","components/WordTransPage/Word.tsx","pages/WordTransPage.tsx","components/WordGrammerPage/Grammer.tsx","pages/WordGrammerPage.tsx","components/GrammerPage/Grammer.tsx","context/GrammerData.ts","pages/GrammerPage.tsx","components/GrammerWritingPage/Grammer.tsx","pages/GrammerWritingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalMenu","props","BottomNavigation","showLabels","style","position","bottom","width","value","currentPage","onChange","event","newValue","changeCurrentPage","localStorage","setItem","BottomNavigationAction","label","icon","EnglishData","words","axios","get","then","response","Array","isArray","data","values","responseWords","shift","forEach","w","push","id","category","part","word","plural","partOfSpeech","trans","sentence","sentenceTrans","sessionStorage","JSON","stringify","catch","storageWords","getItem","length","parse","favorite","sWords","f","s","filter","this","getWordData","reduce","val","cur","includes","some","v","EnglishVoice","text","lang","rate","voice","window","speechSynthesis","getVoices","utter","SpeechSynthesisUtterance","speak","Word","wordInputElement","React","current","focus","display","height","className","Container","maxWidth","Grid","container","item","xs","Typography","variant","Avatar","component","substr","visibleWord","direction","TextField","inputRef","error","isInputWordCompleted","fullWidth","inputWordString","o","changeInputWord","target","toLowerCase","changeInputWordCompleted","onClick","speech","spacing","justify","alignItems","Button","color","Plural","visiblePlural","isInputPluralCompleted","inputPluralString","changeInputPlural","changeInputPluralCompleted","Sentence","Box","visibleSentence","m","fontSize","speechSpeedRate","Pagination","size","onClickPrev","disabled","index","onClickNext","maxPage","Favorite","useState","isFavorite","setIsFavorite","checkIsFavorite","a","setFavorite","isF","concat","useEffect","isFa","SideMenu","menuToggle","setMenuToggle","listOpen","setListOpen","categories","parts","drawerWidth","vals","c","currentPart","useStyles","makeStyles","theme","createStyles","header","backgroundColor","marginBottom","open","close","closeIcon","marginTop","marginLeft","hide","list","paddingLeft","changeCategoryMenu","splice","classes","Toolbar","noWrap","flexGrow","textAlign","IconButton","aria-label","edge","Drawer","anchor","onClose","List","map","ListItem","button","ListItemText","primary","Collapse","in","timeout","unmountOnExit","disablePadding","p","i","changeCurrentPart","replaceAll","ListItemIcon","Divider","Slider","min","max","step","aria-labelledby","valueLabelDisplay","e","changeSpeechSpeedRate","WordPage","slidePrev","wordIndex","newIndex","setWordIndex","toString","setVisibleWord","setVisiblePlural","setVisibleSentence","setIsInputWordCompleted","setInputWordString","setInputPluralString","firstPart","getFirstPart","wIndex","Number","slides","setSlides","setCurrentPart","setIsInputPluralCompleted","setSpeechSpeedRate","slideNext","getFavoriteWordData","swipeHandles","useSwipeable","onSwipedLeft","absX","onSwipedRight","preventDefaultTouchmoveEvent","trackMouse","getParts","WordTransPage","Grammer","stockWords","ansWords","lastChar","buttonStyle","minWidth","textTransform","margin","wordsStyle","minHeight","translate","isAnsComplated","moveStockWords","moveAnsWords","GrammerPage","getSentences","toLocaleLowerCase","slice","split","answer","setAnswer","setIsAnsComplated","weight","Math","random","sort","b","setStockWords","setAnsWords","separateSentence","shuffle","aw","sw","every","paddingBottom","borderTop","GrammerData","sentences","dummyWord","storageSentences","sSentences","d","getGrammerData","getFavoriteSentenceData","getCategories","inputElement","useRef","inputString","changeInputString","changeIsAnsComplated","changeVisibleSentence","setInputString","App","sPage","state","isLoaded","setWordData","setGrammerData","setState","createMuiTheme","palette","main","colors","type","changePage","ThemeProvider","CssBaseline","verticalAlign","CircularProgress","WordGrammerPage","GrammerWritingPage","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.351b6f33.chunk.js","sourcesContent":["import React from 'react';\nimport { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\n\n\ninterface GlobalMenuProps {\n  currentPage: string,\n  changeCurrentPage: (val:pageNames) => void\n}\n\nconst GlobalMenu:React.FC<GlobalMenuProps> = props => {\n\n  const style:React.CSSProperties = {\n    position:'fixed',\n    bottom:0,\n    width: '100%',\n  }\n\n  return (\n    <BottomNavigation\n      showLabels\n      style={style}\n      value={props.currentPage}\n      onChange={(event, newValue:pageNames) => {\n        props.changeCurrentPage(newValue);\n        localStorage.setItem('currentPage', newValue);\n      }}\n    >\n      <BottomNavigationAction label='Word' value='WordPage' icon={<TextFormatIcon />} />\n      <BottomNavigationAction label='Grammer' value='GrammerPage'icon={<TextFieldsIcon />} />\n      <BottomNavigationAction label='GrammerWrite' value='GrammerWritingPage'icon={<TextFieldsIcon />} />\n    </BottomNavigation>\n  );\n}\n\nexport default GlobalMenu;","import axios from \"axios\";\n\ntype sentenceType = {\n  id: string,\n  category: string,\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n}\n\ntype wordType = {\n  id: string,\n  category: string,\n  part: string,\n  word: string,\n  plural: string,\n  partOfSpeech: string,\n  trans: string,\n  sentence: string,\n  sentenceTrans: string,\n}\n\nexport default class EnglishData {\n  static setWordData() {\n    const sheetId = '10QM4n6jg93YevAhr-yS8SFp8VjaK_lv09VF_HfFxTYk';\n    const sheetName = 'new_horizon_j1_word';\n    const apiKey = 'AIzaSyD61LRLY0MGuJyIU9EQCb4KUDiFJRmxO1o';\n    const words:wordType[] = [];\n    return axios\n    .get('https://sheets.googleapis.com/v4/spreadsheets/'+sheetId+'/values/'+sheetName+'?key='+apiKey)\n    .then(response => {\n      if (!Array.isArray(response.data.values)) {\n        return words;\n      }\n      const responseWords = response.data.values;\n      responseWords.shift();\n      responseWords.forEach((w: any) => {\n        words.push({\n          id: w[0],\n          category: w[1],\n          part: w[2],\n          word: w[3],\n          plural: w[4],\n          partOfSpeech: w[5],\n          trans: w[6],\n          sentence: w[7],\n          sentenceTrans: w[8]\n        })\n      })\n      sessionStorage.setItem('WORDS', JSON.stringify(words));\n    })\n    .catch(() => words);\n  }\n\n  static getWordData() {\n    const storageWords = sessionStorage.getItem('WORDS');\n    const words:wordType[] = [];\n    if (storageWords != null && storageWords.length > 0) {\n      JSON.parse(storageWords).forEach((w:any) => {\n        words.push({\n          id: w['id'],\n          category: w['category'],\n          part: w['part'],\n          word: w['word'],\n          plural: w['plural'],\n          partOfSpeech: w['partOfSpeech'],\n          trans: w['trans'],\n          sentence: w['sentence'],\n          sentenceTrans: w['sentenceTrans']\n        })\n      });\n    }\n    return words;\n  }\n\n  static getFavoriteWordData()\n  {\n    let words:wordType[] = [];\n    let favorite = JSON.parse(localStorage.getItem('favorite') ?? '{}');\n    const sWords = sessionStorage.getItem('WORDS');\n    let storageWords:any = [];\n    if (sWords != null && sWords.length > 0) {\n      storageWords = JSON.parse(sWords);\n    } else {\n      return words;\n    }\n    if (Array.isArray(favorite)) {\n      favorite.forEach(f => {\n        if (f['category'] === 'Word') {\n          const s:any = storageWords.filter((s:any) => s['id'] === f['id']);\n          if (s.length > 0) {\n            words.push(\n              {\n                id: s[0]['id'],\n                category: s[0]['category'],\n                part: s[0]['part'],\n                word: s[0]['word'],\n                plural: s[0]['plural'],\n                partOfSpeech: s[0]['partOfSpeech'],\n                trans: s[0]['trans'],\n                sentence: s[0]['sentence'],\n                sentenceTrans: s[0]['sentenceTrans']\n              }\n            );\n          }\n        }\n      });\n    }\n    return words;\n  }\n\n  static getFirstPart() {\n    return this.getWordData().reduce((val:string[], cur:any) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, [])[0];\n  }\n\n  static getParts() {\n    return this.getWordData().reduce((val:string[], cur:any) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, []);  \n  }\n\n  static getSentences() {\n    return this.getWordData().reduce((val:sentenceType[], cur:any) => {\n      const w:sentenceType = {\n        id: cur.id,\n        category: cur.category,\n        part: cur.part,\n        sentence: cur.sentence, \n        sentenceTrans: cur.sentenceTrans\n      };\n\n      if (!val.some(v => \n        v.part === w.part && v.sentence === w.sentence)) {\n        val.push(w);\n      }\n      return val;\n    }, []);  \n  }\n}\n","class EnglishVoice {\n  static speech(text:string, lang: string, rate: number) {\n    const synth = window.speechSynthesis;\n    const voices = synth.getVoices().filter(voice => voice.lang === lang);\n    const voice = voices[0];\n    const utter = new SpeechSynthesisUtterance();\n    utter.text = text;\n    utter.lang = lang;\n    utter.voice = voice;\n    utter.rate = rate;\n    window.speechSynthesis.speak(utter);\n  }\n}\n\nexport default EnglishVoice;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface WordProps {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    visibleWord: string;\n    isInputWordCompleted: boolean;\n    inputWordString:string;\n    onClick: () => void;\n    changeInputWordCompleted: (val:boolean) => void;\n    changeInputWord: (val:string) => void;    \n}\n\nclass Word extends React.Component<WordProps, {}>{\n  private wordInputElement: React.RefObject<HTMLInputElement>;\n  constructor(props: WordProps) {\n    super(props);\n    this.wordInputElement = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.wordInputElement.current?.focus();\n  }\n\n  componentDidMount() {\n    this.wordInputElement.current?.focus();\n  }\n\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <Grid container>\n            <Grid item xs={10}>\n              <Typography variant='subtitle1'>\n                {this.props.trans}\n              </Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <Avatar\n                variant='circular'\n                component='span'\n              >\n                {partOfSpeech.substr(0,1)}\n              </Avatar>\n            </Grid>\n          </Grid>\n          <Typography variant='h4' className={this.props.visibleWord}>\n            {this.props.word}\n          </Typography>\n          <br/>\n          <Grid container direction=\"row\">\n            <TextField\n              inputRef={this.wordInputElement}\n              error={!this.props.isInputWordCompleted}\n              label= {this.props.isInputWordCompleted ? \"OK\" : \"input word\"}\n              fullWidth={true}\n              value={this.props.inputWordString}\n              variant=\"outlined\"\n              onChange={(o) => \n                {\n                  this.props.changeInputWord(o.target.value.toLowerCase());\n                  if (this.props.word.toLowerCase() === o.target.value.toLowerCase()) {\n                    this.props.changeInputWordCompleted(true);\n                    this.props.onClick();\n                    EnglishVoice.speech('OK. '+this.props.word, 'en-US', 1);\n                  } else {\n                    this.props.changeInputWordCompleted(false);\n                  }\n                }\n              }\n            />\n          </Grid>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => {\n                  this.props.onClick()\n                  this.wordInputElement.current?.focus();\n                }}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.word, 'en-US', 1);\n                  this.wordInputElement.current?.focus();\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Word;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface PluralProps {\n    plural: string;\n    partOfSpeech: string;\n    trans: string;\n    visiblePlural: string;\n    isInputPluralCompleted: boolean;\n    inputPluralString:string;\n    onClick: () => void;\n    changeInputPluralCompleted: (val:boolean) => void;\n    changeInputPlural: (val:string) => void;    \n}\n\nclass Plural extends React.Component<PluralProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    \n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <Typography variant='h4' className={this.props.visiblePlural}>\n            {this.props.plural}\n          </Typography>\n          <br/>\n          <Grid container direction=\"row\">\n            <TextField\n              error={!this.props.isInputPluralCompleted}\n              label= {this.props.isInputPluralCompleted ? \"OK\" : \"input plural\"}\n              fullWidth={true}\n              value={this.props.inputPluralString}\n              variant=\"outlined\"\n              onChange={(o) => \n                {\n                  this.props.changeInputPlural(o.target.value.toLowerCase());\n                  if (this.props.plural.toLowerCase() === o.target.value.toLowerCase()) {\n                    this.props.changeInputPluralCompleted(true);\n                    this.props.onClick();\n                    EnglishVoice.speech('OK. '+this.props.plural, 'en-US', 1);\n                  } else {\n                    this.props.changeInputPluralCompleted(false);\n                  }\n                }\n              }\n            />\n          </Grid>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => this.props.onClick()}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.plural, 'en-US', 1);\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Plural;","import * as React from 'react';\nimport { Container, Button, Grid } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\n\ninterface SentenceProps {\n    sentence: string;\n    trans: string;\n    visibleSentence: string;\n    speechSpeedRate: number;\n    onClick: () => void;\n}\n\nclass Sentence extends React.Component<SentenceProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <div onClick={() => this.props.onClick()}>\n            <p className=\"word\">{this.props.trans}</p>\n          </div>\n          <Typography component=\"div\">\n            <Box\n              className={this.props.visibleSentence}\n              m={1}\n            >\n              {this.props.sentence}\n            </Box>\n          </Typography>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => this.props.onClick()}\n              >\n                <TranslateIcon\n                  fontSize='small'\n                />\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.sentence, 'en-US', this.props.speechSpeedRate);\n                }}\n              >\n                <VolumeUpIcon\n                  fontSize='small'\n                />\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Sentence;","import * as React from 'react';\nimport { Button, Grid } from '@material-ui/core';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\n\nimport 'fontsource-roboto';\n\ninterface PaginationProps {\n  index: number;\n  maxPage: number;\n  onClickPrev: () => void;\n  onClickNext: () => void;\n} \nconst Pagination: React.FC<PaginationProps> = (props) => {\n  return (\n    <Grid\n    container\n    direction=\"row\"\n    justify=\"space-around\"\n    alignItems=\"flex-end\"\n    >\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => props.onClickPrev()}\n        disabled={props.index === 0 ? true : false}\n      >\n        <ArrowBackIosIcon />\n      </Button> \n      <Button \n        variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => props.onClickNext()}\n        disabled={props.index >= props.maxPage-1 ? true : false}\n      >\n        <ArrowForwardIosIcon />\n      </Button>\n    </Grid>\n  );\n}\n\nexport default Pagination;","import React, { useState, useEffect } from 'react';\nimport { Button, Grid } from '@material-ui/core';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport 'fontsource-roboto';\n\ninterface FavoriteProps {\n    category: 'Grammer'|'Word'|'GrammerWriting';\n    part: string;\n    id: string;\n}\n\nexport default function Favorite(props:FavoriteProps) {\n    const [isFavorite, setIsFavorite] = useState<boolean>(false);\n    const [id, setId] = useState<string>(props.id);\n\n    const checkIsFavorite = async () => {\n        let favorite:any = [];\n        favorite = await JSON.parse(localStorage.getItem('favorite') ?? '{}');\n        if (Array.isArray(favorite)) {\n            return favorite.filter(f => f['category'] === props.category && f['id'] === props.id).length > 0;\n        } else {\n            return false;\n        }\n    }\n\n    const setFavorite = async () => {\n        let favorite = await JSON.parse(localStorage.getItem('favorite') ?? '{}');\n        if (Array.isArray(favorite)) {\n            await checkIsFavorite()\n            .then((isF:any) => {\n                if (isF) {\n                    favorite = favorite.filter((f:any) => f['category'] !== props.category || f['id'] !== props.id);\n                    setIsFavorite(false);\n                } else {\n                    favorite = favorite.concat(props);\n                    setIsFavorite(true);\n                }\n                localStorage.setItem('favorite', JSON.stringify(favorite));\n            });\n        } else {\n            localStorage.setItem('favorite', JSON.stringify([props]));\n            setIsFavorite(true);\n        }\n    }\n\n    useEffect(() => {\n        checkIsFavorite()\n        .then((isFa:boolean) => {\n            setIsFavorite(isFa);\n        })\n    })\n\n    return (\n        <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={setFavorite}\n        >\n        {\n            isFavorite ? <StarIcon /> : <StarBorderIcon />\n        }\n        </Button>\n    )\n\n}\n","import React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport { Drawer, IconButton, List, ListItem, Collapse, Slider } from '@material-ui/core';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { AppBar, Toolbar } from '@material-ui/core';\nimport { ListItemText, ListItemIcon } from '@material-ui/core';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nimport { VerticalSplitSharp } from '@material-ui/icons';\n\ntype categoryType = {\n  category: string;\n  parts: string[];\n}\ninterface SideMenuProps {\n  categories: categoryType[]|null;\n  parts: string[];\n  currentPart: string;\n  changeCurrentPart: (val:string) => void;\n  speechSpeedRate: number;\n  changeSpeechSpeedRate: (val:number) => void;\n}\n\nconst SideMenu: React.FC<SideMenuProps> = props => {\n  const [menuToggle, setMenuToggle] = useState(false);\n  const [listOpen, setListOpen] = useState<boolean[]>([]);\n\n  const toggleDrawer = () => {\n    setMenuToggle(!menuToggle);\n  };\n\n  const categories:categoryType[] | null = props.categories;\n  const parts = props.parts;\n  const drawerWidth = '70vw';\n\n  useEffect(() => {\n    if (categories) {\n      let vals:boolean[] = [];\n      categories.forEach(c => {\n        if (c.parts.includes(props.currentPart)) {\n          vals.push(true);\n        } else {\n          vals.push(false);\n        }\n      })\n      setListOpen(vals);\n    }\n  },[]);\n\n  const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n      header: {\n        height:'4vh',\n        backgroundColor: '#7A7A7A',\n        marginBottom: '1vh'\n      },\n      open: {\n        width: drawerWidth,\n      },\n      close: {\n        width:'100%',\n      },\n      closeIcon: {\n        marginTop: '16px',\n        marginLeft: '16px',\n      },\n      hide: {\n        display: 'none',\n      },\n      list: {\n        width: drawerWidth,\n      },\n      parts: {\n        paddingLeft: '2em',\n      }\n    })\n  );\n\n  const changeCategoryMenu = ((index:number|null) => {\n    let vals:boolean[] = [];\n    listOpen.forEach(c => {\n      vals.push(false);\n    })\n    if (index !== null) {\n      vals.splice(index, 1, true);\n    }\n    setListOpen(vals);\n  });\n\n  const classes = useStyles();\n\n  return ( \n    <>\n      <Toolbar\n        className={`${menuToggle ? classes.open : classes.close} ${classes.header}` }\n      >\n        <Typography\n          variant=\"h6\"\n          noWrap\n          style={{flexGrow: 1, textAlign:'center'}}\n        >\n          {props.currentPart}    \n        </Typography>\n        <IconButton\n          color=\"inherit\"\n          className={menuToggle ? classes.hide : ''}\n          aria-label=\"open drawer\"\n          edge=\"end\"\n          onClick={() => toggleDrawer()}\n        >\n          <MenuIcon />\n        </IconButton>\n      </Toolbar>\n      <Drawer\n        anchor='right'\n        open={menuToggle}\n        onClose={() => setMenuToggle(false)}\n      >\n        <div className={classes.list}>\n          <CloseIcon\n            className={classes.closeIcon}\n            onClick={() => setMenuToggle(false)}\n          />\n          <List key={'menuList'} component=\"nav\" aria-label=\"secondary part\">\n            {\n              categories\n              &&\n              categories.map((c, index) => {\n                return (\n                  <>\n                    <ListItem\n                      key={'category'+index}\n                      button\n                      onClick={() => {\n                        if (listOpen[index]) {\n                          changeCategoryMenu(null);\n                        } else {\n                          changeCategoryMenu(index);\n                        }\n                      }}\n                    >\n                      <ListItemText primary={c.category}/>\n                      {listOpen[index] ? <ExpandLess /> : <ExpandMore />}\n                    </ListItem>\n                    <Collapse key={'subMenu'+index} in={listOpen[index]} timeout=\"auto\" unmountOnExit>\n                      <List key={'subMenuList'+index} component=\"div\" disablePadding>\n                        {\n                          c.parts.map((p, i) => \n                            <ListItem \n                              key={'subMenu'+index+p+i}\n                              button\n                              className={classes.parts}\n                              onClick={() => {\n                                props.changeCurrentPart(p);\n                                setMenuToggle(false);\n                                changeCategoryMenu(index);\n                              }}\n                                        \n                            >\n                              <ListItemText key={'subMenuText'+index+p+i} primary={p.replaceAll(c.category, '')}/>\n                              <ListItemIcon key={'subMenuIcon'+index+p+i}>\n                                {\n                                  p === props.currentPart\n                                  &&\n                                  <CheckIcon />\n                                }\n                              </ListItemIcon>\n                            </ListItem>\n                          )\n                        }\n                      </List>\n                    </Collapse>\n                  </>\n                )\n              })\n            }\n            {\n              !categories && parts\n              &&\n              parts.map(p => {\n                return (\n                  <ListItem \n                    button\n                    onClick={() => {\n                      props.changeCurrentPart(p);\n                      setMenuToggle(false);\n                    }}\n                    key={p}\n                  >\n                    <ListItemText primary={p}/>\n                    <ListItemIcon>\n                      {\n                        p === props.currentPart\n                        &&\n                        <CheckIcon />\n                      }\n                    </ListItemIcon>\n                  </ListItem>\n                )\n              })\n            }\n            <ListItem\n              button\n              onClick={() => {\n                props.changeCurrentPart('favorite');\n                setMenuToggle(false);\n              }}\n              key={'favorite'}\n            >\n              <ListItemText primary=\"favorite\"/>\n            </ListItem>\n          </List>\n          <Divider />\n          <List key={'voiceSpeedList'} component=\"nav\" aria-label=\"thirdry speechSpeed\">\n            <ListItem key={'voiceSpeedListItem'}>\n              <ListItemText primary=\"voice speed\"/>\n              <Slider\n                min={0.1}\n                max={1}\n                step={0.1}\n                value={props.speechSpeedRate}\n                aria-labelledby=\"speech-speed-rate\"\n                valueLabelDisplay=\"auto\"\n                onChange={(e, v) => {\n                  let rate:number = props.speechSpeedRate;\n                  if (typeof(v) ===  'number') {\n                    rate = v;\n                  }\n                  props.changeSpeechSpeedRate(rate);\n                }}\n              />\n            </ListItem>\n          </List>\n        </div>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideMenu;","import React, { useState, useEffect } from 'react';\nimport { Container } from '@material-ui/core';\nimport EnglishData from '../context/EnglishData';\nimport Word from '../components/WordPage/Word';\nimport Plural from '../components/WordPage/Plural'\nimport Sentence from '../components/WordPage/Sentence';\nimport Paginate from '../components/Pagination';\nimport Part from '../components/Part';\nimport Favorite from '../components/Common/Favorite';\nimport SideMenu from '../components/SideMenu';\nimport { useSwipeable } from \"react-swipeable\";\nimport { getPlural, getSingular } from 'plury';\n\nconst WordPage: React.FC<{}> = () => {\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const newIndex = wordIndex-1\n      setWordIndex(newIndex);\n      localStorage.setItem('wordWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisiblePlural('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n      setInputPluralString('');\n    }\n  }\n  \n  const firstPart = localStorage.getItem('wordCurrentPart') ?? EnglishData.getFirstPart();\n  const wIndex: number = localStorage.getItem('wordWordIndex') ? Number(localStorage.getItem('wordWordIndex')) : 0;\n  const [slides, setSlides] = useState(EnglishData.getWordData().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(wIndex);\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [visibleWord, setVisibleWord] = useState<string>('word-hidden');\n  const [visiblePlural, setVisiblePlural] = useState<string>('word-hidden');\n  const [visibleSentence, setVisibleSentence] = useState<string>('word-hidden');\n  const [isInputWordCompleted, setIsInputWordCompleted] = useState<boolean>(false);\n  const [isInputPluralCompleted, setIsInputPluralCompleted] = useState<boolean>(false);\n  const [inputWordString, setInputWordString] = useState<string>('');\n  const [inputPluralString, setInputPluralString] = useState<string>('');\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const newIndex = wordIndex+1;\n      setWordIndex(newIndex);\n      localStorage.setItem('wordWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisiblePlural('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n      setInputPluralString('');\n    }\n  }\n\n  const changeInputWordCompleted = (val: boolean) => {\n    setIsInputWordCompleted(val);\n  }\n\n  const changeInputPluralCompleted = (val:boolean) => {\n    setIsInputPluralCompleted(val);\n  }\n\n  const changeInputWord = (val: string) => {\n    setInputWordString(val);\n  }\n\n  const changeInputPlural = (val: string) => {\n    setInputPluralString(val);\n  }\n\n  const changeCurrentPart = (val: string) => {\n    let s:any = [];\n    if (currentPart !== val) {\n      if (val === 'favorite') {\n        s = EnglishData.getFavoriteWordData();\n      } else {\n        s = EnglishData.getWordData().filter(w => w.part === val);\n      }\n      setSlides(s)\n      setCurrentPart(val);\n      localStorage.setItem('wordCurrentPart', val);\n      setWordIndex(0);\n      localStorage.setItem('wordWordIndex', '0');\n      setVisibleWord('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n      setInputPluralString('');\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  useEffect(() => {\n    changeCurrentPart(firstPart);\n  }, []);\n\n  return (\n    <>\n      <SideMenu\n        categories={null}\n        parts={EnglishData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container maxWidth=\"sm\">\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        {\n          slides.length == 0\n          &&\n          <p>no data</p>\n        }\n        {\n          slides.length > 0\n          &&\n          <>\n            <div {...swipeHandles}>\n              <Word\n                word={slides[wordIndex].word}\n                partOfSpeech={slides[wordIndex].partOfSpeech}\n                trans={slides[wordIndex].trans}\n                visibleWord = {visibleWord}\n                isInputWordCompleted={isInputWordCompleted}\n                inputWordString={inputWordString}\n                onClick={() => setVisibleWord('word-visible')}\n                changeInputWordCompleted={(val) => changeInputWordCompleted(val)}\n                changeInputWord={(val) => changeInputWord(val)}\n              />\n              {\n                slides[wordIndex].plural\n                &&\n                <Plural\n                  plural={slides[wordIndex].plural}\n                  partOfSpeech={slides[wordIndex].partOfSpeech}\n                  trans={slides[wordIndex].trans}\n                  visiblePlural = {visiblePlural}\n                  isInputPluralCompleted={isInputPluralCompleted}\n                  inputPluralString={inputPluralString}\n                  onClick={() => setVisiblePlural('word-visible')}\n                  changeInputPluralCompleted={(val) => changeInputPluralCompleted(val)}\n                  changeInputPlural={(val) => changeInputPlural(val)}\n                />\n              }\n            </div>\n            <hr/>\n            <Sentence\n              sentence={slides[wordIndex].sentence}\n              trans={slides[wordIndex].sentenceTrans}\n              visibleSentence={visibleSentence}\n              speechSpeedRate={speechSpeedRate}\n              onClick = {() => setVisibleSentence('word-visible')}\n            />\n            <hr/>\n            <Favorite \n              category='Word'\n              part={currentPart}\n              id={slides[wordIndex].id}\n            />\n          </>\n        }\n      </Container>\n    </>\n  )\n} \n\nexport default WordPage;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface WordProps {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    visibleWord: string;\n    isInputWordCompleted: boolean;\n    inputWordString:string;\n    onClick: () => void;\n    changeInputWordCompleted: (val:boolean) => void;\n    changeInputWord: (val:string) => void;    \n}\n\nclass Word extends React.Component<WordProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    \n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <Grid container>\n            <Grid item xs={10}>\n              <Typography variant='subtitle1'>\n                {this.props.word}\n              </Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <Avatar\n                variant='circular'\n                component='span'\n              >\n                {partOfSpeech.substr(0,1)}\n              </Avatar>\n            </Grid>\n          </Grid>\n          <Typography variant='h5' className={this.props.visibleWord}>\n            {this.props.trans}\n          </Typography>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => this.props.onClick()}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.word, 'en-US', 1);\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Word;","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport EnglishData from '../context/EnglishData';\nimport Word from '../components/WordTransPage/Word';\nimport Paginate from '../components/Pagination';\nimport Part from '../components/Part';\nimport SideMenu from '../components/SideMenu';\nimport { useSwipeable } from \"react-swipeable\";\n\nconst WordTransPage: React.FC<{}> = () => {\n  const firstPart = localStorage.getItem('wordTransCurrentPart') ?? EnglishData.getFirstPart();\n  const [slides, setSlides] = useState(EnglishData.getWordData().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(0);\n  const [visibleWord, setVisibleWord] = useState<string>('word-hidden');\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [visibleSentence, setVisibleSentence] = useState<string>('word-hidden');\n  const [isInputWordCompleted, setIsInputWordCompleted] = useState<boolean>(false);\n  const [inputWordString, setInputWordString] = useState<string>('');\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const newIndex = wordIndex-1\n      setWordIndex(newIndex);\n      localStorage.setItem('wordTransWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const newIndex = wordIndex+1;\n      setWordIndex(newIndex);\n      localStorage.setItem('wordTransWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n    }\n  }\n\n  const changeInputWordCompleted = (val: boolean) => {\n    setIsInputWordCompleted(val);\n  }\n\n  const changeInputWord = (val: string) => {\n    setInputWordString(val);\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      const s = EnglishData.getWordData().filter(w => w.part === val);\n        setSlides(s)\n        setCurrentPart(val);\n        localStorage.setItem('wordTransCurrentPart', val);\n        setWordIndex(0);\n        localStorage.setItem('wordTransWordIndex', '0');\n        setVisibleWord('word-hidden');\n        setVisibleSentence('word-hidden');\n        setIsInputWordCompleted(false);\n        setInputWordString('');\n      }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  return (\n    <>\n      <SideMenu\n        categories={null}\n        parts={EnglishData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container maxWidth=\"sm\">\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        <div {...swipeHandles}>\n          <Word\n            word={slides[wordIndex].word}\n            partOfSpeech={slides[wordIndex].partOfSpeech}\n            trans={slides[wordIndex].trans}\n            visibleWord = {visibleWord}\n            isInputWordCompleted={isInputWordCompleted}\n            inputWordString={inputWordString}\n            onClick={() => setVisibleWord('word-visible')}\n            changeInputWordCompleted={(val) => changeInputWordCompleted(val)}\n            changeInputWord={(val) => changeInputWord(val)}\n          />\n        </div>\n        <hr/>\n      </Container>\n    </>\n  )\n} \n\nexport default WordTransPage;","import React from 'react';\nimport { Container, Button, Grid, Typography } from '@material-ui/core';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport EnglishVoice from '../../lib/EnglishVoice';\n\ninterface GrammerProps {\n  answer: string[];\n  stockWords: string[];\n  ansWords: string[];\n  sentence: string;\n  translate: string;\n  isAnsComplated: boolean;\n  speechSpeedRate: number;\n  moveAnsWords: (w:string, i:number) => void;\n  moveStockWords: (w:string, i:number) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const stockWords = props.stockWords;\n  const ansWords = props.ansWords;\n  const lastChar:string = props.sentence.substr(-1);\n\n  const buttonStyle: React.CSSProperties = {\n    display: 'inline-block',\n    minWidth: '20px',\n    height: '40px',\n    textTransform: 'lowercase',\n    margin: '5px',\n  }\n\n  const wordsStyle: React.CSSProperties = {\n    minHeight: '30vh',\n  }\n\n  const style: React.CSSProperties = {\n    display: 'inline-block',\n    width: '100%',\n    height: '20%',\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            ansWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color={props.isAnsComplated ? 'default' : 'secondary'}\n                  variant={props.isAnsComplated ? 'outlined' : 'contained'}\n                  size=\"small\"\n                  onClick={() => props.moveStockWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n          <Button\n            style={buttonStyle}\n            color=\"default\"\n            variant=\"text\"\n            size=\"small\"\n            key=\"lastChar\"\n          >\n            {lastChar}\n          </Button>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            stockWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  onClick={() => props.moveAnsWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n        </Grid>\n      </Container>\n      <hr />\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          <Button\n            style={style}\n            variant=\"outlined\"\n            onClick={() => {\n              EnglishVoice.speech(props.sentence, 'en-US', props.speechSpeedRate);\n            }}\n          >\n            <VolumeUpIcon\n              fontSize='small'\n            />\n          </Button>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/WordGrammerPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport Favorite from '../components/Common/Favorite';\nimport EnglishData from '../context/EnglishData';\nimport EnglishVoice from '../lib/EnglishVoice';\nimport { useSwipeable } from 'react-swipeable';\n\nconst GrammerPage:React.FC = () => {\n  const firstPart = localStorage.getItem('grammerCurrentPart') ?? EnglishData.getFirstPart();\n  const [slides, setSlides] = useState(EnglishData.getSentences().filter(w => w.part === EnglishData.getFirstPart()));\n  const [wordIndex, setWordIndex] = useState<number>(0);\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [answer, setAnswer] = useState<string[]>(slides[wordIndex].sentence.toLocaleLowerCase().slice(0, -1).split(' '));\n  const [isAnsComplated, setIsAnsComplated] = useState<boolean>(false);\n  const [stockWords, setStockWords] = useState<string[]>(\n    answer\n      .map(function (a) { return { weight: Math.random(), value: a } })\n      .sort(function (a, b) { return a.weight - b.weight })\n      .map(function (a) { return a.value })\n  );\n  const [ansWords, setAnsWords] = useState<string[]>([]);\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const i:number = wordIndex - 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n      setWordIndex(i);\n      setAnswer(s);\n      setStockWords(shuffle(s));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n\n      setWordIndex(i);\n      setAnswer(s);\n      setStockWords(shuffle(s));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      const s = EnglishData.getSentences().filter(w => w.part === val);\n      setSlides(s)\n      setCurrentPart(val);\n      setWordIndex(0);\n      localStorage.setItem('grammerCurrentPart', val);\n      localStorage.setItem('grammerWordIndex', '0');\n\n      const a:string[] = separateSentence(s[0].sentence);\n      setAnswer(a);\n      setStockWords(shuffle(a));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const moveAnsWords = (word: string, index: number) => {\n    const aw = ansWords;\n    const sw = stockWords.filter((v, i) => {\n      return i !== index;\n    });\n    aw.push(word);\n\n    setAnsWords(aw);\n    setStockWords(sw);\n\n    EnglishVoice.speech(word, 'en-US', 1);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const moveStockWords = (word: string, index: number) => {\n    const sw = stockWords;\n    const aw = ansWords.filter((v, i) => {\n      return i !== index;\n    });\n    sw.push(word);\n\n    setStockWords(sw);\n    setAnsWords(aw);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const separateSentence = (s:string) => {\n    return s.toLocaleLowerCase().slice(0, -1).split(' ');\n  }\n\n  const shuffle = (w:string[]) => {\n    return w.map(function (a) { return { weight: Math.random(), value: a } })\n    .sort(function (a, b) { return a.weight - b.weight })\n    .map(function (a) { return a.value })\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  return (\n    <>\n      <SideMenu\n        categories={null}\n        parts={EnglishData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container>\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        <div {...swipeHandles}>\n          <Grammer\n            answer={answer}\n            stockWords={stockWords}\n            ansWords={ansWords}\n            sentence={slides[wordIndex].sentence}\n            translate={slides[wordIndex].sentenceTrans}\n            isAnsComplated={isAnsComplated}\n            speechSpeedRate={speechSpeedRate}\n            moveAnsWords={(w, i) => moveAnsWords(w, i)}\n            moveStockWords={(w, i) => moveStockWords(w, i)}\n          />\n        </div>\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerPage;","import React from 'react';\nimport { Container, Button, Grid, List, ListItem, ListItemText, Slider, Typography } from '@material-ui/core';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport Favorite from '../Common/Favorite';\nimport EnglishVoice from '../../lib/EnglishVoice';\n\ninterface GrammerProps {\n  id: string;\n  currentPart: string;\n  answer: string[];\n  stockWords: string[];\n  ansWords: string[];\n  sentence: string;\n  translate: string;\n  speechSpeedRate: number;\n  isAnsComplated: boolean;\n  moveAnsWords: (w:string, i:number) => void;\n  moveStockWords: (w:string, i:number) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const stockWords = props.stockWords;\n  const ansWords = props.ansWords;\n  const lastChar:string = props.sentence.substr(-1);\n\n  const buttonStyle: React.CSSProperties = {\n    display: 'inline-block',\n    minWidth: '20px',\n    height: '40px',\n    textTransform: 'lowercase',\n    margin: '5px',\n  }\n\n  const wordsStyle: React.CSSProperties = {\n    minHeight: '10vh',\n    paddingBottom: '40px',\n  }\n\n  const style: React.CSSProperties = {\n    display: 'inline-block',\n    width: '100%',\n    height: '20%',\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            ansWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color={props.isAnsComplated ? 'default' : 'secondary'}\n                  variant={props.isAnsComplated ? 'outlined' : 'contained'}\n                  size=\"small\"\n                  onClick={() => props.moveStockWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n          <Button\n            style={buttonStyle}\n            color=\"default\"\n            variant=\"text\"\n            size=\"small\"\n            key=\"lastChar\"\n          >\n            {lastChar}\n          </Button>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container style={{borderTop: '1px dashed #8c8b8b'}}>\n          {\n            stockWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color=\"primary\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  onClick={() => props.moveAnsWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n        </Grid>\n      </Container>\n      <hr />\n      <Container maxWidth=\"sm\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-around\"\n          alignItems=\"flex-end\"\n        >\n          <Button\n            variant=\"outlined\"\n            onClick={() => {\n              EnglishVoice.speech(props.sentence, 'en-US', props.speechSpeedRate);\n            }}\n          >\n            <VolumeUpIcon\n              fontSize='small'\n            />\n          </Button>\n          <Favorite \n            category='Grammer'\n            part={props.currentPart}\n            id={props.id}\n          />\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","import axios from \"axios\";\n\ntype sentenceType = {\n  id: string,\n  category: string,\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n  dummyWord: string,\n}\n\ntype grammerType = {\n  id: string,\n  category: string,\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n  dummyWord: string,\n}\n\ntype categoryType = {\n  category: string;\n  parts: string[];\n}\n\nexport default class GrammerData {\n  static setGrammerData() {\n    const sheetId = '10QM4n6jg93YevAhr-yS8SFp8VjaK_lv09VF_HfFxTYk';\n    const sheetName = 'csv_new_horizon_j1';\n    const apiKey = 'AIzaSyD61LRLY0MGuJyIU9EQCb4KUDiFJRmxO1o';\n    const sentences:grammerType[] = [];\n    return axios\n    .get('https://sheets.googleapis.com/v4/spreadsheets/'+sheetId+'/values/'+sheetName+'?key='+apiKey)\n    .then(response => {\n      if (!Array.isArray(response.data.values)) {\n        return sentences;\n      }\n      const responseWords = response.data.values;\n      responseWords.shift();\n      responseWords.forEach((w: any) => {\n        sentences.push({\n          id: w[0],\n          category: w[1],\n          part: w[2],\n          sentence: w[3],\n          sentenceTrans: w[4],\n          dummyWord: w[5],\n        })\n      })\n      sessionStorage.setItem('SENTENCES', JSON.stringify(sentences));\n    })\n    .catch(() => sentences);\n  }\n\n  static getGrammerData() {\n    const storageSentences = sessionStorage.getItem('SENTENCES');\n    const sentences:grammerType[] = [];\n    if (storageSentences != null && storageSentences.length > 0) {\n      JSON.parse(storageSentences).forEach((s:any) => {\n        sentences.push({\n          id: s['id'],\n          category: s['category'],\n          part: s['part'],\n          sentence: s['sentence'],\n          sentenceTrans: s['sentenceTrans'],\n          dummyWord: s['dummyWord'],\n        })\n      });\n    }\n    return sentences;\n  }\n\n  static getFavoriteSentenceData()\n  {\n    let sentences:sentenceType[] = [];\n    let favorite = JSON.parse(localStorage.getItem('favorite') ?? '{}');\n    const sSentences = sessionStorage.getItem('SENTENCES');\n    let storageSentences:any = [];\n    if (sSentences != null && sSentences.length > 0) {\n      storageSentences = JSON.parse(sSentences);\n    } else {\n      return sentences;\n    }\n    if (Array.isArray(favorite)) {\n      favorite.forEach(f => {\n        if (f['category'] === 'Grammer') {\n          const s:any = storageSentences.filter((s:any) => s['id'] === f['id']);\n          if (s.length > 0) {\n            const d = s[0];\n            sentences.push(\n              {\n                id: d['id'],\n                category: d['category'],\n                part: d['part'],\n                sentence: d['sentence'],\n                sentenceTrans: d['sentenceTrans'],\n                dummyWord: d['dummyWord'],\n              }\n            );\n          }\n        }\n      });\n    }\n    return sentences;\n  }\n\n  static getFirstPart() {\n    return this.getGrammerData().reduce((val:string[], cur) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, [])[0];  \n  }\n\n  static getParts() {\n    return this.getGrammerData().reduce((val:string[], cur) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, []);  \n  }\n\n  static getCategories() {\n    const categories = this.getGrammerData().reduce((val:string[], cur) => {\n      if (!val.includes(cur.category)) {\n        val.push(cur.category);\n      }\n      return val;\n    }, []);\n\n    return categories.map(c => {\n      const parts = this.getGrammerData().reduce((val:string[], cur) => {\n//        const part = cur.part.replaceAll(c , '');\n        const part = cur.part;\n        if (!val.includes(part) && c === cur.category) {\n          val.push(part);\n        }\n        return val;\n      }, []);\n      return {\n        category: c,\n        parts: parts,\n      }\n    })\n  }\n\n  static getSentences() {\n    return this.getGrammerData().reduce((val:sentenceType[], cur) => {\n      const w:sentenceType = {\n        id: cur.id,\n        category: cur.category,\n        part: cur.part,\n        sentence: cur.sentence, \n        sentenceTrans: cur.sentenceTrans,\n        dummyWord: cur.dummyWord,\n      };\n\n      if (!val.some(v => \n        v.part === w.part && v.sentence === w.sentence)) {\n        val.push(w);\n      }\n      return val;\n    }, []);  \n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport { Container, List, ListItem, ListItemText, Slider } from '@material-ui/core';\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/GrammerPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport GrammerData from '../context/GrammerData';\nimport EnglishVoice from '../lib/EnglishVoice';\nimport { useSwipeable } from 'react-swipeable';\n\nconst GrammerPage:React.FC = () => {\n  const firstPart = localStorage.getItem('grammerCurrentPart') ?? GrammerData.getFirstPart();\n  const wIndex: number = localStorage.getItem('grammerWordIndex') ? Number(localStorage.getItem('grammerWordIndex')) : 0;\n  const [slides, setSlides] = useState(GrammerData.getSentences().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(wIndex);\n  const [currentPart, setCurrentPart] = useState<string>('');\n  const [answer, setAnswer] = useState<string[]>([]);\n  const [isAnsComplated, setIsAnsComplated] = useState<boolean>(false);\n  const [stockWords, setStockWords] = useState<string[]>([]);\n  const [ansWords, setAnsWords] = useState<string[]>([]);\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const i:number = wordIndex - 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n      setWordIndex(i);\n      localStorage.setItem('grammerWordIndex', i.toString());\n      setAnswer(s);\n      const w:string[] = s.slice();\n      w.push(slides[i].dummyWord.toLocaleLowerCase());\n      setStockWords(shuffle(w));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n      setWordIndex(i);\n      localStorage.setItem('grammerWordIndex', i.toString());\n      setAnswer(s);\n      const w:string[] = s.slice();\n      w.push(slides[i].dummyWord.toLocaleLowerCase());\n      setStockWords(shuffle(w));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      let s:any = [];\n      if (val === 'favorite') {\n        s = GrammerData.getFavoriteSentenceData();\n      } else {\n        s = GrammerData.getSentences().filter(w => w.part === val);\n      }\n      setSlides(s)\n      setCurrentPart(val);\n      localStorage.setItem('grammerCurrentPart', val);\n      setWordIndex(0);\n      localStorage.setItem('grammerWordIndex', '0');\n\n      const a:string[] = s.length > 0 ? separateSentence(s[0].sentence) : [];\n      setAnswer(a);\n      const w:string[] = a.slice();\n      w.push(s.length > 0 ? s[0].dummyWord.toLocaleLowerCase(): '');\n      setStockWords(shuffle(w));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const moveAnsWords = (word: string, index: number) => {\n    const aw = ansWords;\n    const sw = stockWords.filter((v, i) => {\n      return i !== index;\n    });\n    aw.push(word);\n\n    setAnsWords(aw);\n    setStockWords(sw);\n\n    EnglishVoice.speech(word, 'en-US', 1);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const moveStockWords = (word: string, index: number) => {\n    const sw = stockWords;\n    const aw = ansWords.filter((v, i) => {\n      return i !== index;\n    });\n    sw.push(word);\n\n    setStockWords(sw);\n    setAnsWords(aw);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const separateSentence = (s:string) => {\n    return s.toLocaleLowerCase().slice(0, -1).split('  ');\n  }\n\n  const shuffle = (w:string[]) => {\n    return w.map(function (a) { return { weight: Math.random(), value: a } })\n    .sort(function (a, b) { return a.weight - b.weight })\n    .map(function (a) { return a.value })\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  useEffect(() => {\n    changeCurrentPart(firstPart);\n  }, []);\n\n  return (\n    <>\n      <SideMenu\n        categories={GrammerData.getCategories()}\n        parts={GrammerData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container>\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        {\n          slides.length == 0\n          &&\n          <p>no data</p>\n        }\n        {\n          slides.length > 0\n          &&\n          <>\n            <div {...swipeHandles}>\n              <Grammer\n                id={slides[wordIndex].id}\n                currentPart={currentPart}\n                answer={answer}\n                stockWords={stockWords}\n                ansWords={ansWords}\n                sentence={slides[wordIndex].sentence}\n                translate={slides[wordIndex].sentenceTrans}\n                speechSpeedRate={speechSpeedRate}\n                isAnsComplated={isAnsComplated}\n                moveAnsWords={(w, i) => moveAnsWords(w, i)}\n                moveStockWords={(w, i) => moveStockWords(w, i)}\n              />\n            </div>\n          </>\n        }\n        <List component=\"nav\" aria-label=\"thirdry speechSpeed\">\n          <ListItem>\n            <ListItemText primary=\"voice speed\"/>\n            <Slider\n              min={0.1}\n              max={1}\n              step={0.1}\n              value={speechSpeedRate}\n              aria-labelledby=\"speech-speed-rate\"\n              valueLabelDisplay=\"auto\"\n              onChange={(e, v) => {\n                let rate:number = speechSpeedRate;\n                if (typeof(v) ===  'number') {\n                  rate = v;\n                }\n                setSpeechSpeedRate(rate);\n              }}\n            />\n          </ListItem>\n        </List>\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerPage;","import React, { useRef, useEffect } from 'react';\nimport { Container, Button, Grid, List, ListItem, ListItemText, Slider, Typography, TextField } from '@material-ui/core';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport Favorite from '../Common/Favorite';\nimport EnglishVoice from '../../lib/EnglishVoice';\n\ninterface GrammerProps {\n  id: string;\n  currentPart: string;\n  sentence: string;\n  visibleSentence: boolean;\n  translate: string;\n  inputString: string;\n  speechSpeedRate: number;\n  isAnsComplated: boolean;\n  changeInputString: (val:string) => void;\n  changeIsAnsComplated: (val:boolean) => void;\n  changeVisibleSentence: (val:boolean) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const inputElement = useRef<HTMLElement>(null!) ;\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n          <br/>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Grid container style={{marginBottom: '1em'}}>\n          <Typography variant='body1' className={props.visibleSentence ? 'word-visible' : 'word-hidden'}>\n            {props.sentence}\n          </Typography>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-around\"\n          alignItems=\"flex-end\"\n        >\n          <Grid container direction=\"row\">\n            <TextField\n              inputRef={inputElement}\n              error={!props.isAnsComplated}\n              label= {props.isAnsComplated ? \"OK\" : \"input word\"}\n              fullWidth={true}\n              value={props.inputString}\n              variant=\"outlined\"\n              onChange={(o) => \n                {\n                  props.changeInputString(o.target.value);\n                  if (props.sentence === o.target.value) {\n                    props.changeIsAnsComplated(true);\n                    props.changeVisibleSentence(true);\n                    EnglishVoice.speech('OK. '+ props.sentence, 'en-US', props.speechSpeedRate);\n                  } else {\n                    props.changeIsAnsComplated(false);\n                  }\n                }\n              }\n            />\n          </Grid>\n        </Grid>\n        <hr/>\n        <Grid\n          container\n          direction=\"row\"\n          spacing={5}\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs={4}>\n            <Button\n              variant=\"outlined\"\n              onClick={() => {\n                EnglishVoice.speech(props.sentence, 'en-US', props.speechSpeedRate);\n                inputElement.current.focus();\n              }}\n            >\n              <VolumeUpIcon\n                fontSize='small'\n              />\n            </Button>\n          </Grid>\n          <Grid item xs={4}>\n            <Button\n              color=\"primary\"\n              variant=\"outlined\"\n              onClick={() => {\n                props.changeVisibleSentence(!props.visibleSentence)\n                inputElement.current.focus();\n              }}\n            >\n              <TranslateIcon/>\n          </Button>\n          </Grid>\n          <Grid item xs={4}>\n            <Favorite \n              category='GrammerWriting'\n              part={props.currentPart}\n              id={props.id}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","import React, { useState, useEffect } from 'react';\nimport { Container, List, ListItem, ListItemText, Slider } from '@material-ui/core';\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/GrammerWritingPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport GrammerData from '../context/GrammerData';\nimport { useSwipeable } from 'react-swipeable';\n\nconst GrammerPage:React.FC = () => {\n  const firstPart = localStorage.getItem('grammerWritingCurrentPart') ?? GrammerData.getFirstPart();\n  const wIndex: number = localStorage.getItem('grammerWritingWordIndex') ? Number(localStorage.getItem('grammerWritingWordIndex')) : 0;\n  const [slides, setSlides] = useState(GrammerData.getSentences().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(wIndex);\n  const [currentPart, setCurrentPart] = useState<string>('');\n  const [isAnsComplated, setIsAnsComplated] = useState<boolean>(false);\n  const [inputString, setInputString] = useState<string>('');\n  const [visibleSentence, setVisibleSentence] = useState<boolean>(false);\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const i:number = wordIndex - 1;\n      setWordIndex(i);\n      localStorage.setItem('grammerWritingWordIndex', i.toString());\n      setIsAnsComplated(false);\n      setVisibleSentence(false);\n      setInputString('');\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      setWordIndex(i);\n      localStorage.setItem('grammerWritingWordIndex', i.toString());\n      setIsAnsComplated(false);\n      setVisibleSentence(false);\n      setInputString('');\n    }\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      let s:any = [];\n      if (val === 'favorite') {\n        s = GrammerData.getFavoriteSentenceData();\n      } else {\n        s = GrammerData.getSentences().filter(w => w.part === val);\n      }\n      setSlides(s)\n      setCurrentPart(val);\n      localStorage.setItem('grammerWritingCurrentPart', val);\n      setWordIndex(0);\n      localStorage.setItem('grammerWritingWordIndex', '0');\n      setIsAnsComplated(false);\n      setInputString('');\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  const changeInputString = (val: string) => {\n    setInputString(val);\n  }\n\n  const changeIsAnsComplated = (val: boolean) => {\n    setIsAnsComplated(val);\n  }\n\n  const changeVisibleSentence = (val: boolean) => {\n    setVisibleSentence(val);\n  }\n\n\n  useEffect(() => {\n    changeCurrentPart(firstPart);\n  }, []);\n\n  return (\n    <>\n      <SideMenu\n        categories={GrammerData.getCategories()}\n        parts={GrammerData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container>\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        {\n          slides.length == 0\n          &&\n          <p>no data</p>\n        }\n        {\n          slides.length > 0\n          &&\n          <>\n            <div {...swipeHandles}>\n              <Grammer\n                id={slides[wordIndex].id}\n                currentPart={currentPart}\n                sentence={slides[wordIndex].sentence.replaceAll('  ', ' ')}\n                visibleSentence={visibleSentence}\n                inputString={inputString}\n                translate={slides[wordIndex].sentenceTrans}\n                speechSpeedRate={speechSpeedRate}\n                isAnsComplated={isAnsComplated}\n                changeInputString={(v) => changeInputString(v)}\n                changeIsAnsComplated={(v) => changeIsAnsComplated(v)}\n                changeVisibleSentence={(v) => changeVisibleSentence(v)}\n              />\n            </div>\n            <List component=\"nav\" aria-label=\"thirdry speechSpeed\">\n              <ListItem>\n                <ListItemText primary=\"voice speed\"/>\n                <Slider\n                  min={0.1}\n                  max={1}\n                  step={0.1}\n                  value={speechSpeedRate}\n                  aria-labelledby=\"speech-speed-rate\"\n                  valueLabelDisplay=\"auto\"\n                  onChange={(e, v) => {\n                    let rate:number = speechSpeedRate;\n                    if (typeof(v) ===  'number') {\n                      rate = v;\n                    }\n                    setSpeechSpeedRate(rate);\n                  }}\n                />\n              </ListItem>\n            </List>\n          </>\n        }\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerPage;","import React from 'react';\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport * as colors from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport 'fontsource-roboto';\nimport GlobalMenu from './components/GlobalMenu';\nimport WordPage from './pages/WordPage';\nimport WordTransPage from './pages/WordTransPage';\nimport WordGrammerPage from './pages/WordGrammerPage';\nimport GrammerPage from './pages/GrammerPage';\nimport GrammerWritingPage from './pages/GrammerWritingPage';\nimport EnglishData from './context/EnglishData';\nimport GrammerData from './context/GrammerData';\n\ninterface AppProps {\n}\n\ninterface AppState {\n  currentPage: pageNames,\n  isLoaded: boolean,\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    let sPage:pageNames = 'WordPage';\n    switch (localStorage.getItem('currentPage')) {\n      case 'WordPage':  sPage = 'WordPage';\n            break;\n      case 'GrammerPage': sPage = 'GrammerPage';\n            break;\n      case 'WordGrammerPage': sPage = 'WordGrammerPage';\n            break;\n      case 'WordTransPage': sPage = 'WordTransPage';\n            break;\n      case 'GrammerWritingpage': sPage = 'GrammerWritingPage';\n            break;\n      default: sPage = 'WordPage';\n    }\n    this.state = {\n      currentPage: sPage,\n      isLoaded: false,\n    }\n  }\n\n  async componentDidMount() {\n    await EnglishData.setWordData();\n    await GrammerData.setGrammerData()\n    await this.setState({isLoaded: true});\n  }\n\n  render () {\n    const theme = createMuiTheme({\n      palette: {\n        primary: {\n          main: colors.blue[800],\n        },\n        type: 'dark',\n      },\n    });\n\n    const changePage = async (val: pageNames) => {\n      this.setState({\n        currentPage: val\n      })\n      if (val === 'WordPage') {\n        await EnglishData.setWordData();\n      } else if (val === 'WordTransPage') {\n        await GrammerData.setGrammerData();\n      }\n    }\n\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        {\n          !this.state.isLoaded\n          &&\n          <div style={\n            {\n              height: '100vh',\n              width: '100vw',\n              display: 'table-cell',\n              verticalAlign: 'middle',\n              textAlign: 'center'\n            }\n          }>\n            <CircularProgress />\n            <p>now loading...</p>\n          </div>\n        }\n        {\n          this.state.isLoaded\n          &&\n          <>\n          {\n            this.state.currentPage === 'WordPage'\n            &&\n            <WordPage />\n          }\n          {\n            this.state.currentPage === 'WordTransPage'\n            &&\n            <WordTransPage />\n          }\n          {\n            this.state.currentPage === 'WordGrammerPage'\n            &&\n            <WordGrammerPage />\n          }\n          {\n            this.state.currentPage === 'GrammerPage'\n            &&\n            <GrammerPage />\n          }\n          {\n            this.state.currentPage === 'GrammerWritingPage'\n            &&\n            <GrammerWritingPage />\n          }\n          <GlobalMenu\n              currentPage={this.state.currentPage}\n              changeCurrentPage= {(val) => changePage(val)}\n          />\n          </>\n        }\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}