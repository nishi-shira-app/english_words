{"version":3,"sources":["components/GlobalMenu.tsx","context/EnglishData.ts","lib/EnglishVoice.ts","components/WordPage/Word.tsx","components/WordPage/Plural.tsx","components/WordPage/Sentence.tsx","components/Pagination.tsx","components/Part.tsx","components/Common/Favorite.tsx","components/SideMenu.tsx","pages/WordPage.tsx","components/WordTransPage/Word.tsx","pages/WordTransPage.tsx","components/WordGrammerPage/Grammer.tsx","pages/WordGrammerPage.tsx","components/GrammerPage/Grammer.tsx","context/GrammerData.ts","pages/GrammerPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalMenu","props","BottomNavigation","showLabels","style","position","bottom","width","onChange","event","newValue","changeCurrentPage","sessionStorage","setItem","BottomNavigationAction","showLabel","label","value","icon","EnglishData","words","axios","get","then","response","Array","isArray","data","values","responseWords","shift","forEach","w","push","id","part","word","plural","partOfSpeech","trans","sentence","sentenceTrans","JSON","stringify","catch","storageWords","getItem","length","parse","favorite","localStorage","sWords","f","s","filter","this","getWordData","reduce","val","cur","includes","some","v","EnglishVoice","text","lang","rate","voice","window","speechSynthesis","getVoices","utter","SpeechSynthesisUtterance","speak","Word","display","height","className","Container","maxWidth","Grid","container","item","xs","Typography","variant","Avatar","component","substr","visibleWord","direction","TextField","error","isInputWordCompleted","fullWidth","inputWordString","o","changeInputWord","target","toLowerCase","changeInputWordCompleted","onClick","speech","spacing","justify","alignItems","Button","color","React","Plural","visiblePlural","isInputPluralCompleted","inputPluralString","changeInputPlural","changeInputPluralCompleted","Sentence","Box","visibleSentence","m","fontSize","speechSpeedRate","Pagination","size","onClickPrev","disabled","index","onClickNext","maxPage","Part","currentPart","Favorite","useState","isFavorite","setIsFavorite","checkIsFavorite","a","category","setFavorite","isF","concat","useEffect","isFa","SideMenu","menuToggle","setMenuToggle","parts","classes","makeStyles","list","useStyles","IconButton","aria-label","edge","Drawer","anchor","open","onClose","List","map","p","ListItem","button","changeCurrentPart","ListItemText","primary","ListItemIcon","Divider","Slider","min","max","step","aria-labelledby","valueLabelDisplay","e","changeSpeechSpeedRate","WordPage","slidePrev","wordIndex","newIndex","setWordIndex","toString","setVisibleWord","setVisiblePlural","setVisibleSentence","setIsInputWordCompleted","setInputWordString","setInputPluralString","firstPart","getFirstPart","wIndex","Number","slides","setSlides","setCurrentPart","setIsInputPluralCompleted","setSpeechSpeedRate","slideNext","getFavoriteWordData","swipeHandles","useSwipeable","onSwipedLeft","absX","onSwipedRight","preventDefaultTouchmoveEvent","trackMouse","getParts","WordTransPage","Grammer","stockWords","ansWords","lastChar","buttonStyle","minWidth","textTransform","margin","wordsStyle","minHeight","translate","isAnsComplated","moveStockWords","moveAnsWords","GrammerPage","getSentences","toLocaleLowerCase","slice","split","answer","setAnswer","setIsAnsComplated","weight","Math","random","sort","b","setStockWords","setAnsWords","i","separateSentence","shuffle","aw","sw","every","GrammerData","sentences","dummyWord","storageSentences","sSentences","d","getGrammerData","getFavoriteSentenceData","App","state","currentPage","setWordData","setGrammerData","theme","createMuiTheme","palette","main","colors","type","changePage","setState","ThemeProvider","CssBaseline","WordGrammerPage","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da9f271d.chunk.js","sourcesContent":["import React from 'react';\nimport { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\n\n\ninterface GlobalMenuProps {\n  currentPage: string,\n  changeCurrentPage: (val:pageNames) => void\n}\n\nconst GlobalMenu:React.FC<GlobalMenuProps> = props => {\n\n  const style:React.CSSProperties = {\n    position:'fixed',\n    bottom:0,\n    width: '100%',\n  }\n\n  return (\n    <BottomNavigation\n      showLabels={true}\n      style={style}\n      onChange={(event, newValue:pageNames) => {\n        props.changeCurrentPage(newValue);\n        sessionStorage.setItem('currentPage', newValue);\n      }}\n    >\n      <BottomNavigationAction showLabel={true} label='Word' value='WordPage' icon={<TextFormatIcon />} />\n      <BottomNavigationAction showLabel={true} label='WordTrans' value='WordTransPage'icon={<TextFormatIcon />} />\n      <BottomNavigationAction showLabel={true} label='Grammer' value='GrammerPage'icon={<TextFieldsIcon />} />\n    </BottomNavigation>\n  );\n}\n\nexport default GlobalMenu;","import axios from \"axios\";\n\ntype sentenceType = {\n  id: string,\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n}\n\ntype wordType = {\n  id: string,\n  part: string,\n  word: string,\n  plural: string,\n  partOfSpeech: string,\n  trans: string,\n  sentence: string,\n  sentenceTrans: string,\n}\n\nexport default class EnglishData {\n  static setWordData() {\n    const sheetId = '10QM4n6jg93YevAhr-yS8SFp8VjaK_lv09VF_HfFxTYk';\n    const sheetName = 'new_horizon_j1_word';\n    const apiKey = 'AIzaSyD61LRLY0MGuJyIU9EQCb4KUDiFJRmxO1o';\n    const words:wordType[] = [];\n    return axios\n    .get('https://sheets.googleapis.com/v4/spreadsheets/'+sheetId+'/values/'+sheetName+'?key='+apiKey)\n    .then(response => {\n      if (!Array.isArray(response.data.values)) {\n        return words;\n      }\n      const responseWords = response.data.values;\n      responseWords.shift();\n      responseWords.forEach((w: any) => {\n        words.push({\n          id: w[0],\n          part: w[1],\n          word: w[2],\n          plural: w[3],\n          partOfSpeech: w[4],\n          trans: w[5],\n          sentence: w[6],\n          sentenceTrans: w[7]\n        })\n      })\n      sessionStorage.setItem('WORDS', JSON.stringify(words));\n    })\n    .catch(() => words);\n  }\n\n  static getWordData() {\n    const storageWords = sessionStorage.getItem('WORDS');\n    const words:wordType[] = [];\n    if (storageWords != null && storageWords.length > 0) {\n      JSON.parse(storageWords).forEach((w:any) => {\n        words.push({\n          id: w['id'],\n          part: w['part'],\n          word: w['word'],\n          plural: w['plural'],\n          partOfSpeech: w['partOfSpeech'],\n          trans: w['trans'],\n          sentence: w['sentence'],\n          sentenceTrans: w['sentenceTrans']\n        })\n      });\n    }\n    return words;\n  }\n\n  static getFavoriteWordData()\n  {\n    let words:wordType[] = [];\n    let favorite = JSON.parse(localStorage.getItem('favorite') ?? '{}');\n    const sWords = sessionStorage.getItem('WORDS');\n    let storageWords:any = [];\n    if (sWords != null && sWords.length > 0) {\n      storageWords = JSON.parse(sWords);\n    } else {\n      return words;\n    }\n    if (Array.isArray(favorite)) {\n      favorite.forEach(f => {\n        if (f['category'] === 'Word') {\n          const s:any = storageWords.filter((s:any) => s['id'] === f['id']);\n          if (s.length > 0) {\n            words.push(\n              {\n                id: s[0]['id'],\n                part: s[0]['part'],\n                word: s[0]['word'],\n                plural: s[0]['plural'],\n                partOfSpeech: s[0]['partOfSpeech'],\n                trans: s[0]['trans'],\n                sentence: s[0]['sentence'],\n                sentenceTrans: s[0]['sentenceTrans']\n              }\n            );\n          }\n        }\n      });\n    }\n    return words;\n  }\n\n  static getFirstPart() {\n    return this.getWordData().reduce((val:string[], cur:any) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, [])[0];\n  }\n\n  static getParts() {\n    return this.getWordData().reduce((val:string[], cur:any) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, []);  \n  }\n\n  static getSentences() {\n    return this.getWordData().reduce((val:sentenceType[], cur:any) => {\n      const w:sentenceType = {\n        id: cur.id,\n        part: cur.part,\n        sentence: cur.sentence, \n        sentenceTrans: cur.sentenceTrans\n      };\n\n      if (!val.some(v => \n        v.part === w.part && v.sentence === w.sentence)) {\n        val.push(w);\n      }\n      return val;\n    }, []);  \n  }\n}\n","class EnglishVoice {\n  static speech(text:string, lang: string, rate: number) {\n    const synth = window.speechSynthesis;\n    const voices = synth.getVoices().filter(voice => voice.lang === lang);\n    const voice = voices[0];\n    const utter = new SpeechSynthesisUtterance();\n    utter.text = text;\n    utter.lang = lang;\n    utter.voice = voice;\n    utter.rate = rate;\n    window.speechSynthesis.speak(utter);\n  }\n}\n\nexport default EnglishVoice;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface WordProps {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    visibleWord: string;\n    isInputWordCompleted: boolean;\n    inputWordString:string;\n    onClick: () => void;\n    changeInputWordCompleted: (val:boolean) => void;\n    changeInputWord: (val:string) => void;    \n}\n\nclass Word extends React.Component<WordProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    \n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <Grid container>\n            <Grid item xs={10}>\n              <Typography variant='subtitle1'>\n                {this.props.trans}\n              </Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <Avatar\n                variant='circular'\n                component='span'\n              >\n                {partOfSpeech.substr(0,1)}\n              </Avatar>\n            </Grid>\n          </Grid>\n          <Typography variant='h4' className={this.props.visibleWord}>\n            {this.props.word}\n          </Typography>\n          <br/>\n          <Grid container direction=\"row\">\n            <TextField\n              error={!this.props.isInputWordCompleted}\n              label= {this.props.isInputWordCompleted ? \"OK\" : \"input word\"}\n              fullWidth={true}\n              value={this.props.inputWordString}\n              variant=\"outlined\"\n              onChange={(o) => \n                {\n                  this.props.changeInputWord(o.target.value.toLowerCase());\n                  if (this.props.word.toLowerCase() === o.target.value.toLowerCase()) {\n                    this.props.changeInputWordCompleted(true);\n                    this.props.onClick();\n                    EnglishVoice.speech('OK. '+this.props.word, 'en-US', 1);\n                  } else {\n                    this.props.changeInputWordCompleted(false);\n                  }\n                }\n              }\n            />\n          </Grid>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => this.props.onClick()}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.word, 'en-US', 1);\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Word;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface PluralProps {\n    plural: string;\n    partOfSpeech: string;\n    trans: string;\n    visiblePlural: string;\n    isInputPluralCompleted: boolean;\n    inputPluralString:string;\n    onClick: () => void;\n    changeInputPluralCompleted: (val:boolean) => void;\n    changeInputPlural: (val:string) => void;    \n}\n\nclass Plural extends React.Component<PluralProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    \n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <Typography variant='h4' className={this.props.visiblePlural}>\n            {this.props.plural}\n          </Typography>\n          <br/>\n          <Grid container direction=\"row\">\n            <TextField\n              error={!this.props.isInputPluralCompleted}\n              label= {this.props.isInputPluralCompleted ? \"OK\" : \"input plural\"}\n              fullWidth={true}\n              value={this.props.inputPluralString}\n              variant=\"outlined\"\n              onChange={(o) => \n                {\n                  this.props.changeInputPlural(o.target.value.toLowerCase());\n                  if (this.props.plural.toLowerCase() === o.target.value.toLowerCase()) {\n                    this.props.changeInputPluralCompleted(true);\n                    this.props.onClick();\n                    EnglishVoice.speech('OK. '+this.props.plural, 'en-US', 1);\n                  } else {\n                    this.props.changeInputPluralCompleted(false);\n                  }\n                }\n              }\n            />\n          </Grid>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => this.props.onClick()}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.plural, 'en-US', 1);\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Plural;","import * as React from 'react';\nimport { Container, Button, Grid } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\n\ninterface SentenceProps {\n    sentence: string;\n    trans: string;\n    visibleSentence: string;\n    speechSpeedRate: number;\n    onClick: () => void;\n}\n\nclass Sentence extends React.Component<SentenceProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <div onClick={() => this.props.onClick()}>\n            <p className=\"word\">{this.props.trans}</p>\n          </div>\n          <Typography component=\"div\">\n            <Box\n              className={this.props.visibleSentence}\n              m={1}\n            >\n              {this.props.sentence}\n            </Box>\n          </Typography>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => this.props.onClick()}\n              >\n                <TranslateIcon\n                  fontSize='small'\n                />\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.sentence, 'en-US', this.props.speechSpeedRate);\n                }}\n              >\n                <VolumeUpIcon\n                  fontSize='small'\n                />\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Sentence;","import * as React from 'react';\nimport { Button, Grid } from '@material-ui/core';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\n\nimport 'fontsource-roboto';\n\ninterface PaginationProps {\n  index: number;\n  maxPage: number;\n  onClickPrev: () => void;\n  onClickNext: () => void;\n} \nconst Pagination: React.FC<PaginationProps> = (props) => {\n  return (\n    <Grid\n    container\n    direction=\"row\"\n    justify=\"space-around\"\n    alignItems=\"flex-end\"\n    >\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => props.onClickPrev()}\n        disabled={props.index === 0 ? true : false}\n      >\n        <ArrowBackIosIcon />\n      </Button> \n      <Button \n        variant=\"contained\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={() => props.onClickNext()}\n        disabled={props.index >= props.maxPage-1 ? true : false}\n      >\n        <ArrowForwardIosIcon />\n      </Button>\n    </Grid>\n  );\n}\n\nexport default Pagination;","import * as React from 'react';\nimport { Grid, Typography, Box } from '@material-ui/core';\n\nconst Part: React.FC<{currentPart: string}> = ({currentPart}) => {\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"space-around\"\n      alignItems=\"flex-end\"\n    >\n        <Typography component=\"div\">\n          <Box\n            fontSize=\"h6.fontSize\" m={1}\n          >\n            {currentPart}\n          </Box>\n        </Typography>        \n    </Grid>\n  );\n}\n\nexport default Part;","import React, { useState, useEffect } from 'react';\nimport { Button, Grid } from '@material-ui/core';\nimport StarIcon from '@material-ui/icons/Star';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport 'fontsource-roboto';\n\ninterface FavoriteProps {\n    category: 'Grammer'|'Word';\n    part: string;\n    id: string;\n}\n\nexport default function Favorite(props:FavoriteProps) {\n    const [isFavorite, setIsFavorite] = useState<boolean>(false);\n    const [id, setId] = useState<string>(props.id);\n\n    const checkIsFavorite = async () => {\n        let favorite:any = [];\n        favorite = await JSON.parse(localStorage.getItem('favorite') ?? '{}');\n        if (Array.isArray(favorite)) {\n            return favorite.filter(f => f['category'] === props.category && f['id'] === props.id).length > 0;\n        } else {\n            return false;\n        }\n    }\n\n    const setFavorite = async () => {\n        let favorite = await JSON.parse(localStorage.getItem('favorite') ?? '{}');\n        if (Array.isArray(favorite)) {\n            await checkIsFavorite()\n            .then((isF:any) => {\n                if (isF) {\n                    favorite = favorite.filter((f:any) => f['category'] !== props.category || f['id'] !== props.id);\n                    setIsFavorite(false);\n                } else {\n                    favorite = favorite.concat(props);\n                    setIsFavorite(true);\n                }\n                localStorage.setItem('favorite', JSON.stringify(favorite));\n            });\n        } else {\n            localStorage.setItem('favorite', JSON.stringify([props]));\n            setIsFavorite(true);\n        }\n    }\n\n    useEffect(() => {\n        checkIsFavorite()\n        .then((isFa:boolean) => {\n            setIsFavorite(isFa);\n        })\n    })\n\n    return (\n        <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"small\"\n            onClick={setFavorite}\n        >\n        {\n            isFavorite ? <StarIcon /> : <StarBorderIcon />\n        }\n        </Button>\n    )\n\n}\n","import React, { useState } from 'react';\nimport { Drawer, IconButton, List, ListItem, Slider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { ListItemText, ListItemIcon } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Divider from '@material-ui/core/Divider';\n\ninterface SideMenuProps {\n  parts: string[];\n  currentPart: string;\n  changeCurrentPart: (val:string) => void;\n  speechSpeedRate: number;\n  changeSpeechSpeedRate: (val:number) => void;\n}\n\nconst SideMenu: React.FC<SideMenuProps> = props => {\n  const [menuToggle, setMenuToggle] = useState(false);\n\n  const toggleDrawer = () => {\n    setMenuToggle(!menuToggle);\n  };\n\n  const parts = props.parts;\n\n  const useStyles = makeStyles({\n    list: {\n      width: '50vw',\n    }\n  });\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <IconButton\n        color=\"inherit\"\n        aria-label=\"open drawer\"\n        edge=\"end\"\n        onClick={() => toggleDrawer()}\n      />\n      <Drawer\n        anchor='right'\n        open={menuToggle}\n        onClose={() => setMenuToggle(false)}\n      >\n        <div className={classes.list}>\n          <CloseIcon\n            onClick={() => setMenuToggle(false)}\n          />\n          <List component=\"nav\" aria-label=\"secondary part\">\n            {\n              parts.map(p => {\n                return (\n                  <ListItem \n                    button\n                    onClick={() => {\n                      props.changeCurrentPart(p);\n                      setMenuToggle(false);\n                    }}\n                    key={p}\n                  >\n                    <ListItemText primary={p}/>\n                    <ListItemIcon>\n                      {\n                        p === props.currentPart\n                        &&\n                        <CheckIcon />\n                      }\n                    </ListItemIcon>\n                  </ListItem>\n                )\n              })\n            }\n            <ListItem\n              button\n              onClick={() => {\n                props.changeCurrentPart('favorite');\n                setMenuToggle(false);\n              }}\n              key={'favorite'}\n            >\n              <ListItemText primary=\"favorite\"/>\n            </ListItem>\n          </List>\n          <Divider />\n          <List component=\"nav\" aria-label=\"thirdry speechSpeed\">\n            <ListItem>\n              <Slider\n                min={0.1}\n                max={1}\n                step={0.1}\n                value={props.speechSpeedRate}\n                aria-labelledby=\"speech-speed-rate\"\n                valueLabelDisplay=\"auto\"\n                onChange={(e, v) => {\n                  let rate:number = props.speechSpeedRate;\n                  if (typeof(v) ===  'number') {\n                    rate = v;\n                  }\n                  props.changeSpeechSpeedRate(rate);\n                }}\n              />\n            </ListItem>\n          </List>\n        </div>\n      </Drawer>\n      <MenuIcon />\n    </>\n  );\n}\n\nexport default SideMenu;","import React, { useState, useEffect } from 'react';\nimport { Container } from '@material-ui/core';\nimport EnglishData from '../context/EnglishData';\nimport Word from '../components/WordPage/Word';\nimport Plural from '../components/WordPage/Plural'\nimport Sentence from '../components/WordPage/Sentence';\nimport Paginate from '../components/Pagination';\nimport Part from '../components/Part';\nimport Favorite from '../components/Common/Favorite';\nimport SideMenu from '../components/SideMenu';\nimport { useSwipeable } from \"react-swipeable\";\nimport { getPlural, getSingular } from 'plury';\n\nconst WordPage: React.FC<{}> = () => {\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const newIndex = wordIndex-1\n      setWordIndex(newIndex);\n      localStorage.setItem('wordWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisiblePlural('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n      setInputPluralString('');\n    }\n  }\n  \n  const firstPart = localStorage.getItem('wordCurrentPart') ?? EnglishData.getFirstPart();\n  const wIndex: number = localStorage.getItem('wordWordIndex') ? Number(localStorage.getItem('wordWordIndex')) : 0;\n  const [slides, setSlides] = useState(EnglishData.getWordData().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(wIndex);\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [visibleWord, setVisibleWord] = useState<string>('word-hidden');\n  const [visiblePlural, setVisiblePlural] = useState<string>('word-hidden');\n  const [visibleSentence, setVisibleSentence] = useState<string>('word-hidden');\n  const [isInputWordCompleted, setIsInputWordCompleted] = useState<boolean>(false);\n  const [isInputPluralCompleted, setIsInputPluralCompleted] = useState<boolean>(false);\n  const [inputWordString, setInputWordString] = useState<string>('');\n  const [inputPluralString, setInputPluralString] = useState<string>('');\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const newIndex = wordIndex+1;\n      setWordIndex(newIndex);\n      localStorage.setItem('wordWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisiblePlural('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n      setInputPluralString('');\n    }\n  }\n\n  const changeInputWordCompleted = (val: boolean) => {\n    setIsInputWordCompleted(val);\n  }\n\n  const changeInputPluralCompleted = (val:boolean) => {\n    setIsInputPluralCompleted(val);\n  }\n\n  const changeInputWord = (val: string) => {\n    setInputWordString(val);\n  }\n\n  const changeInputPlural = (val: string) => {\n    setInputPluralString(val);\n  }\n\n  const changeCurrentPart = (val: string) => {\n    let s:any = [];\n    if (currentPart !== val) {\n      if (val === 'favorite') {\n        s = EnglishData.getFavoriteWordData();\n      } else {\n        s = EnglishData.getWordData().filter(w => w.part === val);\n      }\n      setSlides(s)\n      setCurrentPart(val);\n      localStorage.setItem('wordCurrentPart', val);\n      setWordIndex(0);\n      localStorage.setItem('wordWordIndex', '0');\n      setVisibleWord('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n      setInputPluralString('');\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  useEffect(() => {\n    changeCurrentPart(firstPart);\n  }, []);\n\n  return (\n    <>\n      <SideMenu\n        parts={EnglishData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container maxWidth=\"sm\">\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        {\n          slides.length == 0\n          &&\n          <p>no data</p>\n        }\n        {\n          slides.length > 0\n          &&\n          <>\n            <div {...swipeHandles}>\n              <Word\n                word={slides[wordIndex].word}\n                partOfSpeech={slides[wordIndex].partOfSpeech}\n                trans={slides[wordIndex].trans}\n                visibleWord = {visibleWord}\n                isInputWordCompleted={isInputWordCompleted}\n                inputWordString={inputWordString}\n                onClick={() => setVisibleWord('word-visible')}\n                changeInputWordCompleted={(val) => changeInputWordCompleted(val)}\n                changeInputWord={(val) => changeInputWord(val)}\n              />\n              {\n                slides[wordIndex].plural\n                &&\n                <Plural\n                  plural={slides[wordIndex].plural}\n                  partOfSpeech={slides[wordIndex].partOfSpeech}\n                  trans={slides[wordIndex].trans}\n                  visiblePlural = {visiblePlural}\n                  isInputPluralCompleted={isInputPluralCompleted}\n                  inputPluralString={inputPluralString}\n                  onClick={() => setVisiblePlural('word-visible')}\n                  changeInputPluralCompleted={(val) => changeInputPluralCompleted(val)}\n                  changeInputPlural={(val) => changeInputPlural(val)}\n                />\n              }\n            </div>\n            <hr/>\n            <Sentence\n              sentence={slides[wordIndex].sentence}\n              trans={slides[wordIndex].sentenceTrans}\n              visibleSentence={visibleSentence}\n              speechSpeedRate={speechSpeedRate}\n              onClick = {() => setVisibleSentence('word-visible')}\n            />\n            <hr/>\n            <Favorite \n              category='Word'\n              part={currentPart}\n              id={slides[wordIndex].id}\n            />\n          </>\n        }\n        <hr/>\n        <Part\n          currentPart={currentPart}\n        />\n      </Container>\n    </>\n  )\n} \n\nexport default WordPage;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface WordProps {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    visibleWord: string;\n    isInputWordCompleted: boolean;\n    inputWordString:string;\n    onClick: () => void;\n    changeInputWordCompleted: (val:boolean) => void;\n    changeInputWord: (val:string) => void;    \n}\n\nclass Word extends React.Component<WordProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    \n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <Grid container>\n            <Grid item xs={10}>\n              <Typography variant='subtitle1'>\n                {this.props.word}\n              </Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <Avatar\n                variant='circular'\n                component='span'\n              >\n                {partOfSpeech.substr(0,1)}\n              </Avatar>\n            </Grid>\n          </Grid>\n          <Typography variant='h5' className={this.props.visibleWord}>\n            {this.props.trans}\n          </Typography>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => this.props.onClick()}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.word, 'en-US', 1);\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Word;","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport EnglishData from '../context/EnglishData';\nimport Word from '../components/WordTransPage/Word';\nimport Paginate from '../components/Pagination';\nimport Part from '../components/Part';\nimport SideMenu from '../components/SideMenu';\nimport { useSwipeable } from \"react-swipeable\";\n\nconst WordTransPage: React.FC<{}> = () => {\n  const firstPart = localStorage.getItem('wordTransCurrentPart') ?? EnglishData.getFirstPart();\n  const [slides, setSlides] = useState(EnglishData.getWordData().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(0);\n  const [visibleWord, setVisibleWord] = useState<string>('word-hidden');\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [visibleSentence, setVisibleSentence] = useState<string>('word-hidden');\n  const [isInputWordCompleted, setIsInputWordCompleted] = useState<boolean>(false);\n  const [inputWordString, setInputWordString] = useState<string>('');\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const newIndex = wordIndex-1\n      setWordIndex(newIndex);\n      localStorage.setItem('wordTransWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const newIndex = wordIndex+1;\n      setWordIndex(newIndex);\n      localStorage.setItem('wordTransWordIndex', newIndex.toString());\n      setVisibleWord('word-hidden');\n      setVisibleSentence('word-hidden');\n      setIsInputWordCompleted(false);\n      setInputWordString('');\n    }\n  }\n\n  const changeInputWordCompleted = (val: boolean) => {\n    setIsInputWordCompleted(val);\n  }\n\n  const changeInputWord = (val: string) => {\n    setInputWordString(val);\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      const s = EnglishData.getWordData().filter(w => w.part === val);\n        setSlides(s)\n        setCurrentPart(val);\n        localStorage.setItem('wordTransCurrentPart', val);\n        setWordIndex(0);\n        localStorage.setItem('wordTransWordIndex', '0');\n        setVisibleWord('word-hidden');\n        setVisibleSentence('word-hidden');\n        setIsInputWordCompleted(false);\n        setInputWordString('');\n      }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  return (\n    <>\n      <SideMenu\n        parts={EnglishData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container maxWidth=\"sm\">\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        <div {...swipeHandles}>\n          <Word\n            word={slides[wordIndex].word}\n            partOfSpeech={slides[wordIndex].partOfSpeech}\n            trans={slides[wordIndex].trans}\n            visibleWord = {visibleWord}\n            isInputWordCompleted={isInputWordCompleted}\n            inputWordString={inputWordString}\n            onClick={() => setVisibleWord('word-visible')}\n            changeInputWordCompleted={(val) => changeInputWordCompleted(val)}\n            changeInputWord={(val) => changeInputWord(val)}\n          />\n        </div>\n        <hr/>\n        <Part\n          currentPart={currentPart}\n        />\n      </Container>\n    </>\n  )\n} \n\nexport default WordTransPage;","import React from 'react';\nimport { Container, Button, Grid, Typography } from '@material-ui/core';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport EnglishVoice from '../../lib/EnglishVoice';\n\ninterface GrammerProps {\n  answer: string[];\n  stockWords: string[];\n  ansWords: string[];\n  sentence: string;\n  translate: string;\n  isAnsComplated: boolean;\n  speechSpeedRate: number;\n  moveAnsWords: (w:string, i:number) => void;\n  moveStockWords: (w:string, i:number) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const stockWords = props.stockWords;\n  const ansWords = props.ansWords;\n  const lastChar:string = props.sentence.substr(-1);\n\n  const buttonStyle: React.CSSProperties = {\n    display: 'inline-block',\n    minWidth: '20px',\n    height: '40px',\n    textTransform: 'lowercase',\n    margin: '5px',\n  }\n\n  const wordsStyle: React.CSSProperties = {\n    minHeight: '30vh',\n  }\n\n  const style: React.CSSProperties = {\n    display: 'inline-block',\n    width: '100%',\n    height: '20%',\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            ansWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color={props.isAnsComplated ? 'default' : 'secondary'}\n                  variant={props.isAnsComplated ? 'outlined' : 'contained'}\n                  size=\"small\"\n                  onClick={() => props.moveStockWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n          <Button\n            style={buttonStyle}\n            color=\"default\"\n            variant=\"text\"\n            size=\"small\"\n            key=\"lastChar\"\n          >\n            {lastChar}\n          </Button>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            stockWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color=\"primary\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  onClick={() => props.moveAnsWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n        </Grid>\n      </Container>\n      <hr />\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          <Button\n            style={style}\n            variant=\"outlined\"\n            onClick={() => {\n              EnglishVoice.speech(props.sentence, 'en-US', props.speechSpeedRate);\n            }}\n          >\n            <VolumeUpIcon\n              fontSize='small'\n            />\n          </Button>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/WordGrammerPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport Favorite from '../components/Common/Favorite';\nimport EnglishData from '../context/EnglishData';\nimport EnglishVoice from '../lib/EnglishVoice';\nimport { useSwipeable } from 'react-swipeable';\n\nconst GrammerPage:React.FC = () => {\n  const firstPart = localStorage.getItem('grammerCurrentPart') ?? EnglishData.getFirstPart();\n  const [slides, setSlides] = useState(EnglishData.getSentences().filter(w => w.part === EnglishData.getFirstPart()));\n  const [wordIndex, setWordIndex] = useState<number>(0);\n  const [currentPart, setCurrentPart] = useState<string>(firstPart);\n  const [answer, setAnswer] = useState<string[]>(slides[wordIndex].sentence.toLocaleLowerCase().slice(0, -1).split(' '));\n  const [isAnsComplated, setIsAnsComplated] = useState<boolean>(false);\n  const [stockWords, setStockWords] = useState<string[]>(\n    answer\n      .map(function (a) { return { weight: Math.random(), value: a } })\n      .sort(function (a, b) { return a.weight - b.weight })\n      .map(function (a) { return a.value })\n  );\n  const [ansWords, setAnsWords] = useState<string[]>([]);\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const i:number = wordIndex - 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n      setWordIndex(i);\n      setAnswer(s);\n      setStockWords(shuffle(s));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n\n      setWordIndex(i);\n      setAnswer(s);\n      setStockWords(shuffle(s));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      const s = EnglishData.getSentences().filter(w => w.part === val);\n      setSlides(s)\n      setCurrentPart(val);\n      setWordIndex(0);\n      localStorage.setItem('grammerCurrentPart', val);\n      localStorage.setItem('grammerWordIndex', '0');\n\n      const a:string[] = separateSentence(s[0].sentence);\n      setAnswer(a);\n      setStockWords(shuffle(a));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const moveAnsWords = (word: string, index: number) => {\n    const aw = ansWords;\n    const sw = stockWords.filter((v, i) => {\n      return i !== index;\n    });\n    aw.push(word);\n\n    setAnsWords(aw);\n    setStockWords(sw);\n\n    EnglishVoice.speech(word, 'en-US', 1);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const moveStockWords = (word: string, index: number) => {\n    const sw = stockWords;\n    const aw = ansWords.filter((v, i) => {\n      return i !== index;\n    });\n    sw.push(word);\n\n    setStockWords(sw);\n    setAnsWords(aw);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const separateSentence = (s:string) => {\n    return s.toLocaleLowerCase().slice(0, -1).split(' ');\n  }\n\n  const shuffle = (w:string[]) => {\n    return w.map(function (a) { return { weight: Math.random(), value: a } })\n    .sort(function (a, b) { return a.weight - b.weight })\n    .map(function (a) { return a.value })\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  return (\n    <>\n      <SideMenu\n        parts={EnglishData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container>\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        <div {...swipeHandles}>\n          <Grammer\n            answer={answer}\n            stockWords={stockWords}\n            ansWords={ansWords}\n            sentence={slides[wordIndex].sentence}\n            translate={slides[wordIndex].sentenceTrans}\n            isAnsComplated={isAnsComplated}\n            speechSpeedRate={speechSpeedRate}\n            moveAnsWords={(w, i) => moveAnsWords(w, i)}\n            moveStockWords={(w, i) => moveStockWords(w, i)}\n          />\n        </div>\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerPage;","import React from 'react';\nimport { Container, Button, Grid, Typography } from '@material-ui/core';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport Favorite from '../Common/Favorite';\nimport EnglishVoice from '../../lib/EnglishVoice';\n\ninterface GrammerProps {\n  id: string;\n  currentPart: string;\n  answer: string[];\n  stockWords: string[];\n  ansWords: string[];\n  sentence: string;\n  translate: string;\n  isAnsComplated: boolean;\n  moveAnsWords: (w:string, i:number) => void;\n  moveStockWords: (w:string, i:number) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const stockWords = props.stockWords;\n  const ansWords = props.ansWords;\n  const lastChar:string = props.sentence.substr(-1);\n\n  const buttonStyle: React.CSSProperties = {\n    display: 'inline-block',\n    minWidth: '20px',\n    height: '40px',\n    textTransform: 'lowercase',\n    margin: '5px',\n  }\n\n  const wordsStyle: React.CSSProperties = {\n    height: '30vh',\n  }\n\n  const style: React.CSSProperties = {\n    display: 'inline-block',\n    width: '100%',\n    height: '20%',\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            ansWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color={props.isAnsComplated ? 'default' : 'secondary'}\n                  variant={props.isAnsComplated ? 'outlined' : 'contained'}\n                  size=\"small\"\n                  onClick={() => props.moveStockWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n          <Button\n            style={buttonStyle}\n            color=\"default\"\n            variant=\"text\"\n            size=\"small\"\n            key=\"lastChar\"\n          >\n            {lastChar}\n          </Button>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            stockWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color=\"primary\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  onClick={() => props.moveAnsWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n        </Grid>\n      </Container>\n      <hr />\n      <Container maxWidth=\"sm\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-around\"\n          alignItems=\"flex-end\"\n        >\n          <Button\n            variant=\"outlined\"\n            onClick={() => {\n              EnglishVoice.speech(props.sentence, 'en-US', 1);\n            }}\n          >\n            <VolumeUpIcon\n              fontSize='small'\n            />\n          </Button>\n          <Favorite \n            category='Grammer'\n            part={props.currentPart}\n            id={props.id}\n          />\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","import axios from \"axios\";\n\ntype sentenceType = {\n  id: string,\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n  dummyWord: string,\n}\n\ntype grammerType = {\n  id: string,\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n  dummyWord: string,\n}\n\nexport default class GrammerData {\n  static setGrammerData() {\n    const sheetId = '10QM4n6jg93YevAhr-yS8SFp8VjaK_lv09VF_HfFxTYk';\n    const sheetName = 'csv_new_horizon_j1';\n    const apiKey = 'AIzaSyD61LRLY0MGuJyIU9EQCb4KUDiFJRmxO1o';\n    const sentences:grammerType[] = [];\n    return axios\n    .get('https://sheets.googleapis.com/v4/spreadsheets/'+sheetId+'/values/'+sheetName+'?key='+apiKey)\n    .then(response => {\n      if (!Array.isArray(response.data.values)) {\n        return sentences;\n      }\n      const responseWords = response.data.values;\n      responseWords.shift();\n      responseWords.forEach((w: any) => {\n        sentences.push({\n          id: w[0],\n          part: w[1],\n          sentence: w[2],\n          sentenceTrans: w[3],\n          dummyWord: w[4],\n        })\n      })\n      sessionStorage.setItem('SENTENCES', JSON.stringify(sentences));\n    })\n    .catch(() => sentences);\n  }\n\n  static getGrammerData() {\n    const storageSentences = sessionStorage.getItem('SENTENCES');\n    const sentences:grammerType[] = [];\n    if (storageSentences != null && storageSentences.length > 0) {\n      JSON.parse(storageSentences).forEach((s:any) => {\n        sentences.push({\n          id: s['id'],\n          part: s['part'],\n          sentence: s['sentence'],\n          sentenceTrans: s['sentenceTrans'],\n          dummyWord: s['dummyWord'],\n        })\n      });\n    }\n    return sentences;\n  }\n\n  static getFavoriteSentenceData()\n  {\n    let sentences:sentenceType[] = [];\n    let favorite = JSON.parse(localStorage.getItem('favorite') ?? '{}');\n    const sSentences = sessionStorage.getItem('SENTENCES');\n    let storageSentences:any = [];\n    if (sSentences != null && sSentences.length > 0) {\n      storageSentences = JSON.parse(sSentences);\n    } else {\n      return sentences;\n    }\n    if (Array.isArray(favorite)) {\n      favorite.forEach(f => {\n        if (f['category'] === 'Grammer') {\n          const s:any = storageSentences.filter((s:any) => s['id'] === f['id']);\n          if (s.length > 0) {\n            const d = s[0];\n            sentences.push(\n              {\n                id: d['id'],\n                part: d['part'],\n                sentence: d['sentence'],\n                sentenceTrans: d['sentenceTrans'],\n                dummyWord: d['dummyWord'],\n              }\n            );\n          }\n        }\n      });\n    }\n    return sentences;\n  }\n\n  static getFirstPart() {\n    return this.getGrammerData().reduce((val:string[], cur) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, [])[0];  \n  }\n\n  static getParts() {\n    return this.getGrammerData().reduce((val:string[], cur) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, []);  \n  }\n\n  static getSentences() {\n    return this.getGrammerData().reduce((val:sentenceType[], cur) => {\n      const w:sentenceType = {\n        id: cur.id,\n        part: cur.part,\n        sentence: cur.sentence, \n        sentenceTrans: cur.sentenceTrans,\n        dummyWord: cur.dummyWord,\n      };\n\n      if (!val.some(v => \n        v.part === w.part && v.sentence === w.sentence)) {\n        val.push(w);\n      }\n      return val;\n    }, []);  \n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport { Container } from '@material-ui/core';\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/GrammerPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport GrammerData from '../context/GrammerData';\nimport Favorite from '../components/Common/Favorite';\nimport Part from '../components/Part';\nimport EnglishVoice from '../lib/EnglishVoice';\nimport { useSwipeable } from 'react-swipeable';\n\nconst GrammerPage:React.FC = () => {\n  const firstPart = localStorage.getItem('grammerCurrentPart') ?? GrammerData.getFirstPart();\n  const wIndex: number = localStorage.getItem('grammerWordIndex') ? Number(localStorage.getItem('grammerWordIndex')) : 0;\n  const [slides, setSlides] = useState(GrammerData.getSentences().filter(w => w.part === firstPart));\n  const [wordIndex, setWordIndex] = useState<number>(wIndex);\n  const [currentPart, setCurrentPart] = useState<string>('');\n  const [answer, setAnswer] = useState<string[]>([]);\n  const [isAnsComplated, setIsAnsComplated] = useState<boolean>(false);\n  const answerAddDummy = answer.slice();\n  const [stockWords, setStockWords] = useState<string[]>([]);\n  const [ansWords, setAnsWords] = useState<string[]>([]);\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const i:number = wordIndex - 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n      setWordIndex(i);\n      localStorage.setItem('grammerWordIndex', i.toString());\n      setAnswer(s);\n      const w:string[] = s.slice();\n      w.push(slides[i].dummyWord.toLocaleLowerCase());\n      setStockWords(shuffle(w));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n      setWordIndex(i);\n      localStorage.setItem('grammerWordIndex', i.toString());\n      setAnswer(s);\n      const w:string[] = s.slice();\n      w.push(slides[i].dummyWord.toLocaleLowerCase());\n      setStockWords(shuffle(w));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      let s:any = [];\n      if (val === 'favorite') {\n        s = GrammerData.getFavoriteSentenceData();\n      } else {\n        s = GrammerData.getSentences().filter(w => w.part === val);\n      }\n      setSlides(s)\n      setCurrentPart(val);\n      localStorage.setItem('grammerCurrentPart', val);\n      setWordIndex(0);\n      localStorage.setItem('grammerWordIndex', '0');\n\n      const a:string[] = s.length > 0 ? separateSentence(s[0].sentence) : [];\n      setAnswer(a);\n      const w:string[] = a.slice();\n      w.push(s.length > 0 ? s[0].dummyWord.toLocaleLowerCase(): '');\n      setStockWords(shuffle(w));\n      setAnsWords([]);\n      setIsAnsComplated(false);\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const moveAnsWords = (word: string, index: number) => {\n    const aw = ansWords;\n    const sw = stockWords.filter((v, i) => {\n      return i !== index;\n    });\n    aw.push(word);\n\n    setAnsWords(aw);\n    setStockWords(sw);\n\n    EnglishVoice.speech(word, 'en-US', 1);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const moveStockWords = (word: string, index: number) => {\n    const sw = stockWords;\n    const aw = ansWords.filter((v, i) => {\n      return i !== index;\n    });\n    sw.push(word);\n\n    setStockWords(sw);\n    setAnsWords(aw);\n    if (answer.length === aw.length && answer.every((a, index) => a === aw[index])) {\n      setIsAnsComplated(true);\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    } else {\n      setIsAnsComplated(false);\n    }\n  }\n\n  const separateSentence = (s:string) => {\n    return s.toLocaleLowerCase().slice(0, -1).split('  ');\n  }\n\n  const shuffle = (w:string[]) => {\n    return w.map(function (a) { return { weight: Math.random(), value: a } })\n    .sort(function (a, b) { return a.weight - b.weight })\n    .map(function (a) { return a.value })\n  }\n\n  const swipeHandles = useSwipeable({\n    onSwipedLeft: (e) => {\n      if (e.absX >= 140 ) {\n        slideNext();\n      }\n    },\n    onSwipedRight: (e) => {\n      if (e.absX >= 140) {\n        slidePrev();\n      }\n    },\n    preventDefaultTouchmoveEvent: true,\n    trackMouse: true\n  });\n\n  useEffect(() => {\n    changeCurrentPart(firstPart);\n  }, []);\n\n  return (\n    <>\n      <SideMenu\n        parts={GrammerData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container>\n        <Paginate\n          index={wordIndex}\n          maxPage={slides.length}\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        {\n          slides.length == 0\n          &&\n          <p>no data</p>\n        }\n        {\n          slides.length > 0\n          &&\n          <>\n            <div {...swipeHandles}>\n              <Grammer\n                id={slides[wordIndex].id}\n                currentPart={currentPart}\n                answer={answer}\n                stockWords={stockWords}\n                ansWords={ansWords}\n                sentence={slides[wordIndex].sentence}\n                translate={slides[wordIndex].sentenceTrans}\n                isAnsComplated={isAnsComplated}\n                moveAnsWords={(w, i) => moveAnsWords(w, i)}\n                moveStockWords={(w, i) => moveStockWords(w, i)}\n              />\n            </div>\n          </>\n        }\n        <hr/>\n        <Part\n          currentPart={currentPart}\n        />\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerPage;","import React from 'react';\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport * as colors from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport 'fontsource-roboto';\nimport GlobalMenu from './components/GlobalMenu';\nimport WordPage from './pages/WordPage';\nimport WordTransPage from './pages/WordTransPage';\nimport WordGrammerPage from './pages/WordGrammerPage';\nimport GrammerPage from './pages/GrammerPage';\nimport EnglishData from './context/EnglishData';\nimport GrammerData from './context/GrammerData';\n\ninterface AppProps {\n}\n\ninterface AppState {\n  currentPage: pageNames\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n\n    const sPage:readonly string[] = ['WordPage'];\n    const cPage:pageNames = 'WordPage';\n    this.state = {\n      currentPage: cPage\n    }\n    EnglishData.setWordData();\n    GrammerData.setGrammerData();\n  }\n\n  render () {\n    const theme = createMuiTheme({\n      palette: {\n        primary: {\n          main: colors.blue[800],\n        },\n        type: 'dark',\n      },\n    });\n\n    const changePage = async (val: pageNames) => {\n      this.setState({\n        currentPage: val\n      })\n      if (val === 'WordPage') {\n        await EnglishData.setWordData();\n      } else if (val === 'WordTransPage') {\n        await GrammerData.setGrammerData();\n      }\n    }\n\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        {\n          this.state.currentPage === 'WordPage'\n          &&\n          <WordPage />\n        }\n        {\n          this.state.currentPage === 'WordTransPage'\n          &&\n          <WordTransPage />\n        }\n        {\n          this.state.currentPage === 'WordGrammerPage'\n          &&\n          <WordGrammerPage />\n        }\n        {\n          this.state.currentPage === 'GrammerPage'\n          &&\n          <GrammerPage />\n        }\n        <GlobalMenu\n            currentPage={this.state.currentPage}\n            changeCurrentPage= {(val) => changePage(val)}\n        />\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}