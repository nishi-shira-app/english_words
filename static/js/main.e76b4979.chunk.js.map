{"version":3,"sources":["WordComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WordComponent","style","display","width","height","voice","window","speechSynthesis","getVoices","filter","lang","className","Container","maxWidth","onClick","props","this","word","visibleTrans","trans","Grid","container","direction","spacing","justify","alignItems","item","xs","Button","variant","color","utter","SpeechSynthesisUtterance","text","speak","React","App","state","slides","wordIndex","visibleSentenceTrans","theme","createMuiTheme","palette","primary","main","colors","type","ThemeProvider","CssBaseline","setState","sentence","sentenceTrans","undefined","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e76b4979.chunk.js","sourcesContent":["import * as React from 'react';\nimport { Container, Button, Grid } from '@material-ui/core';\nimport 'fontsource-roboto';\n\ninterface WordComponentProps {\n    word: string;\n    trans: string;\n    visibleTrans: string;\n    onClick: () => void;\n}\n\nclass WordComponent extends React.Component<WordComponentProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n\n    const voices = window.speechSynthesis.getVoices().filter(voice => voice.lang === 'en-US');\n    const voice = voices[0];\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <div onClick={() => this.props.onClick()}>\n            <p className=\"word\">{this.props.word}</p>\n          </div>\n          <div\n            className={this.props.visibleTrans}\n          >\n            {this.props.trans}\n          </div>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => this.props.onClick()}\n              >\n                和訳表示\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                color=\"secondary\"\n                onClick={() => {\n                  const utter = new SpeechSynthesisUtterance();\n                  utter.text = this.props.word;\n                  utter.lang = \"en-US\";\n                  utter.voice = voice;\n                  window.speechSynthesis.speak(utter);\n                }}\n              >\n                play\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default WordComponent;","import * as React from 'react';\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { Container, Grid, Button } from '@material-ui/core';\nimport * as colors from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport 'fontsource-roboto';\nimport WordComponent from './WordComponent';\n\ninterface AppProps {\n}\n\ninterface AppState {\n  slides?: {\n    word: string;\n    trans: string;\n    sentence: string;\n    sentenceTrans: string;\n  }[];\n  wordIndex?: number;\n  visibleTrans?: string;\n  visibleSentenceTrans?: string;\n}\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    \n    this.state = {\n      slides: [\n        {'word':'I', 'trans':'私は', 'sentence': \"I have a pen.\", 'sentenceTrans': '私はペンを持っています。'},\n        {'word':'my', 'trans':'私の', 'sentence': \"You are my friend.\", 'sentenceTrans': '貴方は私の友達です。'}, \n        {'word':'me', 'trans':'私を', 'sentence': \"Ken doesn't know me.\", 'sentenceTrans': 'ケンは私を知りません。'},\n      ],\n      wordIndex: 1,\n      visibleTrans: 'translate-hidden',\n      visibleSentenceTrans: 'translate-hidden'\n    }\n  }\n\n  render () {\n    const theme = createMuiTheme({\n      palette: {\n        primary: {\n          main: colors.blue[800],\n        },\n        type: \"light\",\n      },\n    });\n\n    const slidePrev = () => {\n      if (this.state.wordIndex === undefined) return;\n      if (this.state.wordIndex > 0) {\n        this.setState({\n          wordIndex: this.state.wordIndex - 1,\n          visibleTrans: 'translate-hidden',\n          visibleSentenceTrans: 'translate-hidden'\n        })\n      }\n    };\n  \n    const slideNext = () => {\n      if (this.state.wordIndex === undefined || this.state.slides === undefined) return;\n\n      if (this.state.wordIndex < this.state.slides.length-1) {\n        this.setState({\n          wordIndex: this.state.wordIndex + 1,\n          visibleTrans: 'translate-hidden',\n          visibleSentenceTrans: 'translate-hidden'\n        })\n      }\n    };\n    \n    const slides = this.state.slides ?? [] ;\n    const wordIndex = this.state.wordIndex ?? 0;\n    const visibleTrans = this.state.visibleTrans ?? 'translate-hidden';\n    const visibleSentenceTrans = this.state.visibleSentenceTrans ?? 'translate-hidden';\n\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Container maxWidth=\"sm\">\n          <WordComponent\n            word={slides[wordIndex].word}\n            trans={slides[wordIndex].trans}\n            visibleTrans = {visibleTrans}\n            onClick = {() => this.setState({visibleTrans:'translate-visible'})}\n          />\n          <hr/>\n          <WordComponent\n            word={slides[wordIndex].sentence}\n            trans={slides[wordIndex].sentenceTrans}\n            visibleTrans = {visibleSentenceTrans}\n            onClick = {() => this.setState({visibleSentenceTrans:'translate-visible'})}\n          />\n          <hr/>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"space-around\"\n            alignItems=\"flex-end\"\n          >\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {slidePrev()}}\n            >\n              Prev\n            </Button> \n            <Button \n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {slideNext()}}\n            >\n              Next\n            </Button>\n          </Grid>\n        </Container>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}