{"version":3,"sources":["components/GlobalMenu.tsx","context/EnglishData.ts","lib/EnglishVoice.ts","components/WordPage/Word.tsx","components/WordPage/Sentence.tsx","components/Pagination.tsx","components/Part.tsx","components/SideMenu.tsx","pages/WordPage.tsx","components/WordGrammerPage/Grammer.tsx","pages/WordGrammerPage.tsx","components/GrammerPage/Grammer.tsx","context/GrammerData.ts","pages/GrammerPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GlobalMenu","props","BottomNavigation","showLabels","style","position","bottom","width","onChange","event","newValue","changeCurrentPage","BottomNavigationAction","showLabel","label","value","icon","EnglishData","this","WORDS","reduce","val","cur","includes","part","push","w","sentence","sentenceTrans","some","v","EnglishVoice","text","lang","rate","voice","window","speechSynthesis","getVoices","filter","utter","SpeechSynthesisUtterance","speak","Word","display","height","partOfSpeech","length","className","Container","maxWidth","Grid","container","item","xs","Typography","variant","trans","Avatar","component","substr","visibleWord","word","direction","TextField","error","isInputWordCompleted","fullWidth","inputWordString","o","changeInputWord","target","toLowerCase","changeInputWordCompleted","onClick","speech","spacing","justify","alignItems","Button","color","React","Sentence","Box","visibleSentence","m","fontSize","speechSpeedRate","Pagination","onClickPrev","onClickNext","Part","currentPart","SideMenu","useState","menuToggle","setMenuToggle","parts","classes","makeStyles","list","useStyles","IconButton","aria-label","edge","Drawer","anchor","open","onClose","List","map","p","ListItem","button","changeCurrentPart","ListItemText","primary","ListItemIcon","Divider","Slider","min","max","step","aria-labelledby","valueLabelDisplay","e","changeSpeechSpeedRate","WordPage","getFirstPart","slides","setSlides","wordIndex","setWordIndex","setVisibleWord","setCurrentPart","setVisibleSentence","setIsInputWordCompleted","setInputWordString","setSpeechSpeedRate","getParts","s","Grammer","stockWords","ansWords","buttonStyle","minWidth","textTransform","margin","wordsStyle","translate","index","size","moveStockWords","moveAnsWords","GrammerPage","getSentences","toLocaleLowerCase","replace","split","answer","setAnswer","a","weight","Math","random","sort","b","setStockWords","setAnsWords","separateSentence","shuffle","i","aw","sw","every","GrammerData","App","state","currentPage","theme","createMuiTheme","palette","main","colors","type","ThemeProvider","CssBaseline","WordGrammerPage","setState","changePage","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50b2122e.chunk.js","sourcesContent":["import React from 'react';\nimport { BottomNavigation, BottomNavigationAction } from '@material-ui/core';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport TextFormatIcon from '@material-ui/icons/TextFormat';\n\n\ninterface GlobalMenuProps {\n  currentPage: string,\n  changeCurrentPage: (val:pageNames) => void\n}\n\nconst GlobalMenu:React.FC<GlobalMenuProps> = props => {\n\n  const style:React.CSSProperties = {\n    position:'fixed',\n    bottom:0,\n    width: '100%',\n  }\n\n  return (\n    <BottomNavigation\n      showLabels={true}\n      style={style}\n      onChange={(event, newValue:pageNames) => {\n        props.changeCurrentPage(newValue);\n      }}\n    >\n      <BottomNavigationAction showLabel={true} label='Word' value='WordPage' icon={<TextFormatIcon />} />\n      <BottomNavigationAction showLabel={true} label='Grammer1' value='WordGrammerPage'icon={<TextFieldsIcon />} />\n      <BottomNavigationAction showLabel={true} label='Grammer2' value='GrammerPage'icon={<TextFieldsIcon />} />\n    </BottomNavigation>\n  );\n}\n\nexport default GlobalMenu;","type sentenceType = {\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n}\n\nexport default class EnglishData {\n  static getFirstPart() {\n    return this.WORDS.reduce((val:string[], cur) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, [])[0];  \n  }\n\n  static getParts() {\n    return this.WORDS.reduce((val:string[], cur) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, []);  \n  }\n\n  static getSentences() {\n    return this.WORDS.reduce((val:sentenceType[], cur) => {\n      const w:sentenceType = {\n        part: cur.part,\n        sentence: cur.sentence, \n        sentenceTrans: cur.sentenceTrans\n      };\n\n      if (!val.some(v => \n        v.part === w.part && v.sentence === w.sentence)) {\n        val.push(w);\n      }\n      return val;\n    }, []);  \n  }\n\n  static readonly WORDS = \n  [{\"id\":\"1\",\"part\":\"lesson01-01\",\"word\":\"Britain\",\"partOfSpeech\":\"名詞\",\"trans\":\"イギリス\",\"sentence\":\"Do you know anything about narrow boats in Britain?\",\"sentenceTrans\":\"あなたはイギリスのナローボートについて何か知っていますか？\"},{\"id\":\"2\",\"part\":\"lesson01-01\",\"word\":\"British\",\"partOfSpeech\":\"形容詞\",\"trans\":\"イギリスの\",\"sentence\":\"They are boats you see in the British canals.\",\"sentenceTrans\":\"これらは イギリスの運河で見るボートです。\"},{\"id\":\"3\",\"part\":\"lesson01-01\",\"word\":\"canal\",\"partOfSpeech\":\"名詞\",\"trans\":\"運河\",\"sentence\":\"They are boats you see in the British canals.\",\"sentenceTrans\":\"これらは イギリスの運河で見るボートです。\"},{\"id\":\"4\",\"part\":\"lesson01-01\",\"word\":\"narrow\",\"partOfSpeech\":\"形容詞\",\"trans\":\"狭い\",\"sentence\":\"The boats are truly narrow; they are about two meters wide.\",\"sentenceTrans\":\"そのボートは ほんとに狭いです、それらは約２mの幅です。\"},{\"id\":\"5\",\"part\":\"lesson01-01\",\"word\":\"bedroom\",\"partOfSpeech\":\"名詞\",\"trans\":\"寝室\",\"sentence\":\"They are, however, long enough to have bedrooms, kitchens, and bathrooms in them.\",\"sentenceTrans\":\"これらはしかしながら、寝室やキッチンやお風呂を設置するのに十分です。\"},{\"id\":\"6\",\"part\":\"lesson01-01\",\"word\":\"camping car\",\"partOfSpeech\":\"名詞\",\"trans\":\"キャンピングカー\",\"sentence\":\"Narrow boats are like camping cars.\",\"sentenceTrans\":\"ナローボートは キャンピングカーのようなものです。\"},{\"id\":\"7\",\"part\":\"lesson01-01\",\"word\":\"people\",\"partOfSpeech\":\"名詞\",\"trans\":\"人々\",\"sentence\":\"People can live on them for weeks at a time.\",\"sentenceTrans\":\"人々は、一度に何週間もこれらの上で過ごすことができる。\"},{\"id\":\"8\",\"part\":\"lesson01-01\",\"word\":\"spend\",\"partOfSpeech\":\"動詞\",\"trans\":\"過ごす\",\"sentence\":\"These days, more and more people are spending their vacations on narrow boats.\",\"sentenceTrans\":\"最近、ますます休暇をナローボートで過ごす人が増えました。\"},{\"id\":\"9\",\"part\":\"lesson01-01\",\"word\":\"leisure\",\"partOfSpeech\":\"名詞\",\"trans\":\"余暇、休暇\",\"sentence\":\"Around 30,000 boats are registered for leisure use in the British canals.\",\"sentenceTrans\":\"イギリスの運河では、余暇用に訳３万席のボートが登録されている。\"},{\"id\":\"10\",\"part\":\"lesson01-01\",\"word\":\"narrow boat\",\"partOfSpeech\":\"名詞\",\"trans\":\"ナローボート（運河などで運行する船のこと）\",\"sentence\":\"This number is the highest in the history of narrow boats.\",\"sentenceTrans\":\"この数字は ナローボートの歴史の中で最も多いです。\"}];\n}","class EnglishVoice {\n  static speech(text:string, lang: string, rate: number) {\n    const synth = window.speechSynthesis;\n    const voices = synth.getVoices().filter(voice => voice.lang === lang);\n    const voice = voices[0];\n    const utter = new SpeechSynthesisUtterance();\n    utter.text = text;\n    utter.lang = lang;\n    utter.voice = voice;\n    utter.rate = rate;\n    window.speechSynthesis.speak(utter);\n  }\n}\n\nexport default EnglishVoice;","import * as React from 'react';\nimport { Container, Button, Grid, Typography, TextField, Avatar } from '@material-ui/core';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\ninterface WordProps {\n    word: string;\n    partOfSpeech: string;\n    trans: string;\n    visibleWord: string;\n    isInputWordCompleted: boolean;\n    inputWordString:string;\n    onClick: () => void;\n    changeInputWordCompleted: (val:boolean) => void;\n    changeInputWord: (val:string) => void;    \n}\n\nclass Word extends React.Component<WordProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n    \n    const partOfSpeech = this.props.partOfSpeech.length ? this.props.partOfSpeech : '';\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <Grid container>\n            <Grid item xs={10}>\n              <Typography variant='subtitle1'>\n                {this.props.trans}\n              </Typography>\n            </Grid>\n            <Grid item xs={2}>\n              <Avatar\n                variant='circular'\n                component='span'\n              >\n                {partOfSpeech.substr(0,1)}\n              </Avatar>\n            </Grid>\n          </Grid>\n          <Typography variant='h4' className={this.props.visibleWord}>\n            {this.props.word}\n          </Typography>\n          <br/>\n          <Grid container direction=\"row\">\n            <TextField\n              error={!this.props.isInputWordCompleted}\n              label= {this.props.isInputWordCompleted ? \"OK\" : \"input word\"}\n              fullWidth={true}\n              value={this.props.inputWordString}\n              variant=\"outlined\"\n              onChange={(o) => \n                {\n                  this.props.changeInputWord(o.target.value.toLowerCase());\n                  if (this.props.word.toLowerCase() === o.target.value.toLowerCase()) {\n                    this.props.changeInputWordCompleted(true);\n                    this.props.onClick();\n                    EnglishVoice.speech('OK. '+this.props.word, 'en-US', 1);\n                  } else {\n                    this.props.changeInputWordCompleted(false);\n                  }\n                }\n              }\n            />\n          </Grid>\n          <br/>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() => this.props.onClick()}\n                >\n                  <TranslateIcon/>\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.word, 'en-US', 1);\n                }}\n              >\n                <VolumeUpIcon/>\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Word;","import * as React from 'react';\nimport { Container, Button, Grid } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport EnglishVoice from '../../lib/EnglishVoice';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport TranslateIcon from '@material-ui/icons/Translate';\nimport 'fontsource-roboto';\n\n\ninterface SentenceProps {\n    sentence: string;\n    trans: string;\n    visibleSentence: string;\n    speechSpeedRate: number;\n    onClick: () => void;\n}\n\nclass Sentence extends React.Component<SentenceProps, {}>{\n  render () {\n    const style: React.CSSProperties = {\n      display: 'inline-block',\n      width: '100%',\n      height: '20%',\n    }\n\n    return (\n      <div className=\"word-wrap\">\n        <Container maxWidth=\"sm\">\n          <div onClick={() => this.props.onClick()}>\n            <p className=\"word\">{this.props.trans}</p>\n          </div>\n          <Typography component=\"div\">\n            <Box\n              className={this.props.visibleSentence}\n              m={1}\n            >\n              {this.props.sentence}\n            </Box>\n          </Typography>\n          <Grid\n            container\n            direction=\"row\"\n            spacing={5}\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                color=\"primary\"\n                onClick={() => this.props.onClick()}\n              >\n                <TranslateIcon\n                  fontSize='small'\n                />\n              </Button>\n            </Grid>\n            <Grid item xs={5}>\n              <Button\n                style={style}\n                variant=\"outlined\"\n                onClick={() => {\n                  EnglishVoice.speech(this.props.sentence, 'en-US', this.props.speechSpeedRate);\n                }}\n              >\n                <VolumeUpIcon\n                  fontSize='small'\n                />\n              </Button>\n            </Grid>\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Sentence;","import * as React from 'react';\nimport { Button, Grid } from '@material-ui/core';\nimport 'fontsource-roboto';\n\nconst Pagination: React.FC<{onClickPrev: () => void, onClickNext: () => void}> = ({onClickPrev, onClickNext}) => {\n  return (\n    <Grid\n    container\n    direction=\"row\"\n    justify=\"space-around\"\n    alignItems=\"flex-end\"\n    >\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => onClickPrev()}\n      >\n        Prev\n      </Button> \n      <Button \n        variant=\"contained\"\n        color=\"primary\"\n        onClick={() => onClickNext()}\n      >\n        Next\n      </Button>\n    </Grid>\n  );\n}\n\nexport default Pagination;","import * as React from 'react';\nimport { Grid, Typography, Box } from '@material-ui/core';\n\nconst Part: React.FC<{currentPart: string}> = ({currentPart}) => {\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"space-around\"\n      alignItems=\"flex-end\"\n    >\n        <Typography component=\"div\">\n          <Box\n            fontSize=\"h6.fontSize\" m={1}\n          >\n            {currentPart}\n          </Box>\n        </Typography>        \n    </Grid>\n  );\n}\n\nexport default Part;","import React, { useState } from 'react';\nimport { Drawer, IconButton, List, ListItem, Slider } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { ListItemText, ListItemIcon } from '@material-ui/core';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Divider from '@material-ui/core/Divider';\n\ninterface SideMenuProps {\n  parts: string[];\n  currentPart: string;\n  changeCurrentPart: (val:string) => void;\n  speechSpeedRate: number;\n  changeSpeechSpeedRate: (val:number) => void;\n}\n\nconst SideMenu: React.FC<SideMenuProps> = props => {\n  const [menuToggle, setMenuToggle] = useState(false);\n\n  const toggleDrawer = () => {\n    setMenuToggle(!menuToggle);\n  };\n\n  const parts = props.parts;\n\n  const useStyles = makeStyles({\n    list: {\n      width: '50vw',\n    }\n  });\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <IconButton\n        color=\"inherit\"\n        aria-label=\"open drawer\"\n        edge=\"end\"\n        onClick={() => toggleDrawer()}\n      />\n      <Drawer\n        anchor='right'\n        open={menuToggle}\n        onClose={() => setMenuToggle(false)}\n      >\n        <div className={classes.list}>\n          <CloseIcon\n            onClick={() => setMenuToggle(false)}\n          />\n          <List component=\"nav\" aria-label=\"secondary part\">\n            {\n              parts.map(p => {\n                return (\n                  <ListItem \n                    button\n                    onClick={() => {\n                      props.changeCurrentPart(p);\n                      setMenuToggle(false);\n                    }}\n                    key={p}\n                  >\n                    <ListItemText primary={p}/>\n                    <ListItemIcon>\n                      {\n                        p === props.currentPart\n                        &&\n                        <CheckIcon />\n                      }\n                    </ListItemIcon>\n                  </ListItem>\n                )\n              })\n            }\n          </List>\n          <Divider />\n          <List component=\"nav\" aria-label=\"thirdry speechSpeed\">\n            <ListItem>\n              <Slider\n                min={0.1}\n                max={1}\n                step={0.1}\n                value={props.speechSpeedRate}\n                aria-labelledby=\"speech-speed-rate\"\n                valueLabelDisplay=\"auto\"\n                onChange={(e, v) => {\n                  let rate:number = props.speechSpeedRate;\n                  if (typeof(v) ===  'number') {\n                    rate = v;\n                  }\n                  props.changeSpeechSpeedRate(rate);\n                }}\n              />\n            </ListItem>\n          </List>\n        </div>\n      </Drawer>\n      <MenuIcon />\n    </>\n  );\n}\n\nexport default SideMenu;","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport EnglishData from '../context/EnglishData';\nimport Word from '../components/WordPage/Word';\nimport Sentence from '../components/WordPage/Sentence';\nimport Paginate from '../components/Pagination';\nimport Part from '../components/Part';\nimport SideMenu from '../components/SideMenu';\n\nconst WordPage: React.FC<{}> = () => {\n    const [slides, setSlides] = useState(EnglishData.WORDS.filter(w => w.part === EnglishData.getFirstPart()));\n    const [wordIndex, setWordIndex] = useState<number>(0);\n    const [visibleWord, setVisibleWord] = useState<string>('word-hidden');\n    const [currentPart, setCurrentPart] = useState<string>(EnglishData.getFirstPart());\n    const [visibleSentence, setVisibleSentence] = useState<string>('word-hidden');\n    const [isInputWordCompleted, setIsInputWordCompleted] = useState<boolean>(false);\n    const [inputWordString, setInputWordString] = useState<string>('');\n    const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n\n    const slidePrev = () => {\n      if (wordIndex > 0) {\n        setWordIndex(wordIndex - 1);\n        setVisibleWord('word-hidden');\n        setVisibleSentence('word-hidden');\n        setIsInputWordCompleted(false);\n        setInputWordString('');\n      }\n    }\n  \n    const slideNext = () => {\n      if (wordIndex < slides.length-1) {\n        setWordIndex(wordIndex + 1);\n        setVisibleWord('word-hidden');\n        setVisibleSentence('word-hidden');\n        setIsInputWordCompleted(false);\n        setInputWordString('');\n      }\n    }\n\n    const changeInputWordCompleted = (val: boolean) => {\n      setIsInputWordCompleted(val);\n    }\n\n    const changeInputWord = (val: string) => {\n      setInputWordString(val);\n    }\n\n    const changeCurrentPart = (val: string) => {\n      if (currentPart !== val) {\n        const s = EnglishData.WORDS.filter(w => w.part === val);\n          setSlides(s)\n          setCurrentPart(val);\n          setWordIndex(0);\n          setVisibleWord('word-hidden');\n          setVisibleSentence('word-hidden');\n          setIsInputWordCompleted(false);\n          setInputWordString('');\n        }\n    }\n\n    const changeSpeechSpeedRate = (val: number) => {\n      setSpeechSpeedRate(val);\n    }\n\n    return (\n      <>\n        <SideMenu\n          parts={EnglishData.getParts()}\n          currentPart={currentPart}\n          changeCurrentPart={(val) => changeCurrentPart(val)}\n          speechSpeedRate={speechSpeedRate}\n          changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n        />\n        <Container maxWidth=\"sm\">\n          <Paginate\n            onClickPrev={slidePrev}\n            onClickNext={slideNext}\n          />\n          <hr/>\n          <Word\n            word={slides[wordIndex].word}\n            partOfSpeech={slides[wordIndex].partOfSpeech}\n            trans={slides[wordIndex].trans}\n            visibleWord = {visibleWord}\n            isInputWordCompleted={isInputWordCompleted}\n            inputWordString={inputWordString}\n            onClick={() => setVisibleWord('word-visible')}\n            changeInputWordCompleted={(val) => changeInputWordCompleted(val)}\n            changeInputWord={(val) => changeInputWord(val)}\n          />\n          <hr/>\n          <Sentence\n            sentence={slides[wordIndex].sentence}\n            trans={slides[wordIndex].sentenceTrans}\n            visibleSentence={visibleSentence}\n            speechSpeedRate={speechSpeedRate}\n            onClick = {() => setVisibleSentence('word-visible')}\n          />\n          <hr/>\n          <Part\n            currentPart={currentPart}\n          />\n        </Container>\n      </>        \n    )\n} \n\nexport default WordPage;","import React from 'react';\nimport { Container, Button, Grid, Typography } from '@material-ui/core';\n\ninterface GrammerProps {\n  answer: string[];\n  stockWords: string[];\n  ansWords: string[];\n  sentence: string;\n  translate: string;\n  moveAnsWords: (w:string, i:number) => void;\n  moveStockWords: (w:string, i:number) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const stockWords = props.stockWords;\n  const ansWords = props.ansWords;\n\n  const buttonStyle: React.CSSProperties = {\n    display: 'inline-block',\n    minWidth: '20px',\n    height: '40px',\n    textTransform: 'lowercase',\n    margin: '5px',\n  }\n\n  const wordsStyle: React.CSSProperties = {\n    height: '30vh',\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            ansWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color=\"secondary\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  onClick={() => props.moveStockWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            stockWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color=\"primary\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  onClick={() => props.moveAnsWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/WordGrammerPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport EnglishData from '../context/EnglishData';\nimport EnglishVoice from '../lib/EnglishVoice';\n\nconst GrammerPage:React.FC = () => {\n  const [slides, setSlides] = useState(EnglishData.getSentences().filter(w => w.part === EnglishData.getFirstPart()));\n  const [wordIndex, setWordIndex] = useState<number>(0);\n  const [currentPart, setCurrentPart] = useState<string>(EnglishData.getFirstPart());\n  const [answer, setAnswer] = useState<string[]>(slides[wordIndex].sentence.toLocaleLowerCase().replace('.', '').split(' '));\n  const [stockWords, setStockWords] = useState<string[]>(\n    answer\n      .map(function (a) { return { weight: Math.random(), value: a } })\n      .sort(function (a, b) { return a.weight - b.weight })\n      .map(function (a) { return a.value })\n  );\n  const [ansWords, setAnsWords] = useState<string[]>([]);\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const i:number = wordIndex - 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n\n      setWordIndex(i);\n      setAnswer(s);\n      setStockWords(shuffle(s));\n      setAnsWords([]);\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n\n      setWordIndex(i);\n      setAnswer(s);\n      setStockWords(shuffle(s));\n      setAnsWords([]);\n    }\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      const s = EnglishData.getSentences().filter(w => w.part === val);\n      setSlides(s)\n      setCurrentPart(val);\n      setWordIndex(0);\n\n      const a:string[] = separateSentence(s[0].sentence);\n      setAnswer(a);\n      setStockWords(shuffle(a));\n      setAnsWords([]);\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const moveAnsWords = (word: string, index: number) => {\n    const aw = ansWords;\n    const sw = stockWords.filter((v, i) => {\n      return i !== index;\n    });\n    aw.push(word);\n\n    setAnsWords(aw);\n    setStockWords(sw);\n\n    EnglishVoice.speech(word, 'en-US', 1);\n    if (answer.every((a, index) => a === aw[index])) {\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    }\n  }\n\n  const moveStockWords = (word: string, index: number) => {\n    const sw = stockWords;\n    const aw = ansWords.filter((v, i) => {\n      return i !== index;\n    });\n    sw.push(word);\n\n    setStockWords(sw);\n    setAnsWords(aw);\n  }\n\n  const separateSentence = (s:string) => {\n    return s.toLocaleLowerCase().replace('.', '').split(' ');\n  }\n\n  const shuffle = (w:string[]) => {\n    return w.map(function (a) { return { weight: Math.random(), value: a } })\n    .sort(function (a, b) { return a.weight - b.weight })\n    .map(function (a) { return a.value })\n  }\n\n  return (\n    <>\n      <SideMenu\n        parts={EnglishData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container>\n        <Paginate\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        <Grammer\n          answer={answer}\n          stockWords={stockWords}\n          ansWords={ansWords}\n          sentence={slides[wordIndex].sentence}\n          translate={slides[wordIndex].sentenceTrans}\n          moveAnsWords={(w, i) => moveAnsWords(w, i)}\n          moveStockWords={(w, i) => moveStockWords(w, i)}\n        />\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerPage;","import React from 'react';\nimport { Container, Button, Grid, Typography } from '@material-ui/core';\n\ninterface GrammerProps {\n  answer: string[];\n  stockWords: string[];\n  ansWords: string[];\n  sentence: string;\n  translate: string;\n  moveAnsWords: (w:string, i:number) => void;\n  moveStockWords: (w:string, i:number) => void;\n}\n\nconst Grammer: React.FC<GrammerProps> = props => {\n  const stockWords = props.stockWords;\n  const ansWords = props.ansWords;\n\n  const buttonStyle: React.CSSProperties = {\n    display: 'inline-block',\n    minWidth: '20px',\n    height: '40px',\n    textTransform: 'lowercase',\n    margin: '5px',\n  }\n\n  const wordsStyle: React.CSSProperties = {\n    height: '30vh',\n  }\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Grid container>\n          <Typography variant='subtitle1'>\n            {props.translate}\n          </Typography>\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            ansWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color=\"secondary\"\n                  variant=\"contained\"\n                  size=\"small\"\n                  onClick={() => props.moveStockWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n        </Grid>\n      </Container>\n      <Container maxWidth=\"sm\" style={wordsStyle}>\n        <Grid container>\n          {\n            stockWords.map((w, index) => {\n              return (\n                <Button\n                  style={buttonStyle}\n                  color=\"primary\"\n                  variant=\"outlined\"\n                  size=\"small\"\n                  onClick={() => props.moveAnsWords(w, index)}\n                  key={index}\n                >\n                  {w}\n                </Button>\n              )\n            })\n          }\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default Grammer;","type sentenceType = {\n  part: string,\n  sentence: string,\n  sentenceTrans: string,\n}\n\nexport default class GrammerData {\n  static getFirstPart() {\n    return this.WORDS.reduce((val:string[], cur) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, [])[0];  \n  }\n\n  static getParts() {\n    return this.WORDS.reduce((val:string[], cur) => {\n      if (!val.includes(cur.part)) {\n        val.push(cur.part);\n      }\n      return val;\n    }, []);  \n  }\n\n  static getSentences() {\n    return this.WORDS.reduce((val:sentenceType[], cur) => {\n      const w:sentenceType = {\n        part: cur.part,\n        sentence: cur.sentence, \n        sentenceTrans: cur.sentenceTrans\n      };\n\n      if (!val.some(v => \n        v.part === w.part && v.sentence === w.sentence)) {\n        val.push(w);\n      }\n      return val;\n    }, []);  \n  }\n\n  static readonly WORDS = \n  [{\"id\":\"1\",\"part\":\"blue chart001\",\"sentence\":\"Bill  is  a  high school  student .\",\"sentenceTrans\":\"ビルは高校生です\"},{\"id\":\"2\",\"part\":\"blue chart001\",\"sentence\":\"Bill  is  not  a  high school  student.\",\"sentenceTrans\":\"ビルは高校生ではありません。\"},{\"id\":\"3\",\"part\":\"blue chart001\",\"sentence\":\"My  mother  can  drive  a  car.\",\"sentenceTrans\":\"母は車の運転ができます。\"},{\"id\":\"4\",\"part\":\"blue chart001\",\"sentence\":\"My  mother  cannot  drive  a  car.\",\"sentenceTrans\":\"母は車の運転ができない\"},{\"id\":\"5\",\"part\":\"blue chart001\",\"sentence\":\"My  mother  can't  drive  a  car.\",\"sentenceTrans\":\"母は車の運転ができない。\"},{\"id\":\"6\",\"part\":\"blue chart001\",\"sentence\":\"I  know  her  address.\",\"sentenceTrans\":\"私は彼女の住所を知っています。\"},{\"id\":\"7\",\"part\":\"blue chart001\",\"sentence\":\"I  do  not  know  her  address.\",\"sentenceTrans\":\"私は彼女の住所を知りません。\"},{\"id\":\"8\",\"part\":\"blue chart001\",\"sentence\":\"I  don't  know  her  address.\",\"sentenceTrans\":\"私は彼女の住所を知りません。\"}];\n} ","import React, { useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport Paginate from '../components/Pagination';\nimport Grammer from '../components/GrammerPage/Grammer';\nimport SideMenu from '../components/SideMenu';\nimport GrammerData from '../context/GrammerData';\nimport EnglishVoice from '../lib/EnglishVoice';\n\n\nconst GrammerPage:React.FC = () => {\n  const [slides, setSlides] = useState(GrammerData.getSentences().filter(w => w.part === GrammerData.getFirstPart()));\n  const [wordIndex, setWordIndex] = useState<number>(0);\n  const [currentPart, setCurrentPart] = useState<string>('toeic001');\n  const [answer, setAnswer] = useState<string[]>(slides[wordIndex].sentence.toLocaleLowerCase().replace('.', '').split('  '));\n  const [stockWords, setStockWords] = useState<string[]>(\n    answer\n      .map(function (a) { return { weight: Math.random(), value: a } })\n      .sort(function (a, b) { return a.weight - b.weight })\n      .map(function (a) { return a.value })\n  );\n  const [ansWords, setAnsWords] = useState<string[]>([]);\n  const [speechSpeedRate, setSpeechSpeedRate] = useState<number>(0.8);\n  const slidePrev = () => {\n    if (wordIndex > 0) {\n      const i:number = wordIndex - 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n\n      setWordIndex(i);\n      setAnswer(s);\n      setStockWords(shuffle(s));\n      setAnsWords([]);\n    }\n  }\n\n  const slideNext = () => {\n    if (wordIndex < slides.length-1) {\n      const i:number = wordIndex + 1;\n      const s:string[] = separateSentence(slides[i].sentence);\n\n      setWordIndex(i);\n      setAnswer(s);\n      setStockWords(shuffle(s));\n      setAnsWords([]);\n    }\n  }\n\n  const changeCurrentPart = (val: string) => {\n    if (currentPart !== val) {\n      const s = GrammerData.getSentences().filter(w => w.part === val);\n      setSlides(s)\n      setCurrentPart(val);\n      setWordIndex(0);\n\n      const a:string[] = separateSentence(s[0].sentence);\n      setAnswer(a);\n      setStockWords(shuffle(a));\n      setAnsWords([]);\n    }\n  }\n\n  const changeSpeechSpeedRate = (val: number) => {\n    setSpeechSpeedRate(val);\n  }\n\n  const moveAnsWords = (word: string, index: number) => {\n    const aw = ansWords;\n    const sw = stockWords.filter((v, i) => {\n      return i !== index;\n    });\n    aw.push(word);\n\n    setAnsWords(aw);\n    setStockWords(sw);\n\n    EnglishVoice.speech(word, 'en-US', 1);\n    if (answer.every((a, index) => a === aw[index])) {\n      EnglishVoice.speech('OK.' + slides[wordIndex].sentence, 'en-US', speechSpeedRate);\n    }\n  }\n\n  const moveStockWords = (word: string, index: number) => {\n    const sw = stockWords;\n    const aw = ansWords.filter((v, i) => {\n      return i !== index;\n    });\n    sw.push(word);\n\n    setStockWords(sw);\n    setAnsWords(aw);\n  }\n\n  const separateSentence = (s:string) => {\n    return s.toLocaleLowerCase().replace('.', '').split('  ');\n  }\n\n  const shuffle = (w:string[]) => {\n    return w.map(function (a) { return { weight: Math.random(), value: a } })\n    .sort(function (a, b) { return a.weight - b.weight })\n    .map(function (a) { return a.value })\n  }\n\n  return (\n    <>\n      <SideMenu\n        parts={GrammerData.getParts()}\n        currentPart={currentPart}\n        changeCurrentPart={(val) => changeCurrentPart(val)}\n        speechSpeedRate={speechSpeedRate}\n        changeSpeechSpeedRate={(val) => changeSpeechSpeedRate(val)}\n      />\n      <Container>\n        <Paginate\n          onClickPrev={slidePrev}\n          onClickNext={slideNext}\n        />\n        <hr/>\n        <Grammer\n          answer={answer}\n          stockWords={stockWords}\n          ansWords={ansWords}\n          sentence={slides[wordIndex].sentence}\n          translate={slides[wordIndex].sentenceTrans}\n          moveAnsWords={(w, i) => moveAnsWords(w, i)}\n          moveStockWords={(w, i) => moveStockWords(w, i)}\n        />\n      </Container>\n    </>\n  );\n}\n\nexport default GrammerPage;","import React from 'react';\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport * as colors from \"@material-ui/core/colors\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport 'fontsource-roboto';\nimport GlobalMenu from './components/GlobalMenu';\nimport WordPage from './pages/WordPage';\nimport WordGrammerPage from './pages/WordGrammerPage';\nimport GrammerPage from './pages/GrammerPage';\n\ninterface AppProps {\n}\n\ninterface AppState {\n  currentPage: pageNames\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    \n    this.state = {\n      currentPage: 'WordPage'\n    }\n  }\n\n  render () {\n    const theme = createMuiTheme({\n      palette: {\n        primary: {\n          main: colors.blue[800],\n        },\n        type: 'dark',\n      },\n    });\n\n    const changePage = (val: pageNames) => {\n      this.setState({\n        currentPage: val\n      })\n    }\n\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        {\n          this.state.currentPage === 'WordPage'\n          &&\n          <WordPage />\n        }\n        {\n          this.state.currentPage === 'WordGrammerPage'\n          &&\n          <WordGrammerPage />\n        }\n        {\n          this.state.currentPage === 'GrammerPage'\n          &&\n          <GrammerPage />\n        }\n        <GlobalMenu\n            currentPage={this.state.currentPage}\n            changeCurrentPage= {(val) => changePage(val)}\n        />\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}